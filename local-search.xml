<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>IO流</title>
    <link href="/2022/03/10/IO%E6%B5%81/"/>
    <url>/2022/03/10/IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="一-文件"><a href="#一-文件" class="headerlink" title="一  文件"></a>一  文件</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p><strong>文件是保存数据的地方</strong>, 如word文档, txt文件…. 它既可以是图片,也可以是视频, 音频,,,,,,</p><p>文件流: </p><ol><li>文件在程序中是以流的形式来操作:</li></ol><p>​        Java 程序(内存)  &lt;&lt;&#x3D;&#x3D;&#x3D;输入流&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;文件(磁盘)</p><p>​        Java 程序 ( 内存 )  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;输出流  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt; 磁盘</p><ol start="2"><li><p><strong>流:</strong> 数据在数据源(文件) 和程序(内存) 之经历的路径</p></li><li><p><strong>输入流:</strong> 数据从数据源(文件) 到程序(内存) 的路径</p></li><li><p><strong>输出流:</strong> 数据从程序(内存) 到数据源(文件)的路径</p></li></ol><h2 id="1-2-常用的文件操作"><a href="#1-2-常用的文件操作" class="headerlink" title="1.2 常用的文件操作"></a>1.2 常用的文件操作</h2><p><strong>创建文件对象相关的构造器和方法</strong></p><p>相关方法:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(String pathname); <span class="hljs-comment">// 根据路劲构建一个File对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(File parent, String child); <span class="hljs-comment">//根据父目录文件 + 子路径构建</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(String parent, String child); <span class="hljs-comment">// 根据父目录 + 子路径构建</span><br>createNewFile  ; <span class="hljs-comment">//创建新文件</span><br></code></pre></div></td></tr></table></figure><p><img src="/2022/03/10/IO%E6%B5%81/image-20220310212123216.png" alt="File结构"></p><ul><li>应用案例演示</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//在e盘下, 创建文件 news1.txt, news2.txt, news3.txt ; 用三种不同的方式创建</span><br><br>    <span class="hljs-comment">//方式一:</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\news1.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <br>        <br>        <br>        <br>        <br>        <br>        <br>        <br>        <br><span class="hljs-comment">//        file.createNewFile();</span><br><span class="hljs-comment">//        File file1 = new File(&quot;e:/news2.txt&quot;);</span><br><span class="hljs-comment">//        file1.createNewFile();</span><br><span class="hljs-comment">//        File file3 = new File(&quot;e://news3.txt&quot;);</span><br><span class="hljs-comment">//        file3.createNewFile();</span><br>    &#125;<br><br><br>    <span class="hljs-comment">//方式二</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">parentFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news2.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentFile, fileName);<span class="hljs-comment">//内存中创建news2.txt</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<span class="hljs-comment">//输出到磁盘中</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">//方式三:</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news3.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentPath, filePath);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><ul><li>获取文件相关信息<ol><li>getName</li><li>getAbsolutePath</li><li>getParent</li><li>length : </li><li>exists: 是否存在</li><li>isFile</li><li>isDirectory</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//获取文件信息</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\new1.txt&quot;</span>);<br>    file.createNewFile();<br><br>    System.out.println(file.getName());<span class="hljs-comment">//文件名: new1.txt</span><br>    System.out.println(file.getAbsolutePath());<span class="hljs-comment">// 绝对路径 e:\new1.txt</span><br>    System.out.println(file.getParent());<span class="hljs-comment">// 父级目录   e:\</span><br>    System.out.println(file.length());<span class="hljs-comment">//文件大小(字节大小) 0    utf8 : 英文1字节, 汉字3字节</span><br>    System.out.println(file.exists());<span class="hljs-comment">//是否存在, true</span><br>    System.out.println(file.isFile());<span class="hljs-comment">// 是不是一个文件 true</span><br>    System.out.println(file.isDirectory());<span class="hljs-comment">//是不是一个目录 false</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>目录的操作和文件的删除</li></ul><p>mkdir 创建一级目录, mkdirs创建多级目录, delete删除空目录或文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//目录的操作</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Directory</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\news.txt&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>    <span class="hljs-keyword">if</span>(file.exists())&#123;<br>        <span class="hljs-keyword">if</span>(file.delete()) &#123; <span class="hljs-comment">// 返回布尔值</span><br>            System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\new&quot;</span>);<br>    file1.mkdir();<span class="hljs-comment">//创建一级目录   目录 = 文件夹</span><br><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\n\\e\\w&quot;</span>);<br>    file2.mkdirs(); <span class="hljs-comment">// 创建多级目录</span><br><br>    file2.delete(); <span class="hljs-comment">// 不能将所有目录删除</span><br>    file1.delete();<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="二-IO流原理及流的分类"><a href="#二-IO流原理及流的分类" class="headerlink" title="二  IO流原理及流的分类"></a>二  IO流原理及流的分类</h1><h2 id="2-1-Java-IO-流的原理"><a href="#2-1-Java-IO-流的原理" class="headerlink" title="2.1 Java IO 流的原理"></a>2.1 Java IO 流的原理</h2><ol><li>I&#x2F;O是输入与输出, I&#x2F;O技术是非常实用的技术, 用于处理数据传输. 如读写文件, 网络通讯等</li><li>Java程序中, 对于数据的输入输出操作以”流” 的方式进行</li><li>Java.io 包下提供各种” 流 “ 类和接口, 用以获取不同类型的数据, 并通过方法输入或输出数据</li><li>输入流: 读取外部数据到内存</li><li>输出: 将程序数据从内存输出到磁盘,光盘等存储设备中</li></ol><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><p>以上四个类都是抽象类, 使用时需要创建其子类</p><p><img src="/2022/03/10/IO%E6%B5%81/image-20220311130038020.png" alt="image-20220311130038020"></p><h2 id="2-2-IO流体系-常用的类"><a href="#2-2-IO流体系-常用的类" class="headerlink" title="2.2 IO流体系 - 常用的类"></a>2.2 IO流体系 - 常用的类</h2><ul><li><p>InputStream : 字节输入流</p><p>InputStream抽象类是所有类字节输入流的超类</p></li></ul><p>InputStream 常用的子类</p><ol><li>FileInputStream: 文件输入流</li><li>BufferedInputStream: 缓冲字节输入流</li><li>ObjectInputStream: 对象字节输入流</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//演示 FileInputStream 的使用 ( 字节输入流:  文件 ==&gt; 程序 )</span><br><span class="hljs-comment">//这个字节流, 对于utf8编码只能正常读取英文字符, 汉字不行</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile01</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">readDate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;e:\\hello.txt&quot;</span>);<br>        <span class="hljs-keyword">while</span> ((readDate = fileInputStream.read()) != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//返回 -1 表示读取完毕</span><br>            System.out.print((<span class="hljs-type">char</span>)readDate);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭文件流, 释放资源</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>&#125;<span class="hljs-comment">//readFile01()</span><br><br><br><span class="hljs-comment">// 使用 read(byte[] b) 以字节流 读取字符, 每次b个字节</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile02</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">readDate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">3</span>];<span class="hljs-comment">// 一次读取3个字节</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;e:\\hello.txt&quot;</span>);<br>        <span class="hljs-keyword">while</span> ((readDate = fileInputStream.read(buff)) != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//返回 -1 表示读取完毕</span><br>            System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buff,<span class="hljs-number">0</span>,readDate));<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭文件流, 释放资源</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>&#125;<span class="hljs-comment">//readFile02()</span><br></code></pre></div></td></tr></table></figure><p>FileOutputStream 在文件中写入数据, 如果文件不存在则会创建文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.testng.annotations.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;e:\\123.jpg&quot;</span>);<br>        fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;e:\\789.jpg&quot;</span>);<br>        <span class="hljs-type">byte</span>[] buffer =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readlen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((readlen = fileInputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            fileOutputStream.write(buffer,<span class="hljs-number">0</span>,readlen);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream.close();<br>            fileOutputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<span class="hljs-comment">//catch-try-finally</span><br>&#125;<span class="hljs-comment">//test</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>FileReader和FileWriter 介绍</strong></li></ul><p>FileReader 和 FileWriter 字符流, 即按照字符来操作IO</p><p>FileReader相关方法:</p><ol><li>new FileReader(File&#x2F;String)</li><li>read( ): 每次读取单个字符, 返回该字符, 如果到文件末尾就返回 -1</li><li>read(char[ ] ) : 批量读取多个字符到数组, 返回读取到的字符, 如果到文件末尾返回 -1</li></ol><p><img src="/2022/03/10/IO%E6%B5%81/image-20220311143506491.png" alt="image-20220311143506491"></p><p>FileWriter相关方法: </p><ol><li>new FileWriter(File&#x2F;String): 覆盖模式</li><li>new FileWriter(File&#x2F;String, true) : 追加模式</li><li>write( int ) : 写入单个字符</li><li>write( char[ ]) : 写入指定数组</li><li>write( char[ ], from, len) : 写入字符串的指定部分</li><li>write( String )</li><li>wirte( String , from , to )</li></ol><p><img src="/2022/03/10/IO%E6%B5%81/image-20220311144333872.png" alt="image-20220311144333872"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.testng.annotations.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">RW</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;e:\\storyy.txt&quot;</span>);<br>        fileWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;e:\\copy_story.txt&quot;</span>);<br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">32</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> chars.length;<br>        <span class="hljs-keyword">while</span>((length = fileReader.read(chars)) != -<span class="hljs-number">1</span>)&#123;<br>            fileWriter.write(chars,<span class="hljs-number">0</span>,length);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fileReader.close();  <span class="hljs-comment">// == flash + close</span><br>            fileWriter.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="三-节点流和处理流"><a href="#三-节点流和处理流" class="headerlink" title="三  节点流和处理流"></a>三  节点流和处理流</h1><h2 id="3-1-基本介绍"><a href="#3-1-基本介绍" class="headerlink" title="3.1 基本介绍"></a>3.1 基本介绍</h2><p><strong>节点流</strong>可以从一个<strong>特定的数据源</strong>读写数据, 如FileReader , FileWriter </p><p><strong>处理流</strong>(也叫包装流) 是” 连接 “ 在已存在的流( 节点流或处理流 ) 之上 , 为程序提供更为强大的读写功能, 也更加灵活 , 如 BufferedReader, BufferedWriter</p><p>BfferedReader 类中, 有属性Reader , 即可以封装一个节点流, 该节点流可以是任意的, 只要是Reader子类即可  (  修饰器模式  )</p><h2 id="3-2-节点流与处理流的区别和联系"><a href="#3-2-节点流与处理流的区别和联系" class="headerlink" title="3.2 节点流与处理流的区别和联系"></a>3.2 节点流与处理流的区别和联系</h2><ol><li>节点流是底层流&#x2F;低级流, 直接跟数据源相接</li><li>处理流包装节点流, 既可以消除不同节点流的实现差异, 也可以提供更方便的方法来完成输入输出</li><li>处理流(也叫包装流) 对节点进行包装, 使用了修饰器设计模式, 不会直接与数据源相连</li></ol><ul><li>处理流的功能主要体现在以下两个方面:<ol><li>性能的提高: 主要以增加缓冲的方式来提高输入输出的效率</li><li>操作的便捷: 处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据,使用更加灵活方便</li></ol></li></ul><h2 id="3-3-处理流-–-BufferedReader和BufferedWriter"><a href="#3-3-处理流-–-BufferedReader和BufferedWriter" class="headerlink" title="3.3 处理流 – BufferedReader和BufferedWriter"></a>3.3 处理流 – BufferedReader和BufferedWriter</h2><ul><li>BufferedReader 和 BufferedWriter 属于字节流, 是按照字符来读取数据的</li><li>关闭时, 只需要关闭外层流即可 &#x3D;&#x3D;&#x3D;&gt; 关闭包装流其内部的节点流会自动关闭( in.close( )  )</li></ul><p><img src="/2022/03/10/IO%E6%B5%81/image-20220311193120306.png" alt="image-20220311193120306"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\a.java&quot;</span>;<br>    <span class="hljs-comment">//创建BufferedRreader</span><br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(path));<br>    String line;<br>     <span class="hljs-keyword">while</span>((line = bufferedReader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(line);<br>    &#125;;<span class="hljs-comment">//按行读取,返回字符串 效率高, 返回为空时表示读取结束</span><br><br>    bufferedReader.close();<span class="hljs-comment">//只需要关闭外部包装流(处理流). 底层自动关闭节点流(in.close())</span><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="四-输入流🚒🚚🚛🚘"><a href="#四-输入流🚒🚚🚛🚘" class="headerlink" title="四  输入流🚒🚚🚛🚘"></a>四  输入流🚒🚚🚛🚘</h1><h2 id="4-1-InputSteam"><a href="#4-1-InputSteam" class="headerlink" title="4.1 InputSteam"></a>4.1 InputSteam</h2><h2 id="4-2-Reaer"><a href="#4-2-Reaer" class="headerlink" title="4.2 Reaer"></a>4.2 Reaer</h2><h1 id="五-输出流🦽🦼🚲🛴🛴🛵🏍"><a href="#五-输出流🦽🦼🚲🛴🛴🛵🏍" class="headerlink" title="五  输出流🦽🦼🚲🛴🛴🛵🏍"></a>五  输出流🦽🦼🚲🛴🛴🛵🏍</h1><h2 id="5-1-OutPutStream"><a href="#5-1-OutPutStream" class="headerlink" title="5.1 OutPutStream"></a>5.1 OutPutStream</h2><h2 id="5-2-Writer"><a href="#5-2-Writer" class="headerlink" title="5.2  Writer"></a>5.2  Writer</h2><h1 id="六-Properties-类"><a href="#六-Properties-类" class="headerlink" title="六  Properties 类"></a>六  Properties 类</h1>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图书管理系统</title>
    <link href="/2022/03/08/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/03/08/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="一-JavaWeb-项目环境搭建"><a href="#一-JavaWeb-项目环境搭建" class="headerlink" title="一 JavaWeb 项目环境搭建"></a>一 JavaWeb 项目环境搭建</h2><h2 id="1-1-开发环境和工具"><a href="#1-1-开发环境和工具" class="headerlink" title="1.1 开发环境和工具"></a>1.1 开发环境和工具</h2><p>操作系统: win10</p><p>内存: 4G以上</p><p>JDK: 8.0</p><p>开发工具: Intellij IDEA2021.3.2</p><p>服务器: Tomcat8.0</p><p>数据库工具: mysql5.7.37 + Navicat 15 for Mysql</p><h2 id="1-2-项目技术"><a href="#1-2-项目技术" class="headerlink" title="1.2 项目技术"></a>1.2 项目技术</h2><p>基于B&#x2F;S结构</p><p>前端: HTML + CSS + JS + JQueryZ</p><p>后端: Servlet + JSP + MysqlV</p><h2 id="1-3-数据库的创建"><a href="#1-3-数据库的创建" class="headerlink" title="1.3 数据库的创建"></a>1.3 数据库的创建</h2><p>数据库名: bookdb</p><p>字符集: utf8</p><p>排序规则:  utf8_general_ci 不区分大小写</p>]]></content>
    
    
    <categories>
      
      <category>Java项目</category>
      
      <category>学生管理系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目</tag>
      
      <tag>图书管理系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM</title>
    <link href="/2022/03/07/JVM/"/>
    <url>/2022/03/07/JVM/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM-探究"><a href="#JVM-探究" class="headerlink" title="JVM 探究"></a>JVM 探究</h1><ul><li>请你谈谈jvm的理解?  java8虚拟机和之前的变化?  什么是OOM , 什么是 StackOverflowError?</li></ul>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程</title>
    <link href="/2022/03/07/%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/03/07/%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>  [TOC]</p><h1 id="一-线程相关概念"><a href="#一-线程相关概念" class="headerlink" title="一 线程相关概念"></a>一 线程相关概念</h1><ol><li>单线程: 同一时刻, 只允许执行一个线程</li><li>多线程: 同一个时刻, 可以执行多个线程</li><li>并发: 同一个时刻, 多个任务交替执行</li><li>并行: 同一个时刻, 多个任务同时执行</li></ol><h1 id="二-线程的基本使用"><a href="#二-线程的基本使用" class="headerlink" title="二 线程的基本使用"></a>二 线程的基本使用</h1><p>在Java中线程使用有两种方式</p><ol><li>继承Thread类, 重写run方法</li><li>实现Runnable 接口, 重写run方法</li></ol><h2 id="2-1-应用案例1-—-继承Thread类"><a href="#2-1-应用案例1-—-继承Thread类" class="headerlink" title="2.1 应用案例1 —  继承Thread类"></a>2.1 应用案例1 —  继承Thread类</h2><blockquote><ol><li>请编写程序, 开启一个线程, 该线程每隔一秒 , 在控制台输出” 喵喵喵 “</li><li>对上题改进: 当输出80次 喵喵喵 , 结束该进程</li><li>使用 <code>JConsole</code> 监控线程执行情况, 并画出程序示意图</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 通过演示继承Thread类,创建线程</span><br><span class="hljs-comment"> *终端Terminal输入 jconsole</span><br><span class="hljs-comment"> * run --开启--&gt; 进程 --启动--&gt; main线程 --(cat.start() )启动---&gt; Thread-0线程</span><br><span class="hljs-comment"> * main线程结束 ----&gt; Thread-0线程结束  ---&gt; 没有线程了, 进程结束</span><br><span class="hljs-comment"> * 主线程main结束, 其子线程Thread-0并不会因此而结束</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//创建一个Cat对象, 可以当作线程使用</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        cat.start();<span class="hljs-comment">//启动线程, 如果直接使用cat.run() 那么这就会阻塞在这里.因为这样实际上没有创建新的线程</span><br>        <span class="hljs-comment">//说明: 当main线程启动一个子线程 Thread-0, 主线程不会阻塞,会继续执行</span><br>        <span class="hljs-comment">//1. start() --&gt; start0()---JVM调用(是一个本地方法native). 底层C/C++实现</span><br>        <span class="hljs-comment">//正真实现多线程的效果是start0()方法. start0 使用多线程方法调用run()方法</span><br>        <span class="hljs-comment">//最终的具体实现跟操作系统有关, 不同的操作系统调度run()方法的方式不同</span><br>        <span class="hljs-comment">//总之 start0才是真正实现多线程的方法</span><br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">90</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程在执行 i&quot;</span> + i + <span class="hljs-string">&quot;主线程名&quot;</span> + Thread.currentThread().getName());<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//当继承了 Thread 类, 该类就可以当作线程使用</span><br><span class="hljs-comment">// Thread 的 run 方法 是Thread 类实现了 Runable类的 run 方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//重写run方法, 写上自己的业务逻辑</span><br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;喵喵 ,我是小猫咪&quot;</span>+ ++time + <span class="hljs-string">&quot;线程名称&quot;</span> + Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(time == <span class="hljs-number">800</span>)&#123;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">//time = 80, 线程退出</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-2-应用案例2-—-实现Runnable接口"><a href="#2-2-应用案例2-—-实现Runnable接口" class="headerlink" title="2.2 应用案例2 —- 实现Runnable接口"></a>2.2 应用案例2 —- 实现Runnable接口</h2><blockquote><p>说明:</p><ol><li>java是单继承, 在某些情况下一个类可能已经继承了某个父类, 这时在用继承Thread类方法来创建线程显然不可能了</li><li>Java设计者们提供了另外一个方式创建线程, 就是通过实现Runnable接口来创建线程</li></ol><p>应用案例:</p><p>请编写程序, 该程序可以每隔一秒, 在控制台输出”hi “ ,当输出10次后,自动退出. 请使用实现Runnable 接口的方式实现. 这里是静态代理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.threaduse;<br><br><span class="hljs-keyword">import</span> com.sun.xml.internal.bind.v2.model.annotation.RuntimeAnnotationReader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 通过实现接口Runnable 来开发线程</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        <span class="hljs-comment">//dog没有start()方法</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(dog);<br>        <span class="hljs-comment">//创建了一个 Thread 对象, 把对象dog放入Thread</span><br>        thread.start();<br>        <span class="hljs-comment">//这里底层使用了一个设计模式: 代理模式: 静态代理模式</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<span class="hljs-comment">//通过实现Runnable接口 开发线程</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;小狗汪汪叫~~~ hi&quot;</span> + (++count) + Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span>)<br>                <span class="hljs-keyword">break</span>;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//模拟一个简单的 Thread 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-comment">//可以把ThreadProxy当作 Thread类</span><br>    <span class="hljs-comment">// Proxy 翻译--&gt; 代理</span><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">// 属性, Runnable类型</span><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(target != <span class="hljs-literal">null</span>)&#123;<br>            target.run();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadProxy</span><span class="hljs-params">(Runnable target)</span> &#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        start0();<span class="hljs-comment">//真正实现多线程方法的是Thread里的start0</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start0</span><span class="hljs-params">()</span>&#123;<br>        run();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-3-线程使用案例-–-多线程执行"><a href="#2-3-线程使用案例-–-多线程执行" class="headerlink" title="2.3 线程使用案例  – 多线程执行"></a>2.3 线程使用案例  – 多线程执行</h2><blockquote><p>请编写一个程序, 创建两个线程, 一个线程每隔一秒输出”Hello world”, 输出10次, 退出</p><p>一个线程每个一秒输出”hi”, 输出5次退出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.threaduse;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        Robot0 robot0 = new Robot0();</span><br><span class="hljs-comment">//        robot0.start();</span><br><span class="hljs-comment">//        Robot1 robot1 = new Robot1();</span><br><span class="hljs-comment">//        robot1.start();</span><br><span class="hljs-comment">//        Robot2 robot2 = new Robot2();</span><br><span class="hljs-comment">//        Thread thread = new Thread(robot2);</span><br><span class="hljs-comment">//        thread.start();</span><br><span class="hljs-comment">//        Robot3 robot3 = new Robot3();</span><br><span class="hljs-comment">//        Thread thread1 = new Thread(robot3);</span><br><span class="hljs-comment">//        thread1.start();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Robot2 robot2 = new Robot2();</span><br><span class="hljs-comment">//        robot2.run();</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot0</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;hello, world&quot;</span>+<span class="hljs-string">&quot;  次数: &quot;</span> + ++count + <span class="hljs-string">&quot; 线程0名 &quot;</span>+ Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span> )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;hi&quot;</span>+<span class="hljs-string">&quot;  次数: &quot;</span>+ ++count + <span class="hljs-string">&quot; 线程1名 &quot;</span>+ Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span> )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;hello, world&quot;</span>+<span class="hljs-string">&quot;  次数: &quot;</span>+ ++count + <span class="hljs-string">&quot; 线程2名 &quot;</span>+ Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span> )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;hi&quot;</span>+<span class="hljs-string">&quot;  次数: &quot;</span>+ ++count + <span class="hljs-string">&quot; 线程3名 &quot;</span>+ Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span> )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-4-Thread-和Runnable的区别"><a href="#2-4-Thread-和Runnable的区别" class="headerlink" title="2.4 Thread 和Runnable的区别"></a>2.4 Thread 和Runnable的区别</h2><ol><li>从Java的设计来看, 通过继承Thread 或者实现 Runnable 接口来创建线程本质上没有区别, 从JDK帮助文档我们可以看到类Thread类本身就实现了Runnable接口</li><li>实现Runnable 接口方式更加适合多个线程共享一个资源的情况, 并且避免了单继承的限制</li><li>建议使用Runnable接口</li></ol><h2 id="2-5-使用多线程模拟三个窗口售票"><a href="#2-5-使用多线程模拟三个窗口售票" class="headerlink" title="2.5 使用多线程模拟三个窗口售票"></a>2.5 使用多线程模拟三个窗口售票</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.threaduse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 使用多线程, 模拟三个窗口同时售票100张</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        SellTicket01 sellTicket01 = new SellTicket01();</span><br><span class="hljs-comment">//        SellTicket01 sellTicket02 = new SellTicket01();</span><br><span class="hljs-comment">//        SellTicket01 sellTicket03 = new SellTicket01();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        sellTicket01.start();</span><br><span class="hljs-comment">//        sellTicket02.start();</span><br><span class="hljs-comment">//        sellTicket03.start();</span><br><br><br>        <span class="hljs-comment">//创建的三个进程, 使用的一个对象, 还是会超卖</span><br>        <span class="hljs-type">SellTicket02</span> <span class="hljs-variable">sellTicket02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTicket02</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket02);<br>        thread.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//使用Thread方式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span>   <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//让多个线程共享ticketnum</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(ticketNum &lt;=<span class="hljs-number">0</span> )&#123;<br>                System.out.println(<span class="hljs-string">&quot;售票结束...&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;窗口 &quot;</span> + Thread.currentThread().getName()<br>                    + <span class="hljs-string">&quot; 售出一张票 剩余票数&quot;</span> + (--ticketNum) );<br><br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span>   <span class="hljs-type">int</span> <span class="hljs-variable">ticketNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//让多个线程共享ticketnum</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(ticketNum &lt;=<span class="hljs-number">0</span> )&#123;<br>                System.out.println(<span class="hljs-string">&quot;售票结束...&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;窗口 &quot;</span> + Thread.currentThread().getName()<br>                    + <span class="hljs-string">&quot; 售出一张票 剩余票数&quot;</span> + (--ticketNum) );<br><br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-6-线程终止"><a href="#2-6-线程终止" class="headerlink" title="2.6 线程终止"></a>2.6 线程终止</h2><blockquote><p>基本说明: </p><ol><li>当线程完成任务后, 会自动退出</li><li>还可以通过使用变量来控制run方法退出的方式停止线程, 即通知方式</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//需求: 启动一个线程t, 要求在main线程中去停止线程t, 编程实现</span><br><span class="hljs-keyword">package</span> com.hspedu.threadexit_;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadExit</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        t.start();<br><br>        <span class="hljs-comment">//如果希望main线程去控制t线程终止, 必须可以修改 t 的 loop</span><br>        <span class="hljs-comment">//让 t 退出 run方法, 从而终止t1 线程 ===&gt; 通知方式</span><br><br>        System.out.println(<span class="hljs-string">&quot;主线程休眠10秒&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">10000</span>);<br>        t.setLoop(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//设置一个控制变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(loop)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;T 运行中...&quot;</span>+ ++count);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoop</span><span class="hljs-params">(<span class="hljs-type">boolean</span> loop)</span> &#123;<br>        <span class="hljs-built_in">this</span>.loop = loop;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-7-线程常用方法"><a href="#2-7-线程常用方法" class="headerlink" title="2.7 线程常用方法"></a>2.7 线程常用方法</h2><ol><li>setName: 设置线程的名字, 使之与参数name相同</li><li>getName: 返回该线程的名称</li><li>start: 使该线程开始执行, Java虚拟机底层调用该线程的start0方法</li><li>run, 调用线程对象run方法</li><li>setPriority: 更改线程优先级; </li><li>getPiority:</li><li>sleep: 休眠</li><li>interrupt: 中断线程, 但没有真正的结束线程, 所以一般用于中断正在休眠线程</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//测试相关方法</span><br>        <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        t.setName(<span class="hljs-string">&quot;老韩&quot;</span>);<br>        t.setPriority(Thread.MIN_PRIORITY);<br>        t.start();<br><br><br>        <span class="hljs-comment">//System.out.println(t.getName());</span><br><br>        <span class="hljs-comment">//主线程打印5个 hi, 然后中断子线程的休眠</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;hi&quot;</span> + i);<br>        &#125;<br>        System.out.println(t.getName() + <span class="hljs-string">&quot; 的优先级为: &quot;</span> +t.getPriority() );<br>        t.interrupt();<span class="hljs-comment">//中断t线程的休眠. 注意是中断而不是终止</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;吃包子~~~~~&quot;</span> + i);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 休眠中~~~~~~~~~~~~~&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">20000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-comment">//e.printStackTrace();</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;被 interrup了&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ol start="9"><li>yeild : (静态方法) 线程的礼让. 让出cpu, 让其他线程执行, 但礼让时间不确定, 所以也不一定礼让成功</li><li>join: 线程的插队, 插队的线程一旦插队成功, 则肯定先执行完插入的线程所有的任务</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">T2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T2</span>();<br>        t2.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;主线程: &quot;</span> + i);<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot; 让给子线程&quot;</span>);<br><span class="hljs-comment">//                t2.join();//让子线程t2线程插队---一定成功</span><br><span class="hljs-comment">//                System.out.println(&quot;子线程结束&quot;);</span><br>                Thread.yield();<span class="hljs-comment">//主线程礼让  -- -不一定成功</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 休眠中~~~~~~~~~~~~~&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br><br>            &#125;<br>                System.out.println(<span class="hljs-string">&quot;JoinThread~~~~~~~~~~~~~~吃了&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//课堂练习</span><br><span class="hljs-keyword">package</span> com.hspedu.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethodExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(son);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;主线程 hi &quot;</span> + i);<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;让子线程插队&quot;</span>);<br>                thread.start();<br>                thread.join();<br>                System.out.println(<span class="hljs-string">&quot;子线程结束&quot;</span>);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;hello  &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-8-用户线程和守护线程"><a href="#2-8-用户线程和守护线程" class="headerlink" title="2.8 用户线程和守护线程"></a>2.8 用户线程和守护线程</h2><ol><li>用户线程: 也叫工作线程, 当线程的任务执行完成或通知方式结束    [主线程结束, 子线程不结束]</li><li>守护线程: 一般是为工作线程服务的, 当所有的用户线程结束, 守护线程自动结束     [主线程结束其子线程也自动结束]</li><li>常见的守护线程 : 垃圾回收机制</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">MyDaemonThread</span> <span class="hljs-variable">myDaemonThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDaemonThread</span>();<br>        <span class="hljs-comment">//如果希望主线程结束后子线程也结束,</span><br>        <span class="hljs-comment">//只需将子线程设置为守护线程, 再启动</span><br>        myDaemonThread.setDaemon(<span class="hljs-literal">true</span>);<br><br><br>        myDaemonThread.start();<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span> ; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;宝强辛苦工作&quot;</span> + i);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDaemonThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<span class="hljs-comment">// Deamon : 守护进程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;马蓉和宋喆快乐聊天&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h1 id="三-线程的生命周期"><a href="#三-线程的生命周期" class="headerlink" title="三 线程的生命周期"></a>三 线程的生命周期</h1><p>JDK 中用Thread.State 枚举表示了线程的几种状态 [官方文档六种:   NEW, RUNNABLE(ready, Running) , BLOCKED, WAITING, TIMED_WAITING, TERMINATED]</p><p><img src="https://jimsunjing.github.io/images/java/javaThread.png" alt="javaThread.png (1204×906) (jimsunjing.github.io)"></p><h1 id="四-synchronized-🚑🚒🚚🚑"><a href="#四-synchronized-🚑🚒🚚🚑" class="headerlink" title="四 synchronized 🚑🚒🚚🚑"></a>四 synchronized 🚑🚒🚚🚑</h1><h2 id="4-1-线程同步机制"><a href="#4-1-线程同步机制" class="headerlink" title="4.1 线程同步机制"></a>4.1 线程同步机制</h2><p>在多线程编程, 一些敏感数据不允许被多个线程同时访问, 此时就使用同步访问技术, 保证数据在任何时刻,, 最多有一个线程访问, 以保证数据的完整性</p><p>线程同步, 即当有一个线程在对内存进行操作时,  <strong>其他线程都不可以对这个内存地址进行操作</strong>, 直到该线程完成操作, 其他线程才能对内存地址进行操作</p><h2 id="4-2-具体同步方法"><a href="#4-2-具体同步方法" class="headerlink" title="4.2 具体同步方法"></a>4.2 具体同步方法</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1. 同步代码块</span><br><br>synchoronized(对象) &#123; <span class="hljs-comment">//得到对象的锁,才能操作同步代码</span><br><span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br><br><span class="hljs-comment">//2. synchronized 还可以放在方法声明中, 表示整个方法为同步方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">(String name)</span>&#123;<br>    <span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="五-互斥锁-🚗🚓🚕🚚🚛🚒🚑"><a href="#五-互斥锁-🚗🚓🚕🚚🚛🚒🚑" class="headerlink" title="五 互斥锁 🚗🚓🚕🚚🚛🚒🚑"></a>五 互斥锁 🚗🚓🚕🚚🚛🚒🚑</h1><h2 id="5-1-基本介绍"><a href="#5-1-基本介绍" class="headerlink" title="5.1 基本介绍"></a>5.1 基本介绍</h2><ol><li>Java语言中,引入了对象互斥锁的概念, 来保证共享数据操作的完整性</li><li>每个对象都对应于一个可称为”互斥锁” 的标记, 这个标记用来保证在任意时刻, 只能有一个线程访问该对象</li><li>关键字synchronized来与对象的互斥锁联系, 当某个对象用synchronized修饰时, 表明该对象在任意时刻只能由一个线程访问</li><li>同步的局限性: 导致程序的执行效率要降低</li><li>同步方法(非静态的) 的锁可以是this , 也可以是其他对象(要求是同一个对象)</li><li>同步方法(静态的) 的锁为当前类本身</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//实现接口方式, 使用sychronized实现线程同步</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket03</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span>   <span class="hljs-type">int</span> <span class="hljs-variable">ticketNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//让多个线程共享ticketnum</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <br>    <br>    <span class="hljs-comment">//1. public synchronized void sell()&#123;&#125;就是一个同步方法</span><br>    <span class="hljs-comment">//2. 这时锁在this对象</span><br>    <span class="hljs-comment">//3. 也可以在代码块上写 synchronized , 同步代码块, </span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    synchronized (this)&#123;//这是锁还是在this对象. 可以把this 换成obj , 这样三个线程仍然用的同一个对象锁, 仍然可以实现同步</span><br><span class="hljs-comment">    //如果静态方法使用synchronized 那么锁就加在SellTicket03.class上  synchronized(SellTicket03.class)&#123;&#125;</span><br><span class="hljs-comment">        if&#123;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        ...</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span>&#123;  <span class="hljs-comment">// 同步方法, 在同一个时刻, 只能有一个线程可以来执行sell()方法</span><br>        <span class="hljs-keyword">if</span>(ticketNum &lt;=<span class="hljs-number">0</span> )&#123;<br>            System.out.println(<span class="hljs-string">&quot;售票结束...&quot;</span>);<br>            loop = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">50</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;窗口 &quot;</span> + Thread.currentThread().getName()<br>                + <span class="hljs-string">&quot; 售出一张票 剩余票数&quot;</span> + (--ticketNum) );<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(loop)&#123;<br><br>            sell();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-2-注意事项"><a href="#5-2-注意事项" class="headerlink" title="5.2 注意事项"></a>5.2 注意事项</h2><ol><li>同步方法如果没有使用static修饰: 默认锁对象是this</li><li>如果方法使用static修饰, 默认对象: 当前类.class</li><li>实现的落地步骤:<ul><li>需要先分析上锁代码</li><li>选择同步代码块或同步方法</li><li>要求<strong>多个线程的锁对象为同一个即可</strong></li></ul></li></ol><h1 id="六-死锁"><a href="#六-死锁" class="headerlink" title="六 死锁"></a>六 死锁</h1><h2 id="6-1-基本介绍"><a href="#6-1-基本介绍" class="headerlink" title="6.1 基本介绍"></a>6.1 基本介绍</h2><p>多个线程都占用了对方的锁资源, 但不肯让, 导致了死锁, 在编程是一定要避免死锁的发生</p><h2 id="6-2-释放锁"><a href="#6-2-释放锁" class="headerlink" title="6.2 释放锁"></a>6.2 释放锁</h2><p>以下操作会释放锁: </p><ol><li>当前线程的同步方法, 同步代码块执行结束</li><li>当前线程在同步代码块, 同步方法中遇到break, return</li><li>当前线程在同步代码块, 同步方法中出现了未处理的Error 或Exception , 导致异常结束</li><li>当前线程在同步代码块, 同步方法中执行了线程对象的wait() 方法, 当前线程暂停, 并释放锁</li></ol><p>以下的操作不会释放锁:</p><ol><li>线程执行同步代码块或同步方法时, 程序调用Thread.sleep(), Thread.yield() 方法暂停当前线程的执行, 不会释放锁</li><li>线程执行同步代码块时, 其他线程调用了该线程的suspend() 方法将该线程挂起, 该线程不会释放锁</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔试题总结</title>
    <link href="/2022/03/05/%E7%AC%94%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/05/%E7%AC%94%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="哔哩哔哩2019秋招技术岗（前端、运维、后端、移动端）第一套笔试题"><a href="#哔哩哔哩2019秋招技术岗（前端、运维、后端、移动端）第一套笔试题" class="headerlink" title="哔哩哔哩2019秋招技术岗（前端、运维、后端、移动端）第一套笔试题"></a>哔哩哔哩2019秋招技术岗（前端、运维、后端、移动端）第一套笔试题</h1><p>在公司局域网上ping <a href="http://www.bilibili.com/">www.bilibili.com</a> 没有涉及到的网络协议是？（）</p><p>先使用应用层协议DNS将域名解析为目标主机的IP地址；之后使用网络层协议ARP，通过目标主机的IP地址映射为MAC地址，通过IP地址可以知道数据包最后发给谁，MAC地址可以知道数据包下一跳给谁，这样数据才能顺利到达；之后使用网络层协议ICMP来传递主机间的控制信息。由于主机间没有连接过程，是直接发送数据的，所以不使用TCP协议。</p><p><a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a> [1] 分为5类，其中A，B，C三类中各保留了3个区域作为私网地址，也就是局域网用的，私网地址不能在公网上出现，只能用在内部网路中，所有的路由器都不能发送目标地址为私网地址的数据报。</p><p><strong>私网地址是</strong>：</p><p><strong>A类地址：10.0.0.0～10.255.255.255</strong></p><p><strong>B类地址：172.16.0.0 ～172.31.255.255</strong></p><p><strong>C类地址：192.168.0.0～192.168.255.255</strong></p><p><img src="https://uploadfiles.nowcoder.com/images/20190511/414844110_1557545456799_50256D8AE72E7BBD6CCF652AF420B604" alt="img"></p><p>以下哪一项正则能正确的匹配网址: <a href="http://www.bilibili.com/video/av21061574">http://www.bilibili.com/video/av21061574</a> （）</p><figure class="highlight mercury"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mercury">/^(https?:<span class="hljs-built_in">\/</span><span class="hljs-built_in">\/</span>)?([a-zA-Z\d]+).bilibili.com<span class="hljs-built_in">\/</span>?video<span class="hljs-built_in">\/</span>av(\D&#123;<span class="hljs-number">1</span>,<span class="hljs-number">8</span>&#125;)<span class="hljs-built_in">\/</span>?$/<br>/^(http:<span class="hljs-built_in">\/</span><span class="hljs-built_in">\/</span>)?(\w+)\.bilibili\.com<span class="hljs-built_in">\/</span>?video<span class="hljs-built_in">\/</span>av(\d&#123;<span class="hljs-number">1</span>,<span class="hljs-number">8</span>&#125;)<span class="hljs-built_in">\/</span>?$/<br>/^(https?:<span class="hljs-built_in">\/</span><span class="hljs-built_in">\/</span>)?(\w+)\.bilibili\.com<span class="hljs-built_in">\/</span>?\w*$/<br>/^(http:<span class="hljs-built_in">\/</span><span class="hljs-built_in">\/</span>)?([a-zA-Z\d]+).bilibili.com<span class="hljs-built_in">\/</span>?video<span class="hljs-built_in">\/</span>av\w*<span class="hljs-built_in">\/</span>+$/<br></code></pre></div></td></tr></table></figure><p>用到的正则表达式的知识点： </p><p>​     首先，<strong>^表示匹配输入的开始</strong>，**$表示匹配输入的结束**       每个选项从前向后看，http都能够严格匹配       <strong>?表示匹配某元素0次或1次</strong>，这里四个选项都没有问题，能够匹配0次或1次字符s       接下来:严格匹配，//严格匹配两个&#x2F;&#x2F;       接着往下看，**[]表示字符集合，它用在正则表达式中表示匹配集合中的任一字符**       A D 选项中的 [a-zA-Z\d] 表示匹配一个小写字母 或者 大写字母 或者 数字       B C 选项中的 <strong>\w 表示匹配字母数字或下划线</strong>（注意这里比A D中能多匹配下划线类型）       <strong>+表示匹配某元素1次或多次</strong>，到这里四个选项都能够完美匹配字符www<br>​       <strong>.可以匹配除了换行符\n \r外的任何字符</strong>       接下来我们看选项A，bilibili com video av都严格匹配，而 <strong>\D 表示匹配一个非数字字符</strong>而非数字字符，av后的数字是无法匹配成功的，A错误       B选项，\d匹配数字，{m,n}表示最少匹配m次，最多匹配n次，/?能匹配末尾的0个或1个&#x2F;字符，B正确       C选项，*<strong>表示匹配某元素0次或多次</strong>，但 \w 并不能匹配字符 &#x2F;，C错误       D选项，前面都对，错在最后的/+至少要匹配一个&#x2F;，而原字符串最后并没有&#x2F;</p><p><strong>局域网技术</strong></p><p>令牌环网</p><p>光纤分布式数据接口FDDI（Fiber Distributed Data Interface）</p><p><strong>广域网技术</strong></p><p>综合业务数字网（ISDN）就是一种采用电路交换技术的广域网技术。</p><p>ATM，帧中继，SMDS以及X.25等都是采用包交换技术的广域网技术。</p><p>非静态方法使用数据保存于栈中，是线程私有的。</p><p>文字游戏，如果有人穿女装，那人是“<strong>先抛的人</strong>”概率多大。</p><p>00</p><p>01</p><p>10</p><p>11</p><p>0正1负，前3种是有人穿女装，其中<strong>先抛的人</strong>占2</p><p>逆波兰式即表达式树的后缀遍历，题中所给的a - (b + c) * d + e &#x2F; f则为中缀遍历，将中缀表达式转换为后缀表达式满足以下的规则：</p><ul><li><p>从左到右遍历中缀表达式的每一个数字和符号。</p></li><li><p>若是数字就输出，即成为后缀表达式的一部分。</p></li><li><p>如果是符号，则判断其与栈顶符号的优先级，是<strong>右括号</strong>或<strong>已有栈顶符号优先级（乘除优于加减）大于等于此符号</strong>则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。</p></li></ul><p><strong>特别注意的是：当栈顶元素是左括号时，除非当前的操作符是右括号，否则将不会弹出——*<em>可以理解为左括号的操作符非常的低*</em></strong></p><p><img src="https://uploadfiles.nowcoder.com/compress/mw1000/images/20190910/136086023_1568099122862_5DC12EA3F835355BF74D007890D7F43D" alt="136086023_1568099122862_5DC12EA3F835355BF74D007890D7F43D (1676×2165) (nowcoder.com)"></p><p>在TCP&#x2F;IP网络中，TCP协议工作在传输层1 ，FTP协议工作在 应用层</p><p>常见HTTP状态码 </p><p>200     ok 服务器成功处理请求</p><p>301&#x2F;302 重定向 请求的URL已经转移</p><p>304    未修改  客户缓存的资源是最新的 客户端使用缓存内容</p><p>403    Forbidden  禁止。服务器拒绝请求</p><p>404    NotFound   未找到资源</p><p>405  Method Not Allowed 不允许使用的方法</p><p>实现一个HTML语法检查器。HTML语法规则简化如下：标签必须闭合，可以由开始和结束两个标签闭合，如<div></div>，也可以自闭合，如<div>标签可以嵌套如<div><a></a></div>或者 <div><a></a></div>，但是标签不能交叉：<div><a></a></div>是不允许的标签里可以有属性如<div id="a<1"></div>属性的规则是name&#x3D;”任意非引号字符”，多属性声明之间必须有空格，属性声明不符合规则时，整段HTML都算语法错误输入文本只会出现字母a-z和&lt;&gt;”&#x3D;请用任意语言实现一个HTML语法检查器函数，有语法错误返回1，没有语法错误返回0</div></p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>坦克大战</title>
    <link href="/2022/03/05/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/"/>
    <url>/2022/03/05/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一-绘图入门"><a href="#一-绘图入门" class="headerlink" title="一  绘图入门"></a>一  绘图入门</h1><h2 id="1-1-一个入门案例"><a href="#1-1-一个入门案例" class="headerlink" title="1.1 一个入门案例"></a>1.1 一个入门案例</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.hspedu.draw_;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.ImageObserver;<br><span class="hljs-keyword">import</span> java.text.AttributedCharacterIterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 演示画圆</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">MyPanel</span> <span class="hljs-variable">mp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//定义一个面板</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle_</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle_</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-comment">//初始化面板</span><br>        mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPanel</span>();<br><br>        <span class="hljs-built_in">this</span>.add(mp);   <span class="hljs-comment">//放入窗口</span><br><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);   <span class="hljs-comment">//设置窗口大小</span><br><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class="hljs-comment">//当点击窗口,程序完全退出</span><br><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<span class="hljs-comment">// 可以显示</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//定义一个MyPannel, 继承JPannel类</span><br><span class="hljs-comment">//画图形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    以下情况paint() 将会被调用</span><br><span class="hljs-comment">    1. 窗口最小/大化</span><br><span class="hljs-comment">    2. 窗口调整</span><br><span class="hljs-comment">    3. repaint() 被调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br><br>        <span class="hljs-built_in">super</span>.paint(g);<span class="hljs-comment">//调用父类方法, 完成初始化</span><br>        <span class="hljs-comment">//画出一个圆</span><br>        g.drawOval(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">333</span>,<span class="hljs-number">333</span>);<br>        System.out.println(<span class="hljs-string">&quot;paint调用&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-2-Graphics类-常用方法"><a href="#1-2-Graphics类-常用方法" class="headerlink" title="1.2 Graphics类 常用方法"></a>1.2 Graphics类 常用方法</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br><br>    <span class="hljs-built_in">super</span>.paint(g);<span class="hljs-comment">//调用父类方法, 完成初始化</span><br>    <span class="hljs-comment">//画出一个椭圆,圆</span><br>   <span class="hljs-comment">// g.drawOval(20,30,333,333);</span><br>   <span class="hljs-comment">// System.out.println(&quot;paint调用&quot;);</span><br><br><br>    <span class="hljs-comment">//绘制不同的图像</span><br>    <span class="hljs-comment">//1. 画直线</span><br>    <span class="hljs-comment">//g.drawLine(10,10,100,100);</span><br>    <span class="hljs-comment">//2. 矩形边框</span><br>    <span class="hljs-comment">//g.drawRect(10,10,90,90);</span><br>    <span class="hljs-comment">//3. 填充矩形</span><br>   <span class="hljs-comment">// g.setColor(Color.blue);//设置画笔颜色</span><br>    <span class="hljs-comment">//g.fillRect(110,110,200,200);//填充矩形</span><br>  <span class="hljs-comment">//  g.fillArc(10,10,100,100,0,45);</span><br>    <span class="hljs-comment">//放图片</span><br>    <span class="hljs-comment">//1. 获取图片资源   out/production/chapter16/img.png</span><br>    <span class="hljs-type">Image</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> Toolkit.getDefaultToolkit().getImage(Panel.class.getResource(<span class="hljs-string">&quot;/img.png&quot;</span>));<br>   <span class="hljs-comment">// g.drawImage(image,10,10,698,1060,this);</span><br>    <span class="hljs-comment">//写字</span><br>    g.setColor(Color.red);<br>    g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;隶书&quot;</span>,Font.BOLD,<span class="hljs-number">50</span>));<span class="hljs-comment">//颜色,粗体,大小</span><br>    g.drawString(<span class="hljs-string">&quot;四川你好&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-3-绘制坦克"><a href="#1-3-绘制坦克" class="headerlink" title="1.3 绘制坦克"></a>1.3 绘制坦克</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//坦克类</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tank</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<span class="hljs-comment">//坦克横坐标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y; <span class="hljs-comment">//坦克纵坐标</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-comment">//MyPanel类</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> &#123;<br>    <span class="hljs-comment">// 定义我的坦克</span><br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyPanel</span><span class="hljs-params">()</span>&#123;<br>        hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br>        g.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">750</span>);<span class="hljs-comment">//填充矩形, 默认黑色</span><br><br>        <span class="hljs-comment">//画坦克 - 封装到方法</span><br>        drawTank(hero.getX(),hero.getY(),g,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>        drawTank(hero.getX() + <span class="hljs-number">60</span>,hero.getY(),g,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        drawTank(hero.getX() + <span class="hljs-number">120</span>,hero.getY(),g,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>        drawTank(hero.getX() + <span class="hljs-number">180</span>,hero.getY(),g,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>        drawTank(hero.getX() + <span class="hljs-number">240</span>,hero.getY(),g,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 编写方法, 画出坦克</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x  tank左上角x坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y  tank左上角y坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> g  画笔</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> direct   坦克方向 上下左右</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type    类型 (颜色 敌我)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawTank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> direct, <span class="hljs-type">int</span> type)</span>&#123;<br>        <span class="hljs-keyword">switch</span>(type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// 我方坦克</span><br>                g.setColor(Color.cyan);<span class="hljs-comment">//</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//敌方坦克1</span><br>                g.setColor(Color.yellow);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//敌方坦克2</span><br>                g.setColor(Color.red);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//敌方坦克3</span><br>                g.setColor(Color.blue);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//根据方向绘制坦克</span><br>        <span class="hljs-keyword">switch</span> (direct)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                g.fill3DRect(x,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//左边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">30</span>,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//右边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//中间方体</span><br>                g.fillOval( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//圆盖子</span><br>                g.drawLine(x+<span class="hljs-number">20</span>,y+<span class="hljs-number">30</span>,x+<span class="hljs-number">20</span>,y);<span class="hljs-comment">//炮筒</span><br><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;暂时没有处理&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br><br>&#125;<br><span class="hljs-comment">////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">//Hero类</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 自己的坦克</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Tank</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hero</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">super</span>(x, y);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">//主类</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XFTankGame01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-comment">//定义一个MyPanel</span><br>    MyPanel mp;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">XFTankGame01</span> <span class="hljs-variable">xfTankGame01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XFTankGame01</span>();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">XFTankGame01</span><span class="hljs-params">()</span>&#123;<br>        mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPanel</span>();<br>        <span class="hljs-built_in">this</span>.add(mp);<span class="hljs-comment">//把我们的面板(就是绘图区域</span><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">1000</span>,<span class="hljs-number">750</span>);<span class="hljs-comment">//设置窗口大小</span><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="二-Java事件处理"><a href="#二-Java事件处理" class="headerlink" title="二  Java事件处理"></a>二  Java事件处理</h1><p>Java事件处理是采取”委派事件模型”. 当事件发生时, 产生事件的对象, 会把此” 信息 “  传递给” 事件监听者 “ 处理, 这里所说的 “ 信息 “  实际上就是 java.awt.event 事件类库里某个类所创建的对象, 把它称为” 事件的对象 “</p><p><strong>事件源:</strong> 事件源是一个产生事件的对象, 比如按钮, 窗口等</p><p><strong>事件:</strong> 事件就是承载事件源状态改变时的对象, 比如当键盘事件, 鼠标事件, 窗口事件等等, 会产生一个事件对象, 该对象保存着当前事件很多信息, 比如KeyEvent对象有含有被按下键的Code值, java.awt.event 包 和 javax.swing.event 包中定义了各种事件类型</p><h2 id="2-1-小球移动案例"><a href="#2-1-小球移动案例" class="headerlink" title="2.1 小球移动案例"></a>2.1 小球移动案例</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 小球移动案例</span><br><span class="hljs-keyword">package</span> com.hspedu.event_;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.KeyListener;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 演示小球它通过键盘的操作上下左右移动  =====&gt; 讲解Java事件控制</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BallMove</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-type">Mypanel</span> <span class="hljs-variable">mp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BallMove</span> <span class="hljs-variable">ballMove</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BallMove</span>();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BallMove</span><span class="hljs-params">()</span>&#123;<br>        mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mypanel</span>();<br>        <span class="hljs-built_in">this</span>.add(mp);<br>        <span class="hljs-built_in">this</span>.addKeyListener(mp);<span class="hljs-comment">// 监听键盘事件</span><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">400</span>,<span class="hljs-number">300</span>);<br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//KeyListener 是监听器, 监听键盘事件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mypanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span> &#123;<br><br>    <span class="hljs-comment">//为了让小球可以移动, 把它左上角的坐标设置为变量(x, y)</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//定义面板</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span>&#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br>        g.fillOval(x,y,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<span class="hljs-comment">//有字符输出时, 该方法就会触发</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<span class="hljs-comment">//当某个键按下, 该方法会触发</span><br>        <span class="hljs-comment">//根据不同键来处理小球移动</span><br>       <span class="hljs-comment">// System.out.println((char)e.getKeyChar());</span><br><br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_DOWN)&#123;<br>            <span class="hljs-comment">//向下的箭头</span><br>            y += <span class="hljs-number">5</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_UP)&#123;<br>            y -= <span class="hljs-number">5</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_LEFT)&#123;<br>            x -= <span class="hljs-number">5</span> ;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_RIGHT)&#123;<br>            x += <span class="hljs-number">5</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//让面板重绘</span><br>        <span class="hljs-built_in">this</span>.repaint();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<span class="hljs-comment">//当某个键松开, 该方法会触发</span><br><br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="2-2-让坦克动起来"><a href="#2-2-让坦克动起来" class="headerlink" title="2.2 让坦克动起来"></a>2.2 让坦克动起来</h2><p>添加键盘监听</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span> &#123;<br>    <br>     <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_DOWN)&#123;<br>            <span class="hljs-comment">//向下的箭头</span><br>            hero.setDirect(<span class="hljs-number">2</span>);<br>            hero.moveDown();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_UP)&#123;<br>            hero.setDirect(<span class="hljs-number">0</span>);<br>            hero.moveUP();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_LEFT)&#123;<br>            hero.setDirect(<span class="hljs-number">3</span>);<br>            hero.moveLeft();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_RIGHT)&#123;<br>            hero.moveRight();<br>            hero.setDirect(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.repaint();<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="三-线程"><a href="#三-线程" class="headerlink" title="三 线程"></a>三 线程</h1><h2 id="3-1-我方发射子弹"><a href="#3-1-我方发射子弹" class="headerlink" title="3.1 我方发射子弹"></a>3.1 我方发射子弹</h2><p>问题: 如何实现当用户按下J键, 我们的坦克就发射一颗子弹?</p><ol><li>当发射一颗子弹后, 就相当于启动了一个线程</li><li>Hero 有子弹的对象, 当按下J键时, 我们就启动了一个发射行为(线程) , 让子弹不停地移动, 形成一个射击效果</li><li>我们的MyPanel需要不停地重绘子弹, 才能出现该效果</li><li>当子弹移动到面板上的边界时, 就应该销毁(把启动的子弹线程销毁)</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.tankgame3;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 射击子弹</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shot</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">//记录子弹坐标 方向  速度</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-type">int</span> direct;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//记录子弹是否存在</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Shot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> direct)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>        <span class="hljs-built_in">this</span>.direct = direct;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//设计行为</span><br>        <span class="hljs-comment">//线程休眠</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-comment">//根据方向改变x,y</span><br>            <span class="hljs-keyword">switch</span> (direct) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    y -= speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    x += speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    y += speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    x -= speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;子弹 x = &quot;</span> + x + <span class="hljs-string">&quot; y = &quot;</span> + y);<br><br><br>            <span class="hljs-comment">//当子弹到边界销毁</span><br>            <span class="hljs-keyword">if</span>(!(x&gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt;= <span class="hljs-number">1000</span> &amp;&amp; y&gt;= <span class="hljs-number">0</span>&amp;&amp;y&lt;=<span class="hljs-number">750</span>))&#123;<br>                isLive = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br><br>        &#125;<br><br><br>    &#125;<span class="hljs-comment">//run</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//MyPanel</span><br><br><span class="hljs-keyword">package</span> com.hspedu.tankgame3;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.KeyListener;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span>,Runnable &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">enemyTankSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    Vector&lt;Enemy&gt; enemies = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<span class="hljs-comment">//敌人坦克集合</span><br><br><br><br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 定义我的坦克</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyPanel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; enemyTankSize; i++) &#123;<br>            enemies.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Enemy</span>(<span class="hljs-number">100</span>*(i+<span class="hljs-number">1</span>), <span class="hljs-number">0</span>));<br>        &#125;<br><br><br>        hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>        hero.setSpeed(<span class="hljs-number">30</span>);<br><br>    &#125;<br><br><br><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br>        g.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">750</span>);<span class="hljs-comment">//填充矩形, 默认黑色</span><br><br>        <span class="hljs-comment">//画坦克 - 封装到方法</span><br>        drawTank(hero.getX(),hero.getY(),g,hero.getDirect(),<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(hero.shot != <span class="hljs-literal">null</span> &amp;&amp; hero.shot.isLive == <span class="hljs-literal">true</span>)&#123;<br>            drawBullet(hero.shot.getX(),hero.shot.getY(),g);<br>        &#125;<br><br><br><br><br>        <span class="hljs-comment">//绘制敌方坦克</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; enemyTankSize; i++) &#123;<br>            <span class="hljs-type">Enemy</span> <span class="hljs-variable">enemy</span> <span class="hljs-operator">=</span> enemies.get(i);<br>            enemy.setDirect(<span class="hljs-number">2</span>);<br>            drawTank(enemy.getX(),enemy.getY(),g,enemy.getDirect(),<span class="hljs-number">0</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 编写方法, 画出坦克</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x  tank左上角x坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y  tank左上角y坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> g  画笔</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> direct   坦克方向 上下左右</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type    类型 (颜色 敌我)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawTank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> direct, <span class="hljs-type">int</span> type)</span>&#123;<br>        <span class="hljs-keyword">switch</span>(type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// 我方坦克</span><br><br>                g.setColor(Color.cyan);<span class="hljs-comment">//</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//敌方坦克1</span><br>                g.setColor(Color.yellow);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//敌方坦克2</span><br>                g.setColor(Color.red);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//敌方坦克3</span><br>                g.setColor(Color.blue);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//根据方向绘制坦克(0,1,2,3)</span><br>        <span class="hljs-keyword">switch</span> (direct)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//向上</span><br>                g.fill3DRect(x,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//左边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">30</span>,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//右边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//中间方体</span><br>                g.fillOval( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//圆盖子</span><br>                g.drawLine(x+<span class="hljs-number">20</span>,y+<span class="hljs-number">30</span>,x+<span class="hljs-number">20</span>,y);<span class="hljs-comment">//炮筒</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//向右</span><br>                g.fill3DRect(x,y,<span class="hljs-number">60</span>,<span class="hljs-number">10</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//上轮子</span><br>                g.fill3DRect( x ,y+ <span class="hljs-number">30</span>,<span class="hljs-number">60</span>,<span class="hljs-number">10</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//下边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">10</span>,<span class="hljs-number">40</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//中间方体</span><br>                g.fillOval( x +<span class="hljs-number">20</span> ,y + <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//圆盖子</span><br>                g.drawLine(x+<span class="hljs-number">30</span>,y+<span class="hljs-number">20</span>,x+<span class="hljs-number">60</span>,y + <span class="hljs-number">20</span>);<span class="hljs-comment">//炮筒</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//向下</span><br>                g.fill3DRect(x,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//左边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">30</span>,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//右边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//中间方体</span><br>                g.fillOval( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//圆盖子</span><br>                g.drawLine(x+<span class="hljs-number">20</span>,y+<span class="hljs-number">60</span>,x+<span class="hljs-number">20</span>,y+<span class="hljs-number">30</span>);<span class="hljs-comment">//炮筒</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//向左</span><br>                g.fill3DRect(x,y,<span class="hljs-number">60</span>,<span class="hljs-number">10</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//上轮子</span><br>                g.fill3DRect( x ,y+ <span class="hljs-number">30</span>,<span class="hljs-number">60</span>,<span class="hljs-number">10</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//下边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">10</span>,<span class="hljs-number">40</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//中间方体</span><br>                g.fillOval( x +<span class="hljs-number">20</span> ,y + <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//圆盖子</span><br>                g.drawLine(x,y+<span class="hljs-number">20</span>,x+<span class="hljs-number">30</span>,y + <span class="hljs-number">20</span>);<span class="hljs-comment">//炮筒</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;暂时没有处理&quot;</span>);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawBullet</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y,Graphics g)</span>&#123;<br>        g.fillOval(x-<span class="hljs-number">2</span>,y,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br>      <span class="hljs-comment">//  this.repaint();</span><br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_DOWN || e.getKeyCode() == KeyEvent.VK_S) &#123;<br>            <span class="hljs-comment">//向下的箭头</span><br>            hero.setDirect(<span class="hljs-number">2</span>);<br>            hero.moveDown();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_W) &#123;<br>            hero.setDirect(<span class="hljs-number">0</span>);<br>            hero.moveUP();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_LEFT || e.getKeyCode() == KeyEvent.VK_A) &#123;<br>            hero.setDirect(<span class="hljs-number">3</span>);<br>            hero.moveLeft();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_RIGHT || e.getKeyCode() == KeyEvent.VK_D) &#123;<br>            hero.moveRight();<br>            hero.setDirect(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">//如果用户按下J 键 就开启射击线程</span><br>        <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_J) &#123;<br>            hero.shotEnemyTank();<br>        &#125;<br><br>     <span class="hljs-comment">//   this.repaint();</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-built_in">this</span>.repaint();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//Hero</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame3;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 自己的坦克</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Tank</span> &#123;<br>    <span class="hljs-comment">//定义一个Shot对象</span><br>    <span class="hljs-type">Shot</span> <span class="hljs-variable">shot</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hero</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">super</span>(x, y);<br>    &#125;<br><br>    <span class="hljs-comment">//设计一个射击方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shotEnemyTank</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建shot, 根据Hero 对象的当前位置创建Shot</span><br>        <span class="hljs-keyword">switch</span> (getDirect())&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                shot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shot</span>(getX()+<span class="hljs-number">20</span>,getY(),<span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                shot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shot</span>(getX() + <span class="hljs-number">60</span>,getY() +<span class="hljs-number">20</span> ,<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                shot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shot</span>(getX()+<span class="hljs-number">20</span>,getY()+<span class="hljs-number">60</span>,<span class="hljs-number">2</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                shot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shot</span>(getX(),getY() + <span class="hljs-number">20</span>,<span class="hljs-number">3</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//启动Shot线程</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(shot).start();<br>    &#125;<span class="hljs-comment">//shotEnemyTank()</span><br><br><br>&#125;<br><span class="hljs-comment">// Mian</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame3;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XFTankGame03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-comment">//定义一个MyPanel</span><br>    MyPanel mp;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">XFTankGame03</span> <span class="hljs-variable">xfTankGame01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XFTankGame03</span>();<br><br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">XFTankGame03</span><span class="hljs-params">()</span>&#123;<br>        mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPanel</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mp).start();<span class="hljs-comment">//启动 MyPanel 线程</span><br>        <span class="hljs-built_in">this</span>.add(mp);<span class="hljs-comment">//把我们的面板(就是绘图区域</span><br><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">1000</span>,<span class="hljs-number">750</span>);<span class="hljs-comment">//设置窗口大小</span><br><br>        <span class="hljs-built_in">this</span>.addKeyListener(mp);<span class="hljs-comment">//监听对象</span><br><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="3-2-多线程-坦克大战-4-0"><a href="#3-2-多线程-坦克大战-4-0" class="headerlink" title="3.2 多线程 - 坦克大战 4.0"></a>3.2 多线程 - 坦克大战 4.0</h2><p>增加功能: </p><ol><li>让敌人坦克也能够发射子弹 (可以有多个子弹)<ul><li>在敌人坦克类, 使用Vector保存多个Shot</li><li>当每创建敌人坦克时, 就给其初始化一个Shot对象, 同时启动它</li><li>当敌人坦克子弹碰到边界销毁</li></ul></li><li>当我方坦克击中敌人坦克时, 敌人坦克消失</li><li>让敌人的坦克也可以自由随机的上下左右移动</li><li>控制我方坦克和敌人坦克在规定的范围移动</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java项目</category>
      
      <category>坦克大战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>坦克大战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>泛型</title>
    <link href="/2022/03/05/%E6%B3%9B%E5%9E%8B/"/>
    <url>/2022/03/05/%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-泛型引入"><a href="#1-泛型引入" class="headerlink" title="1 泛型引入"></a>1 泛型引入</h1><ul><li>先看一个需求<ol><li>请编写一个程序, 在ArrayList中, 添加3个Dog对象</li><li>Dog对象含有name 和age, 并输出 name 和 age </li><li>使用传统方法</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericIntroduction</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小黄&quot;</span>, <span class="hljs-number">3</span>));<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小白&quot;</span>, <span class="hljs-number">5</span>));<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小黑&quot;</span>, <span class="hljs-number">4</span>));<br>        <span class="hljs-comment">//加入不小心加入了一只 Cat 类</span><br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;小黑&quot;</span>, <span class="hljs-number">4</span>));<span class="hljs-comment">//后续转型会抛出异常</span><br>        <br>        <span class="hljs-keyword">for</span> (Object o :arrayList) &#123;<br>            <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog)o;<br><br>            System.out.println(dog.getName() +<span class="hljs-string">&quot;  &quot;</span>+  dog.getAge());<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>&#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&quot;</span> + name +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>使用传统方法的问题分析</li></ul><ol><li>不能对加入到集合Array LIst 中的数据类型进行约束(不安全)</li><li>遍历的时候, 需要进行类型转换, 如果集合中的数据量较大, 对效率有影响</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">      <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; &#123;&#125;<span class="hljs-comment">//E称为泛型, 那么Dog---&gt; E</span><br>ArrayList&lt;Dog&gt; dogs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Dog&gt;();<span class="hljs-comment">// 表示这个集合只能存放Dog类及其子类</span><br>      <span class="hljs-comment">//如果添加其他类型就会报错</span><br>      <span class="hljs-comment">//遍历的时候可以直接取出Dog类, 而不是Object</span><br><br></code></pre></div></td></tr></table></figure><h2 id="泛型介绍"><a href="#泛型介绍" class="headerlink" title="泛型介绍"></a>泛型介绍</h2><p>一种广泛的类型.    表示一种数据类型的数据类型</p><ol><li>泛型又称参数化类型, 是jdk5.0出现的新特性, 解决数据类型的安全性问题</li><li>在类声明或实例化时只要指定好需要的具体的类型即可</li><li>Java泛型可以保证如果程序在编译时没有警告, 运行时就不会产生类型转换异常. 同时代码更加简洁, 健壮</li><li>泛型的作用是: 可以在类声明时通过一个标识表示类中某个属性的类型, 或者是某个方法的返回值的类型, 或者是参数类型.</li></ol><h1 id="2-泛型语法"><a href="#2-泛型语法" class="headerlink" title="2 泛型语法"></a>2 泛型语法</h1><h2 id="2-1-泛型的声明"><a href="#2-1-泛型的声明" class="headerlink" title="2.1 泛型的声明"></a>2.1 泛型的声明</h2><p><code>interface 接口&lt;T&gt; &#123;&#125;</code> 和 <code>class 类&lt;K,V&gt; &#123; &#125;</code>&#x2F;&#x2F;比如List 和 ArrayList</p><p>说明: </p><div class="hljs code-wrapper"><pre><code class="hljs">1. 其中, T, K, V 不代表值, 而是表示类型1. 任意字母都可以. 常用T表示, 是Type的缩写</code></pre></div><h2 id="2-2-泛型的实例化"><a href="#2-2-泛型的实例化" class="headerlink" title="2.2 泛型的实例化"></a>2.2 泛型的实例化</h2><p>要在类名后面指定类型参数的值(类型) 如：　</p><ol><li>List<String> strList &#x3D; new ArrayList<String>( )</String></String></li><li>Iterator<Customer> iterator &#x3D; customers.iteretor();</Customer></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">HashMap&lt;String, Student&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">3</span>));<br>map.put(<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">30</span>));<br>map.put(<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">80</span>));<br>map.put(<span class="hljs-string">&quot;诸葛亮&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;诸葛亮&quot;</span>, <span class="hljs-number">90</span>));<br><br>Set&lt;String&gt; set1 = map.keySet();<br>Set&lt;Map.Entry&lt;String, Student&gt;&gt; entries = map.entrySet();<br>Iterator&lt;String&gt; iterator1 = set1.iterator();<br><span class="hljs-keyword">while</span> (iterator1.hasNext()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span>  iterator1.next();<br>    System.out.println(<span class="hljs-string">&quot;HashMap = &quot;</span>+ next);<br>&#125;<br><span class="hljs-keyword">for</span> (String  s : set1) &#123;<br>    System.out.println(<span class="hljs-string">&quot;HashMap - I = &quot;</span> + map.get(s).age + map.get(s).name);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-3-泛型的注意事项和细节"><a href="#2-3-泛型的注意事项和细节" class="headerlink" title="2.3 泛型的注意事项和细节"></a>2.3 泛型的注意事项和细节</h2><ol><li><p>interface List<T> {} , public class HashSet<E>{ }…等</E></T></p><p>T, E 只能是引用类型.         不能是基本数据类型</p></li><li><p>在指定泛型具体类型后, 可以传入该类型或其子类类型    </p></li><li><p>如果是  List list &#x3D; new ArrayList();   则默认给其泛型为 E&#x3D; Object</p></li><li><p><strong>简化形式    编译器会自动进行类型推断         (推荐写法)</strong></p><p>List<String>  list &#x3D; new List&lt;&gt;();  &#x2F;&#x2F; 后面就不用再写String</String></p></li></ol><h1 id="3-自定义泛型💥"><a href="#3-自定义泛型💥" class="headerlink" title="3 自定义泛型💥"></a>3 自定义泛型💥</h1><p>基本语法:  interface List&lt;T, R, Y…&gt; {} , public class 类名&lt;E, T, V…&gt;{ }</p><p><strong>注意细节</strong></p><ol><li>普通成员可以使用泛型(属性, 方法)</li><li>使用泛型的数组, 不能初始化</li><li>静态方法中不能使用类的泛型</li><li>泛型的类型, 是在创建对象时确定的(因为创建对象时, 需要指定确定类型)</li><li>如果在创建对象时, 没有指定类型, 默认为Object</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//普通类中定义泛型方法 . 在泛型类中也可以这样创建</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> &lt;T, R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(T t, T r)</span>&#123;<span class="hljs-comment">//泛型方法    </span><br><br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//使用method</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>a.method(<span class="hljs-string">&quot;你好&quot;</span>, <span class="hljs-number">1234</span>);<span class="hljs-comment">/// 编译器自动识别是什么类型, 基本类型会自动装箱</span><br><br><br><span class="hljs-comment">//注意区分泛型方法 与 使用泛型的方法</span><br><span class="hljs-comment">// 泛型方法  使用了&lt;T, R...&gt; 修饰方法</span><br><span class="hljs-comment">//使用泛型方法   使用了是类声明的泛型</span><br><br></code></pre></div></td></tr></table></figure><h1 id="4-泛型继承和通配符"><a href="#4-泛型继承和通配符" class="headerlink" title="4 泛型继承和通配符"></a>4 泛型继承和通配符</h1><ol><li><p>泛型不具备继承性</p><p>LIst<Object> list &#x3D; new ArrayList<String>();&#x2F;&#x2F; 这样的写法是错误的</String></Object></p></li><li><?>: 支持任意泛型类</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Car&lt;?,?&gt; car = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>&lt;String,Integer&gt;();<br>Car&lt;?,?&gt; car1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>&lt;Object,Integer&gt;();<br></code></pre></div></td></tr></table></figure><ol start="3"><li>&lt; ? extends A&gt; : 支持A类及A类的子类, 规定了泛型的上限</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Car&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AA</span> , ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BB</span>&gt; car2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>&lt;BB, CC&gt;();<br></code></pre></div></td></tr></table></figure><ol start="4"><li>&lt; ? super A&gt; : 支持A类以及A的父类, 不限制直接父类. 规范了泛型的下限</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Car&lt;? <span class="hljs-built_in">super</span> BB, ? <span class="hljs-built_in">super</span> CC&gt; car3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>&lt;AA , CC&gt;();<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>泛型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法</title>
    <link href="/2022/02/28/%E7%AE%97%E6%B3%95/"/>
    <url>/2022/02/28/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>由<a href="https://b23.tv/Eu6nmnt">B站视频</a>整理</p></blockquote><p>[TOC]</p><h1 id="一-认识时间复杂度和简单排序算法"><a href="#一-认识时间复杂度和简单排序算法" class="headerlink" title="一 认识时间复杂度和简单排序算法"></a>一 认识时间复杂度和简单排序算法</h1><p>执行算法所需要的计算工作量(最坏情况下)</p><h2 id="1-1-冒泡排序"><a href="#1-1-冒泡排序" class="headerlink" title="1.1 冒泡排序"></a>1.1 冒泡排序</h2><p>O(N^2)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">null</span> || arr.length&lt;<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;arr.length-<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;j&lt;arr.length-i-<span class="hljs-number">1</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>                temp = arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-2-选择排序"><a href="#1-2-选择排序" class="headerlink" title="1.2 选择排序"></a>1.2 选择排序</h2><p>O(N^2)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">null</span> || arr.length &lt;<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> temp;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;arr.length -<span class="hljs-number">1</span>;i++)&#123;<span class="hljs-comment">//i ~ N-1</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>;j &lt; arr.length;j++)&#123;<br>            <span class="hljs-comment">//i~ N - 1 上寻找最小值下标</span><br>            minIndex = arr[j] &lt; arr[minIndex]? j : minIndex;<br>        &#125;<br>        temp = arr[i];<br>        arr[i] = arr[minIndex];<br>        arr[minInde] = temp;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-3-异或运算"><a href="#1-3-异或运算" class="headerlink" title="1.3 异或运算"></a>1.3 异或运算</h2><p>0^0&#x3D;0，1^0&#x3D;1，0^1&#x3D;1，1^1&#x3D;0</p><p>a^b^c &#x3D; a^c^b &#x3D; b^a^c &#x3D; b^c^a &#x3D; c^a^b &#x3D; c^b^a</p><p>a^a &#x3D;0; a^b^a &#x3D; b……</p><h2 id="1-4-插入排序"><a href="#1-4-插入排序" class="headerlink" title="1.4 插入排序"></a>1.4 插入排序</h2><p>时间复杂度和数据状况有关 O(N) ~ O(N^2)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">null</span> || arr.length&lt;<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;<span class="hljs-comment">//第0个位置先当作有序,把后面的数往前插</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i-<span class="hljs-number">1</span>;j&gt;=<span class="hljs-number">0</span> &amp;&amp; arr[j] &gt;arr[j+<span class="hljs-number">1</span>];j--)&#123;<span class="hljs-comment">//从i不断往前看, 把大的换到后面, arr[j]&gt;arr[j+1] 表示i前面元素已经有序</span><br>            temp = arr[j];<br>            arr[j] = arr[j+<span class="hljs-number">1</span>];<br>            arr[j+<span class="hljs-number">1</span>] = temp;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="二-认识O-nlogn-的排序"><a href="#二-认识O-nlogn-的排序" class="headerlink" title="二 认识O(nlogn)的排序"></a>二 认识O(nlogn)的排序</h1><h2 id="2-1arr-L-R-范围求最大值"><a href="#2-1arr-L-R-范围求最大值" class="headerlink" title="2.1arr[L..R] 范围求最大值"></a>2.1arr[L..R] 范围求最大值</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span>&#123;<br>    <span class="hljs-keyword">if</span>(L==R)&#123;<br>        <span class="hljs-keyword">return</span> arr[L];<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> L + ((R-L) &gt;&gt; <span class="hljs-number">1</span>);  <span class="hljs-comment">//中点</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">leftMax</span> <span class="hljs-operator">=</span> process(arr, L, mid);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rightMax</span> <span class="hljs-operator">=</span> process(arr,mid, R);<br>    <span class="hljs-keyword">return</span> Math.max(leftMax, rightMax);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-2-arr-L-R-范围排序-归并排序"><a href="#2-2-arr-L-R-范围排序-归并排序" class="headerlink" title="2.2 arr[L~R] 范围排序, 归并排序"></a>2.2 arr[L~R] 范围排序, 归并排序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span>&#123;<br>    <span class="hljs-keyword">if</span>(L == R)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> L + ((R - L) &gt;&gt; <span class="hljs-number">1</span>);<br>    process(arr, L, mid);<br>    process(arr, mid, R);<br>    merge(arr, L, mid, R);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> M, <span class="hljs-type">int</span> R)</span>&#123;<br>    <span class="hljs-type">int</span>[] help = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[R - L + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> L;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> M +<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(p1 &lt;= M &amp;&amp; p2 &lt;= R)&#123;<br>        <span class="hljs-comment">//将元素从小到大放到help</span><br>        help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];<br>    &#125;<br>    <span class="hljs-comment">//处理剩下的元素</span><br>    <span class="hljs-keyword">while</span>(p1 &lt;= M)&#123;<br>        help[i++] = arr[p1++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(p2 &lt;= R)&#123;<br>        hep[i++] = arr[p2++];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; help.length; i++)&#123;<br>        arr[L+i] = help[i];<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>时间复杂度nlogn, 空间复杂度n</p><h2 id><a href="#" class="headerlink" title></a></h2><h1 id="1-反转链表"><a href="#1-反转链表" class="headerlink" title="1. 反转链表"></a>1. 反转链表</h1><p>反转一个单链表</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span><br>输出: <span class="hljs-number">5</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>&#123;<br>        <span class="hljs-type">int</span> val;<br>        ListNode next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ListNode</span><span class="hljs-params">(<span class="hljs-type">int</span> val, ListNode next)</span>&#123;<br>            <span class="hljs-built_in">this</span>.val = val;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> != <span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span> val + <span class="hljs-string">&quot;-&gt;&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> + <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 个人求解:</span><br><br><span class="hljs-comment">//解法: 需要三个工作节点, pre指向输出链的节点 curr指向需要从输入链表摘下的节点, next 指向pre-&gt;next指向的节点.</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ListNode <span class="hljs-title function_">reverse</span><span class="hljs-params">(ListNode head)</span>&#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, curr = head,next = head.next;<br>        <span class="hljs-keyword">while</span>(next != <span class="hljs-literal">null</span>)&#123;<br>            curr.next = pre;<br>            pre = curr;<br>            curr = next;<br>            next = next.next;<br><br>        &#125;<br>        curr.next = pre;<br>        <span class="hljs-keyword">return</span> curr;<br>    &#125;<br><br><br><span class="hljs-comment">//答案: 遍历</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ListNode <span class="hljs-title function_">reverse2</span><span class="hljs-params">(ListNode head)</span>&#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>,next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span>(curr != <span class="hljs-literal">null</span>)&#123;<br>            next = curr.next;<br>            curr.next = pre;<br>            pre = curr;<br>            curr = next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br><br><br><span class="hljs-comment">//答案: 递归</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ListNode <span class="hljs-title function_">reverse3</span><span class="hljs-params">(ListNode head)</span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span> || head.next ==<span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">new_head</span> <span class="hljs-operator">=</span> reverse(head.next);<br>        head.next.next = head; <span class="hljs-comment">//(节点--&gt;下一个节点).next</span><br>        head.next =<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> new_head;<br><br>    &#125;<br></code></pre></div></td></tr></table></figure><h1 id="2-素数个数统计"><a href="#2-素数个数统计" class="headerlink" title="2. 素数个数统计"></a>2. 素数个数统计</h1><p>统计n以内的素数个数</p><p>素数: 只能被1和自身整除的自然数  0,1 除外</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//自己解法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count0</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n ; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j&lt; i; j++)&#123;<br>                <span class="hljs-keyword">if</span>((i % j ) == <span class="hljs-number">0</span>) &#123;<br>                    count++;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n-count - <span class="hljs-number">1</span>;<br>    &#125;<br><br><span class="hljs-comment">//答案一: 暴力解</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count1</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i * i &lt;= n; i++) &#123;<span class="hljs-comment">//对于不是素数的只用判断一半即可//例如 12 = 6*2, 12 = 2*6</span><br>            count += isPrime(i) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;  <span class="hljs-comment">//分界点 √n, 根号将n分为两个区域√n, 减少的是结果为true时的比较次数</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(n % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><span class="hljs-comment">//答案: 埃筛法</span><br><span class="hljs-comment">//将素数和合数设置不同的标记, 从而减少比较的次数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count2</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-type">boolean</span>[] isPrime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n]; <span class="hljs-comment">//初始全为false, 假定false代表素数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;n ; i++) &#123;<br>            <span class="hljs-keyword">if</span>(!isPrime[i])&#123;<span class="hljs-comment">//为合数时会直接跳过</span><br>                count ++;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i*i;!isPrime[j] &amp;&amp; j&lt;n; j+=i) &#123; <span class="hljs-comment">// j = 2*i ==优化==&gt;j = i * i</span><br>                    isPrime[j] = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 将合数位置为true</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br><br><br></code></pre></div></td></tr></table></figure><h1 id="3-删除排序数组中的重复项"><a href="#3-删除排序数组中的重复项" class="headerlink" title="3. 删除排序数组中的重复项"></a>3. 删除排序数组中的重复项</h1><p>一个有序数组nums, 原地删除重复出现的元素, 使每一个元素只出现一次, 返回删除后数组的新长度.</p><p>不能使用额外的数组空间, 必须在原地修改输入数组并在使用O(1) 额外的空间的条件下完成</p><p>考察: 双指针</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//自己求解</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dure</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><br>        <span class="hljs-type">int</span> i, j;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, j = <span class="hljs-number">1</span>; j &lt; arr.length; ) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] == arr[j]) &#123;<br>                j++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; j) &#123;<br>                arr[i++] = arr[j++];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                i++;<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i ;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//答案</span><br><br><span class="hljs-keyword">public</span> satic <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-keyword">if</span>(arr.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j&lt; arr.length; j++)&#123;<br><span class="hljs-keyword">if</span>(arr[j] != arr[i])&#123;<br>            arr[++i] = arr[j]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="4-寻找数组的中心下标"><a href="#4-寻找数组的中心下标" class="headerlink" title="4. 寻找数组的中心下标"></a>4. 寻找数组的中心下标</h1><p>给定一个整数数组nums, 请编写一个能返回数组” 中心下标 “ 的方法</p><p>中心下标是数组的一个下标, 其左侧所有元素相加的和等于右侧所有元素相加的和. </p><p>如果数组不存在中心下标, 返回-1, 如果数组有多个中心下标, 应该返回最靠近左边的那一个.</p><p> 注意: 中心下标可能出现在数组的两端</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//答案</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">privotIndex</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> Arrays.stream(nums).sum();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>        total += nums[i];<br>        <span class="hljs-keyword">if</span>(total == sum)&#123;<span class="hljs-comment">//下面sum 有减</span><br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        sum -= nums[i];  <span class="hljs-comment">// sum减少</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="5-x-的平方根"><a href="#5-x-的平方根" class="headerlink" title="5. x 的平方根"></a>5. x 的平方根</h1><p>在不使用sqrt(x) 函数的情况下, 得到x的平方根的整数部分</p><p>考察: 二分法, 牛顿迭代</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//暴力解法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sqrt01</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;x;i++)&#123;<br><span class="hljs-keyword">if</span>(i*i =&lt; x || (i+<span class="hljs-number">1</span>)*(i+<span class="hljs-number">1</span>) &gt;= x)&#123;<br><span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-comment">//二分法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> x/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(right &gt;= left)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (right - left)/<span class="hljs-number">2</span> +left;<br>        <span class="hljs-keyword">if</span>(mid * mid &lt;= x)&#123;<br>index = mid;<br>            left = mid+<span class="hljs-number">1</span>;<br>            <br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <br>            right = mid -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> index;<br>&#125;<br><br><span class="hljs-comment">// 牛顿迭代 n + n/x</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">newton</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)sqrt(x,x);<br>    <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> i, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> (i+x/i)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(res == i)&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> sqrt(res,x);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2022/02/27/MySQL/"/>
    <url>/2022/02/27/MySQL/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一-MySQL数据库的安装和配置"><a href="#一-MySQL数据库的安装和配置" class="headerlink" title="一 MySQL数据库的安装和配置"></a>一 MySQL数据库的安装和配置</h1><h2 id="1-1-MySQL安装步骤"><a href="#1-1-MySQL安装步骤" class="headerlink" title="1.1 MySQL安装步骤"></a>1.1 MySQL安装步骤</h2><ol><li><p>下载安装包<a href="https://dev.mysql.com/downloads/mysql/5.7.html">MySQL</a>, 并解压</p></li><li><p>添加环境变量, 在Path环境变量增加mysql的安装目录\bin目录</p></li><li><p>添加my.ini文件</p></li><li><p>使用管理员身份打开命令行窗口连接MySQL数据库, 下载mysql5.7(稳定)</p><blockquote><p>update user set authentication_string&#x3D;password(“hsp”) where user&#x3D;’root’ and Host&#x3D;’localhost’;</p><p>就是修改用户密码为hsp</p><p>注释掉跳过安全检查</p><p>net start mysql 启动MySQL服务</p><p>net stop mysql  停止MySQL服务</p><p>mysql -u root -p 登录</p></blockquote></li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">mysql -h 主机名 -<span class="hljs-selector-tag">P</span> 端口 -u 用户名 -<span class="hljs-selector-tag">p</span>密码<br>小写的-<span class="hljs-selector-tag">p</span>后紧跟密码,不能有空格, 不输入密码直接回车会提醒输入密码<br>例如<br>mysql -h <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> -<span class="hljs-selector-tag">P</span> <span class="hljs-number">3306</span> -u root -phsp<br>如果没有写 -h 主机, 默认是本机<br>如果没有写 -<span class="hljs-selector-tag">P</span> 端口, 默认就是<span class="hljs-number">3306</span><br></code></pre></div></td></tr></table></figure><p>登录前保证服务启动</p><h2 id="1-2-SQLyog-安装和使用"><a href="#1-2-SQLyog-安装和使用" class="headerlink" title="1.2 SQLyog 安装和使用"></a>1.2 SQLyog 安装和使用</h2><p>介绍: 图形化MySQL管理软件</p><p>略</p><h2 id="1-3-数据库的三层结构"><a href="#1-3-数据库的三层结构" class="headerlink" title="1.3 数据库的三层结构"></a>1.3 数据库的三层结构</h2><ol><li>安装MySQL数据库，就是在主机安装一个数据库管理系统(DBMS), 这个管理程序可以管理多个数据库</li><li>一个数据库中可以创建多个表, 用以保存数据(信息)</li><li>数据库管理系统(DBMS), 数据库和表关系如下图</li></ol><p><img src="/2022/02/27/MySQL/image-20220228205737710.png" alt="image-20220228205737710"></p><p><strong>MySQL数据库-普通表的本质就是文件</strong></p><ol start="4"><li>数据库中主要用表来存放数据</li><li>表的一行称之为一条记录  &#x3D;&#x3D;&#x3D;&gt; 在java中, 一行记录往往用一个对象表示</li></ol><h2 id="1-4-SQL语句分类"><a href="#1-4-SQL语句分类" class="headerlink" title="1.4 SQL语句分类"></a>1.4 SQL语句分类</h2><ul><li>DDL: 数据定义语句(create表, 库…)</li><li>DML: 数据操作语句(增加insert,  修改 update,  删除delete)</li><li>DQL: 数据查询语句(select)</li><li>DCL: 数据控制语句(管理数据库:  用户权限 grant  revoke撤销)</li></ul><h1 id="二-数据库"><a href="#二-数据库" class="headerlink" title="二 数据库"></a>二 数据库</h1><h2 id="2-1-创建数据库"><a href="#2-1-创建数据库" class="headerlink" title="2.1 创建数据库"></a>2.1 创建数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREAT DATABASE [IF NOT EXISTS] db_name<br>[creat_specification []]<br><br><br>#1. CHARACTER SET:  指定数据库采用的字符集, 如果不指定字符集, 默认utf8<br>#2. COLLATE: 指定数据库字符集的校对规则(常用utf8_bin(区分大小写), utf8_general_ci(不区分大小写, 默认))    collate:校对<br></code></pre></div></td></tr></table></figure><p>练习:</p><ol><li>创建一个名为hsp_db01的数据库</li><li>创建一个utf8字符集hsp_db02数据库</li><li>创建一个使用utf8 的字符集, 并带校对规则的hsp_db03数据库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 演示创建数据库操作<br>#1. 创建一个名为hsp_db01的数据库<br><br>#删除数据库<br>CREATE DATABASE hsp_db01;<br>DROP DATABASE hsp_db01;#分号可有可无<br><br>#2. 创建一个utf8字符集hsp_db02数据库<br>CREATE DATABASE hsp_db02 CHARACTER SET utf8<br><br>#3. 创建一个使用utf8 的字符集, 并带校对规则的hsp_db03数据库   utf8_bin区分大小写<br>CREATE DATABASE hsp_db03 CHARACTER SET utf8 COLLATE utf8_bin<br># 建立一张表, 校对规则默认跟数据库的校对规则, 也可以自己指定<br><br>#一条查询的sql语句  *表示所有字段 从名字tom开始查询<br>SELECT * FROM t1 WHERE NAME = &#x27;tom&#x27;<br><br></code></pre></div></td></tr></table></figure><h2 id="2-2-查看-删除数据库"><a href="#2-2-查看-删除数据库" class="headerlink" title="2.2 查看,删除数据库"></a>2.2 查看,删除数据库</h2><ol><li>显示数据库: SHOW DATABASES</li><li>显示数据库创建语句: SHOW CREATE DATABASE db_name</li><li>数据库删除:  DROP DATABASE [IF EXISTS] db_name</li></ol><p>练习:</p><ol><li>查看当前数据库服务器中的所有数据库</li><li>查看前面创建的hsp_db01数据库定义信息</li><li>删除前面创建的hsp_db01数据库</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java">#演示删除和查询数据库<br>#<span class="hljs-number">1.</span> 查看当前数据库服务器中的所有数据库<br>SHOW DATABASES<br>#<span class="hljs-number">2.</span> 查看前面创建的hsp_db01数据库定义信息<br>SHOW CREATE DATABASE hsp_db01<br>CREATE DATABASE `CREATE`   #反引号，esc键下方, 规避关键字<br>DROP DATABASE `create`<br>#<span class="hljs-number">3.</span> 删除前面创建的hsp_db01数据库<br>DROP DATABASE `hsp_db01`  #带反引号更加规范<br></code></pre></div></td></tr></table></figure><h2 id="2-3-备份和恢复数据库"><a href="#2-3-备份和恢复数据库" class="headerlink" title="2.3 备份和恢复数据库"></a>2.3 备份和恢复数据库</h2><ul><li><p><strong>备份数据库(在DOS命令行)</strong></p><p><strong>mysqldump -u 用户名 -p -B 数据库1 数据库2 数据库n &gt; 文件名.sql</strong></p></li><li><p><strong>恢复数据库(进入Mysql命令行再执行)</strong></p><p><strong>Source 文件名.sql</strong></p></li></ul><p>练习: </p><p>​    database03.sql 备份hsp_db02 和 hsp_db03 数据库中的数据, 并恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#备份  <br>mysqldump -u root -p -B hsp_db02 hsp_db03 &gt; F:\CodeLearn\mysql\practice\bak.sql# 备份文件就是对应的sql语句,需要在DOS命令行执行<br><br>DROP DATABASE hsp_db03;<br>#恢复数据库(需要进入mysql命令行)<br>source F:\CodeLearn\mysql\practice\bak.sql<br>`hsp_db02` # mysql -u root -p<br><br>#第二个恢复方式<br>#复制粘贴语句, 执行语句<br></code></pre></div></td></tr></table></figure><ul><li><p>备份数据库的表</p><p><strong>mysqldump -u root -p密码 数据库 表1 表2 表n &gt; d:\文件名.sql</strong></p><p>(注意: 这里没有大B)</p><p>练习: 备份hsp_db02 的t2</p></li></ul><h1 id="三-表"><a href="#三-表" class="headerlink" title="三 表"></a>三 表</h1><h2 id="3-1创建表"><a href="#3-1创建表" class="headerlink" title="3.1创建表"></a>3.1创建表</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE table_name<br>(<br>    field1 datatype,<br>    field2 datatype,<br>    field3 datatype<br>)character set 字符集 collate 校对规则 engine 引擎<br>filed: 指定列名, datatype: 指定列类型(字段类型)<br>character set: 如果不指定则为所在数据库字符集<br>collate: 如不指定则为所在数据库校对规则<br>engine: 引擎<br>#  案例<br>CREATE TABLE `user` (<br>id INT, <br>`name` VARCHAR(255)<br>`password` VARCHAR(32)<br>`birthday` VARCHAR(255)<br>CHARACTER SET utf8 COLLATE utf8_bin ENGINE INNODB;<br></code></pre></div></td></tr></table></figure><h2 id="3-2-删除表"><a href="#3-2-删除表" class="headerlink" title="3.2 删除表"></a>3.2 删除表</h2><h2 id="3-3-修改表"><a href="#3-3-修改表" class="headerlink" title="3.3 修改表"></a>3.3 修改表</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 添加列<br>ALTER TABLE tablename<br>ADD (colum datatype [DEFAULT expr],<br>    colum datatype [DEFAULT expr]);<br>    <br># 修改列<br>ALTER TABLE tablename<br>MODIFY (colum datatype [DEFAULT expr],<br>       colum datatype [DEFAULT expr]);<br><br><br># 删除列<br>ALTER TABLE tablename<br>DROP (colum);<br><br># 查看表的所有列<br>desc 表名; <br><br># 修改表名<br>RENAME TABLE 表名 TO 新表名;<br><br># 修改表的字符集<br>ALTER TABLE 表名 CHARACTER SET 字符集;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">########################练习###########################<br>CREATE TABLE emp (c INT);<br>ALTER TABLE emp<br>ADD (`resume` TEXT,<br>`image` VARCHAR(255),<br>`job` VARCHAR(10),<br>`sex` CHAR(1),<br>`name` VARCHAR(4));<br>ALTER TABLE emp<br>ADD `resw` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27; # 添加<br>AFTER RESUME;<br>DESC emp;<br>ALTER TABLE emp<br>MODIFY job VARCHAR(60) NOT NULL DEFAULT &#x27;&#x27;  #修改job为60字符<br><br># 删除列<br>ALTER TABLE emp<br>DROP sex<br><br># 改表名<br>RENAME TABLE emp TO employee;<br># 改字符集<br>ALTER TABLE employee CHARACTER SET utf8;<br><br># 改列名<br>ALTER TABLE employee <br>CHANGE `name` user_name VARCHAR(4) NOT NULL DEFAULT &#x27;&#x27;;<br>DESC employee;<br></code></pre></div></td></tr></table></figure><h1 id="四-Mysql数据类型"><a href="#四-Mysql数据类型" class="headerlink" title="四 Mysql数据类型"></a>四 Mysql数据类型</h1><p><strong>Mysql常用数据类型(列类型)</strong></p><p>Mysql列类型即Mysql的数据类型</p><h2 id="4-1-数值类型"><a href="#4-1-数值类型" class="headerlink" title="4.1 数值类型"></a>4.1 数值类型</h2><h3 id="4-1-1-整型"><a href="#4-1-1-整型" class="headerlink" title="4.1.1 整型"></a>4.1.1 整型</h3><ul><li>tinyint: 一个字节</li><li>smallint: 两个字节</li><li>mediumint: 三个字节</li><li><strong>int: 四个字节</strong></li><li>bigint: 八个字节</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#定义一个无符号整数<br>create table t10(<br>    id tinyint); #默认是有符号<br>create table t11(<br>    id tinyint unsigned); # 无符号的<br>#演示bit类型使用<br># 说明: bit(m) m在1~64<br># 添加数据  范围按照所给位数确定<br># 按位显示<br># 查询依然可以按照数值查询<br>CREATE TABLE t05 (num BIT(8)); #8位相当于一个字节<br>INSERT INTO t05 VALUES(255);<br>SELECT * FROM t05;<br></code></pre></div></td></tr></table></figure><h3 id="4-1-2-小数类型"><a href="#4-1-2-小数类型" class="headerlink" title="4.1.2 小数类型"></a>4.1.2 小数类型</h3><ul><li>float: 单精度  4个字节</li><li><strong>double:  双精度  8个字节</strong></li><li><strong>decimal(M, D) :    大小由M和D确定</strong>    M: 数的总数(最大65, 默认10)    D: 保留小数个数(最大30,  默认0)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE t06(<br>num1 FLOAT,<br>num2 DOUBLE,<br>num3 DECIMAL(30,20));<br>#添加数据<br>INSERT INTO t06 VALUES(2323.233232323233232,233232.3232323233323232,32.323232323232323243214415535736352);<br><br>SELECT * FROM t06;<br><br>CREATE TABLE t07(<br>num DECIMAL(65));<br>INSERT INTO t07 VALUES(13452655677543256754324561543666666666666666);<br>SELECT * FROM t07;<br></code></pre></div></td></tr></table></figure><h2 id="4-2-文本类型-必须指定大小-num"><a href="#4-2-文本类型-必须指定大小-num" class="headerlink" title="4.2 文本类型(必须指定大小( num) )"></a>4.2 文本类型(必须指定大小( num) )</h2><ul><li><p><strong>char   0 ~ 255字符</strong></p><p>char(4) # 这个4表示字符数(最大255), 不是字节数, 不管是中文还是英文都是放4个, 按字符计算  <strong>定长:</strong> 即使数据是小于4字符也会分配4个字符空间</p></li><li><p>**varchar    0 ~ 65535字节&#x3D;&#x3D;21844 **   </p><p>varchar(4)  # 4个字符    #     <strong>变长</strong> : 实际占用空间  &#x3D;  实际数据空间  + (1~3字节)记录长度等数据</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#注释快捷键, shift + ctrl + c   ||     + r:取消注释<br>CREATE TABLE t09(<br>`name` CHAR(255));<br>SELECT * FROM t09;<br>CREATE TABLE t10(<br>`name` VARCHAR(21844)); #如果表的编码是utf8 size = 65536-3 /3 = 21844<br><br><br>CREATE TABLE t11(<br>`name` CHAR(4));<br>INSERT INTO t11 VALUES(&#x27;韩顺好&#x27;);<br>SELECT * FROM t11<br><br>CREATE TABLE t12(<br>`name` VARCHAR(4));<br>INSERT INTO t12 VALUES(&#x27;fdas&#x27;);<br>SELECT * FROM t12<br></code></pre></div></td></tr></table></figure></li><li><p><strong>text    0 ~ 65535</strong></p></li><li><p>longtext    0 ~ 2^32 - 1</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE t13(<br>contant TEXT,<br>contant2 MEDIUMTEXT,<br>contant3 LONGTEXT);<br>INSERT INTO t13 VALUES(&#x27;哈顺平教育&#x27;, &#x27;今天好好学习&#x27;,&#x27;今天好好休息&#x27;);<br>SELECT * FROM t13;<br>DROP  TABLE t13;<br></code></pre></div></td></tr></table></figure><h2 id="4-3-二进制数据类型"><a href="#4-3-二进制数据类型" class="headerlink" title="4.3 二进制数据类型"></a>4.3 二进制数据类型</h2><ul><li>blob    0~65535</li><li>longblob   0 ~ 2^32-  1</li></ul><h2 id="4-4-日期类型"><a href="#4-4-日期类型" class="headerlink" title="4.4 日期类型"></a>4.4 日期类型</h2><ul><li>data    日期类型: 年月日</li><li>time    时间类型: 时分秒</li><li><strong>datatime    日期时间: 年月日时分秒   YYYY-MM-DD  HH:mm:ss</strong>   8字节</li><li><strong>timestamp   时间戳   1970 ~今</strong>       4字节</li><li>year    年</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#演示时间相关的类型<br># 创建表 date, datetime, timestamp<br>CREATE TABLE t14(<br>birthday DATE, -- 生日<br>job_time DATETIME,<br>login_time TIMESTAMP  -- 登录时间, 如果希望自动更新, 添加字段配置要求<br>NOT NULL DEFAULT CURRENT_TIMESTAMP<br>ON UPDATE CURRENT_TIMESTAMP);<br><br>SELECT * FROM t14;<br>INSERT INTO t14 VALUES(&#x27;2022-11-11&#x27;,&#x27;2022-1-1 10:10:10&#x27;,&#x27;2022-1-1 10:10:10&#x27;);<br>SELECT * FROM t14;<br><br>INSERT INTO t14(birthday,job_time)VALUES(&#x27;2022-11-11&#x27;,&#x27;2022-1-1 10:10:10&#x27;);# 中间空格可不要(t14()和values()之间)<br>SELECT * FROM t14;<br></code></pre></div></td></tr></table></figure><p>TimeStamp在Insert 和 update 时, 自动更新</p><h1 id="五-CRUD"><a href="#五-CRUD" class="headerlink" title="五 CRUD"></a>五 CRUD</h1><p>create, read, update , delete</p><h3 id="5-1-Insert"><a href="#5-1-Insert" class="headerlink" title="5.1 Insert"></a>5.1 Insert</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">INSERT INTO table_name (column, column, column...) <br>VALUES (value, value...)<br></code></pre></div></td></tr></table></figure><p>细节:</p><ol><li>插入的数据应该与字段的数据类型相同.  比如把 ‘abc’ 添加到 int 类型会错误</li><li>数据的长度应在列的规定范围内, 例如: 不能将一个长度为80的字符串加入到长度为40 的列中</li><li>在values中列出的数据位置必须与被加入的列的排列位置相对应</li><li>字符和日期型数据应该包含在单引号中</li><li>列可以插入空值[前提是该字段允许为空], insert into table value(null)</li><li>insert into tab_name(列名) values(), (), () 形式添加多条记录</li><li>如果是给表中的所有字段添加数据, 可以不写前面的字段名称</li><li>默认值的使用, 当不给某个字段时, 如果有默认值就会添加,  否则报错</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"># 添加多条<br>INSERT INTO <span class="hljs-title function_">goods</span> <span class="hljs-params">(goods_name,id,price)</span><br>VALUES(<span class="hljs-string">&#x27;vivo手机&#x27;</span>,<span class="hljs-string">&#x27;43&#x27;</span>,<span class="hljs-number">3000</span>),(<span class="hljs-string">&#x27;pxx手机&#x27;</span>,<span class="hljs-number">23</span>,<span class="hljs-number">9.9</span>),(<span class="hljs-string">&#x27;诺基亚&#x27;</span>,<span class="hljs-number">90</span>,<span class="hljs-number">999</span>);<br><br># 默认值使用<br>CREATE TABLE `goods2`(<br>id INT,<br>goods_name <span class="hljs-title function_">VARCHAR</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span> NOT NULL DEFAULT <span class="hljs-string">&#x27;8848手机&#x27;</span>, # 指定默认值<br>price DOUBLE);   # 没有 NOT NULL 则可以添加<span class="hljs-literal">null</span>作为price  <br><br>INSERT INTO <span class="hljs-title function_">goods2</span> <span class="hljs-params">(id)</span><br>VALUES(<span class="hljs-number">233</span>);<br></code></pre></div></td></tr></table></figure><h3 id="5-2-Updata"><a href="#5-2-Updata" class="headerlink" title="5.2 Updata"></a>5.2 Updata</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE table_name<br>SET col_name = expr1, col_name2 = expr2...<br>WHERE where_defination<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE employee SET salary = 5000; # 没有where 默认修改所有值<br><br>UPDATE employee SET salary = 3000<br>WHERE user_name = &#x27;小妖怪&#x27;;  # 指定修改&#x27;小妖怪&#x27; 的salary<br><br>UPDATE employee SET salary = salary + 1000<br>WHERE user_name = &#x27;老妖怪&#x27;;   # 在原有的基础上修改<br></code></pre></div></td></tr></table></figure><p>细节:</p><ol><li>UPDATE语法可以使用新值更新原有表行中的各列</li><li>SET 子句指示要修改哪些列和要给予哪些值</li><li>WHERE 子句指定应更新哪些行，　如果没有WHERE子句，　则更新所有的行（记录）</li><li>如果需要修改多个字段, 可以通过 SET　字段１&#x3D; 值1, 字段2 &#x3D; 值2…</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE employee SET salary = salary + 1000, job = &#x27;打铁&#x27;<br>WHERE user_name = &#x27;老妖怪&#x27;;   # 在原有的基础上修改<br><br></code></pre></div></td></tr></table></figure><h3 id="5-3-Delete"><a href="#5-3-Delete" class="headerlink" title="5.3 Delete"></a>5.3 Delete</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DELETE FROM table_name<br>WHERE where_definition<br><br>DELETE FROM employee<br>WHERE user_name = &#x27;老妖怪&#x27;;# 删除单个记录<br><br>DELETE FROM employee; # 删除表中所有数据<br><br>## DELETE不能删除单个列  但是ALTER　可以(当只有单列时则只能删除表A table must have at least 1 column)<br>ALTER TABLE emp DROP job;<br><br></code></pre></div></td></tr></table></figure><p>细节:</p><ol><li>如果不适用where子句, 将删除表中所有的数据</li><li>DELETE语句不能删除某一列的值(可以使用update 设为 null 或者 ‘ ‘)</li><li>使用DELETE语句仅删除记录, 不删除表本身, 如果要删除表, 使用DROP TABLE 语句;</li></ol><h3 id="5-4-Select🧡💛💚💙💜🤎"><a href="#5-4-Select🧡💛💚💙💜🤎" class="headerlink" title="5.4 Select🧡💛💚💙💜🤎"></a>5.4 Select🧡💛💚💙💜🤎</h3><h4 id="5-4-1-单表"><a href="#5-4-1-单表" class="headerlink" title="5.4.1 单表"></a>5.4.1 单表</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT [DISTINCT] * &#123;column1, column2, ...&#125; FROM table_name;<br><br>SELECT `name`,english FROM student;  <br>SELECT DISTINCT `name`,english FROM student; # 去重<br></code></pre></div></td></tr></table></figure><p>DISTINCT 去重&#x3D;&#x3D;&#x3D;&#x3D;&gt; 每个字段相同才去重</p><p>注意事项: </p><ol><li>select 指定查询哪些列的数据</li><li>column指定列名</li><li>*号代表查询所有列</li><li>From 指定查询那张表</li><li>DISTINCT 可选, 指显示结果时, 是否去掉重复数据</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 使用表达式对查询的列进行运算<br>SELECT `name`, (chinese + english + math) FROM student;<br><br><br># 使用 AS 语句<br>SELECT `name`, (chinese+english+math) AS total_score FROM student;<br><br>SELECT `name` AS &#x27;名字&#x27; , (chinese+english+math) AS &#x27;总分&#x27; FROM student;<br></code></pre></div></td></tr></table></figure><h5 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h5><p>在where子句中经常使用的运算符</p><ul><li>比较运算符<ul><li>大于小于&lt; &gt; &lt;&#x3D;….</li><li>显示在某一区间的值(BETWEEN …AND…)</li><li>显示在in列表中的值, 例如: in(100, 200) : IN(set)</li><li>模糊查询  LIKE ‘张%’ NOT LIKE ‘ ‘</li><li>判断是否为空:  IS NULL</li></ul></li><li>逻辑运算符<ul><li>多个条件同时成立  AND</li><li>多个条件任意成立  OR</li><li>不成立, 例如: WHERE NOT(salary &gt; 100); NOT</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MYSQL"># 大于小于等于<br>SELECT * FROM student WHERE `name` = &#x27;赵云&#x27;;<br>SELECT * FROM student WHERE  `english` &gt; 60;<br>SELECT * FROM student WHERE `chinese` &lt; 60;<br>SELECT * FROM student WHERE `chinese` &gt; english;<br><br># 某一区间  BETWEEN<br>SELECT * FROM student WHERE chinese BETWEEN 20 AND 80;<br><br># 显示IN列表中的值<br><br># 模糊查询<br>SELECT * FROM student WHERE `name` LIKE &#x27;张%&#x27;;<br><br># 判断<br><br><br># 逻辑运算符<br>SELECT * FROM student WHERE `chinese` &gt;= 60 AND `english` &gt;= 60 AND `math` &gt;= 60;<br><br>SELECT * FROM student WHERE math = 89 OR math = 90 OR math = 91;<br><br></code></pre></div></td></tr></table></figure><h5 id="order-by-子句"><a href="#order-by-子句" class="headerlink" title="order by 子句"></a>order by 子句</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT DISTINCT column1,column2 ...<br>FROM table<br>ORDER　BY column asc|desc, ...<br></code></pre></div></td></tr></table></figure><ol><li>order by 指定排序的列, 排序的列既可以是表中的列名, 也可以是select 语句后指定的列名</li><li>ASC 升序(默认)   DESC 降序</li><li>ORDER BY 子句应位于SELECT语句的末尾</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 升序<br>SELECT * FROM student<br>ORDER BY math;<br><br># 降序<br>SELECT (chinese + english + math) AS &#x27;总分&#x27; FROM student<br>ORDER BY (chinese + english + math) DESC;<br><br><br></code></pre></div></td></tr></table></figure><h5 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h5><p>对子句队列进行分组[先创建测试表]</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT column1,column2... FROM table <br>GROUP BY column<br></code></pre></div></td></tr></table></figure><p>使用HAVING 子句对分组后的结果进行过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysq">SELECT column1,column2... FROM table <br>GROUP BY column HAVING ...<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 创建表<br>CREATE TABLE dept( #部门表<br>deptno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0,<br>dname VARCHAR(20) NOT NULL DEFAULT &quot;&quot;,<br>loc VARCHAR(13) NOT NULL DEFAULT &quot;&quot;);<br><br>INSERT INTO dept VALUES(10,&#x27;ACCOUNTING&#x27;,&#x27;NEW YORK&#x27;),(20,&#x27;RESEARCH&#x27;,&#x27;DALLAS&#x27;),(40,&#x27;OPERATIONS&#x27;,&#x27;BOSTON&#x27;);<br>SELECT * FROM dept<br><br># 员工表<br>CREATE TABLE emp<br>(empno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0, # 编号<br>ename VARCHAR(20) NOT NULL DEFAULT &quot;&quot;,<br>job VARCHAR(9) NOT NULL DEFAULT &quot;&quot;,<br>mgr MEDIUMINT UNSIGNED, # 上级编号<br>hiredate DATE NOT NULL, # 入职时间<br>sal DECIMAL(7,2) NOT NULL, # 薪水<br>comm DECIMAL(7,2),  # 红利<br>deptno MEDIUMINT UNSIGNED NOT NULL DEFAULT 0); # 部门编号<br><br>INSERT INTO emp VALUES(7936,&#x27;smith&#x27;,&#x27;clerk&#x27;,7906,&#x27;1990-01-23&#x27;,800.00,NULL,20);<br>INSERT INTO emp VALUES(7936,&#x27;allen&#x27;,&#x27;clerk&#x27;,7906,&#x27;1990-11-23&#x27;,800.00,NULL,25);<br>INSERT INTO emp VALUES(7936,&#x27;ward&#x27;,&#x27;clerk&#x27;,7906,&#x27;1993-12-23&#x27;,800.00,NULL,21);<br>INSERT INTO emp VALUES(7936,&#x27;smith&#x27;,&#x27;clerk&#x27;,7906,&#x27;1980-12-23&#x27;,8100.00,564,22);<br>INSERT INTO emp VALUES(7936,&#x27;smith&#x27;,&#x27;clerk&#x27;,7906,&#x27;1994-2-23&#x27;,8100.00,NULL,30);<br>INSERT INTO emp VALUES(7936,&#x27;jackh&#x27;,&#x27;clerk&#x27;,7906,&#x27;1996-12-23&#x27;,2800.00,3423,16);<br>INSERT INTO emp VALUES(7936,&#x27;tom&#x27;,&#x27;clerk&#x27;,7906,&#x27;1994-12-23&#x27;,8100.00,NULL,270);<br>INSERT INTO emp VALUES(7936,&#x27;rose&#x27;,&#x27;clerk&#x27;,7906,&#x27;1995-12-3&#x27;,1800.00,NULL,90);<br>INSERT INTO emp VALUES(7936,&#x27;fdsoa&#x27;,&#x27;clerk&#x27;,7906,&#x27;1992-12-23&#x27;,800.00,NULL,20);<br><br>SELECT * FROM emp;<br><br># 工资级别表<br>CREATE TABLE salgrade<br>(<br>grade MEDIUMINT UNSIGNED NOT NULL DEFAULT 0, # 级别<br>losal DECIMAL(17,2) NOT NULL, # 该级别最低工资<br>hisal DECIMAL(17,2) NOT NULL # 该级别的最高工资<br>);<br>INSERT INTO salgrade VALUES(1,700,1200);<br>INSERT INTO salgrade VALUES(2,1201,1400);<br>INSERT INTO salgrade VALUES(3,1402,2000);<br>INSERT INTO salgrade VALUES(4,2001,3000);<br>INSERT INTO salgrade VALUES(5,3001,9999); #<br>SELECT * FROM salgrade<br><br><br><br><br><br># 演示group by<br><br><br># 显示某个部门的平均工资和最高工资<br>SELECT AVG(sal),MAX(sal), deptno FROM emp<br>GROUP BY deptno;<br><br><br># 显示每个部门的每种岗位的平均工资和最低工资<br>SELECT AVG(sal), MIN(sal), deptno ,job<br>FROM emp GROUP BY deptno,job;<br><br><br># 显示平均工资低于2000的部门号和他的平均工资<br><br>SELECT AVG(sal) ,deptno<br>FROM emp <br>GROUP BY deptno  HAVING AVG(sal)&lt;2000;<br><br>SELECT AVG(sal) AS avg_sal ,deptno<br>FROM emp <br>GROUP BY deptno  HAVING avg_sal&lt;2000  # 使用了别名ji, 效率更高<br></code></pre></div></td></tr></table></figure><p>如何理解分组:</p><div class="hljs code-wrapper"><pre><code class="hljs"> 1. 查询了一堆记录A 2. 对A进行分组处理得到 B 3. 对B 进行过滤使用HAVING</code></pre></div><h4 id="5-4-2-多表🚆🚉🚊🚇🚄🏎"><a href="#5-4-2-多表🚆🚉🚊🚇🚄🏎" class="headerlink" title="5.4.2 多表🚆🚉🚊🚇🚄🏎"></a>5.4.2 多表🚆🚉🚊🚇🚄🏎</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MySQL">SELECT * FROM emp;  # 表一<br>SELECT * FROM dept;  # 表二<br>SELECT * FROM salgrade;  # 表三<br></code></pre></div></td></tr></table></figure><ul><li>MySQL表查询 – 加强</li></ul><ol><li>使用WHERE子句</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MySQL"># 查找1992.1.1 后入职的员工<br># # 查找1992.1.1 后入职的员工<br>SELECT * FROM emp<br>WHERE DATEDIFF(hiredate, &#x27;1992-1-1&#x27;) &gt; 0;<br><br>SELECT * FROM emp<br>WHERE (hiredate - &#x27;1992-01-01&#x27;) &gt; 0  # 日期类型可以直接计算或比较, 但是需要格式一致<br><br># 显示第三个字符为s的所有员工<br>SELECT * FROM emp<br>WHERE ename LIKE &#x27;__s%&#x27; # 两个下划线 + s + %<br><br># 查询表的结构<br>DESC emp;<br><br># 按照工资从低到高排序<br>SELECT ename,sal FROM emp # ASC 从低到高    DESC降序<br>ORDER BY sal DESC<br><br># 部门升序, 工资降序<br>SELECT * FROM emp<br>ORDER BY deptno ASC, sal DESC;<br></code></pre></div></td></tr></table></figure><h1 id="六-函数"><a href="#六-函数" class="headerlink" title="六 函数"></a>六 函数</h1><h2 id="6-1-合计-x2F-统计函数count"><a href="#6-1-合计-x2F-统计函数count" class="headerlink" title="6.1 合计&#x2F;统计函数count"></a>6.1 合计&#x2F;统计函数count</h2><p>返回总行数</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT COUNT(*) FROM table_name<br>WHERE...<br><br>SELECT COUNT(列名) FROM table_name<br>WHERE...<br></code></pre></div></td></tr></table></figure><p>count(*) : 返回满足条件的记录的行数</p><p>count(列): 统计满足条件的某列有多少个, 但是会排除为空的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 演示统计函数使用<br>SELECT *,(chinese + english + math) FROM student<br>WHERE (chinese + english + math) &gt;250;<br><br>#统计一共有多少学生<br>SELECT COUNT(*) FROM student;<br><br><br><br>#统计数学成绩大于90的学生<br>SELECT COUNT(math) FROM student<br>WHERE math &gt; 90;<br><br># 统计总分&gt;250<br>SELECT COUNT(*) FROM student<br>WHERE (chinese + english + math) &gt;250;<br><br>CREATE TABLE t15(<br>`name` VARCHAR(20));<br><br>INSERT INTO t15 VALUES(&#x27;tom&#x27;);<br>INSERT INTO t15 VALUES(&#x27;jack&#x27;);<br>INSERT INTO t15 VALUES(&#x27;rose&#x27;);<br>INSERT INTO t15 VALUES(NULL);<br>SELECT * FROM t15;<br>SELECT COUNT(*) FROM t15; # 返回所有行数   返回4<br>SELECT COUNT(`name`) FROM t15; # 排除该列为空的行     返回3<br></code></pre></div></td></tr></table></figure><h2 id="6-2-合计函数-sum"><a href="#6-2-合计函数-sum" class="headerlink" title="6.2 合计函数 - sum"></a>6.2 合计函数 - sum</h2><p>返回满足where条件的行的和, 一般使用在数值列</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT SUM(列名) &#123;,sum(列名)...&#125; FROM table_name<br>[WHERE where_definition]<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"><br># 演示sum<br><br>#查询学生数学总成绩<br>SELECT SUM(math) FROM student;<br><br># 统计各科总成绩<br>SELECT SUM(chinese) AS &#x27;语文总成绩&#x27;,SUM(english) AS &#x27;英语总成绩&#x27;,SUM(math) AS &#x27;数学总成绩&#x27; FROM student;<br><br># 统计班级语文平均分<br>SELECT SUM(chinese)/COUNT(*) FROM student;<br></code></pre></div></td></tr></table></figure><blockquote><p>注意事项: </p><p>sum仅对数值起作用, 否则没有意义</p><p>多列求和必须要有逗号</p></blockquote><h2 id="6-3-合计函数-avg"><a href="#6-3-合计函数-avg" class="headerlink" title="6.3 合计函数  - avg"></a>6.3 合计函数  - avg</h2><p>返回某列平均值</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"><br># 求数学平均分<br>SELECT AVG(math) FROM student;<br><br># 求总分平均分<br>SELECT AVG(math + english + chinese) FROM student;<br></code></pre></div></td></tr></table></figure><h2 id="6-4-合计函数-Max-x2F-Min"><a href="#6-4-合计函数-Max-x2F-Min" class="headerlink" title="6.4 合计函数 - Max &#x2F; Min"></a>6.4 合计函数 - Max &#x2F; Min</h2><p>返回某列最大最小值</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT MAX(列名) from table_name<br>[WHERE...]<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MYSQL">SELECT MAX(math + english + chinese),MIN(math + english + chinese)<br>FROM student;<br><br># 求出班级数学最高低分<br>SELECT MAX(math),MIN(math) FROM student;<br></code></pre></div></td></tr></table></figure><h2 id="6-5-字符串相关函数"><a href="#6-5-字符串相关函数" class="headerlink" title="6.5 字符串相关函数"></a>6.5 字符串相关函数</h2><table><thead><tr><th><strong>CHARSET(str)</strong></th><th>返回字符串字符集</th></tr></thead><tbody><tr><td><strong>CONCAT(string2,…)</strong></td><td><strong>连接子串</strong></td></tr><tr><td><strong>UCASE(str)</strong></td><td><strong>转换大写</strong></td></tr><tr><td><strong>LCASE(str)</strong></td><td><strong>转化小写</strong></td></tr><tr><td>LEFT(string2, length)</td><td>从string2的左边起取length个字符</td></tr><tr><td><strong>LENGTH(string)</strong></td><td><strong>string长度</strong></td></tr><tr><td><strong>REPLACE(str, search_str,replace_str)</strong></td><td><strong>在str中用replace_str 替换 search_str</strong></td></tr><tr><td>STRCMP(string1, string2)</td><td>逐字符比较两字串的的大小</td></tr><tr><td><strong>SUBSTRING(str, position ,…)</strong></td><td><strong>从str的position开始 (从1开始计算) 取length个字符</strong></td></tr><tr><td>LTRIM(string2) RTRIM(string 2)</td><td>去除前端空格或者后端空格</td></tr><tr><td>INSERT(string2, substring)</td><td>返回substring在string中出现的位置, 没有返回0</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 案例<br># 演示字符串相关函数<br>SELECT CHARSET(ename) FROM emp;<br>SELECT * FROM emp;<br>SELECT CONCAT(ename, &#x27; job is &#x27; , job) FROM emp;  # 结果: *** job is ***<br><br>SELECT INSTR(&#x27;hanshunping&#x27;, &#x27;ping&#x27;) FROM DUAL; # dual 是系统的(亚元表)虚拟表, 用于测试<br><br>SELECT UCASE(&#x27;hanshunping&#x27;) FROM DUAL;<br>SELECT UCASE(ename) FROM emp;<br>SELECT LCASE(&#x27;DFJAOJDIASOPFAPF&#x27;) FROM DUAL;<br><br>SELECT LEFT(ename, 2) FROM emp;<br>SELECT RIGHT(ename,3) FROM emp;<br><br>SELECT LENGTH(ename) FROM emp;<br>SELECT LENGTH(&#x27;韩顺平&#x27;) FROM DUAL; # 按照字节返回, utf8一个汉字3字节, 一个英文1字节<br><br>SELECT job, REPLACE(job,&#x27;clerk&#x27;,&#x27;普通职员&#x27;) FROM emp;<br><br>SELECT STRCMP(&#x27;hsp&#x27;,&#x27;Hp&#x27;) FROM DUAL;  # 前面字符 - 后面字符(返回1,0,-1) ==&gt; 相等返回0, Unicode编码号. 这里不区分大小写, 是s - p &gt; 0 = 1<br><br><br># 截取字串<br>SELECT SUBSTRING(ename,1,3) FROM emp;<br><br><br># 去空格<br><br># 去左<br>SELECT LTRIM(&#x27;     韩顺平教育 &#x27;) FROM DUAL;<br><br># 去掉右边空格<br>SELECT RTRIM(&#x27;   韩顺平教育            &#x27;) FROM DUAL;<br><br># 去掉左右两端的空格<br>SELECT TRIM(&#x27;          函数                &#x27;) FROM DUAL;<br><br><br><br><br><br><br>##################练习<br># 以首字母小写的方式显示所有的员工emp的姓名<br>SELECT CONCAT(UCASE(SUBSTRING(ename, 1,1)), SUBSTRING(ename,2,LENGTH(ename))) FROM emp;<br>SELECT REPLACE(ename, SUBSTRING(ename,1,1),UCASE(SUBSTRING(ename, 1,1))) FROM emp; # 这里有问题, 如果多个字母和首字母相同就会导致结果出错<br><br><br><br>SELECT CONCAT(UCASE(SUBSTRING(ename, 1,1)), SUBSTRING(ename,2)) FROM emp; # 2后面可以不写<br>SELECT CONCAT(UCASE(LEFT(ename,1)), SUBSTRING(ename,2)) FROM emp;<br></code></pre></div></td></tr></table></figure><h2 id="6-6-数学相关函数"><a href="#6-6-数学相关函数" class="headerlink" title="6.6 数学相关函数"></a>6.6 数学相关函数</h2><table><thead><tr><th>ABS( num )</th><th>绝对值</th></tr></thead><tbody><tr><td>BIN(decimal_ number)</td><td>十进制转二进制</td></tr><tr><td>CEILING(number2)</td><td>向上取整</td></tr><tr><td>CONV(number2, from_base, to_base)</td><td>进制转换</td></tr><tr><td>FLOOR(number2)</td><td>向下取整</td></tr><tr><td>FORMAT( number, decimal_places)</td><td>保留小数位数</td></tr><tr><td>HEX(DecimalNumber)</td><td>转十六进制</td></tr><tr><td>LEAST(number1, number2…)</td><td>求最小值</td></tr><tr><td>MOD( numerator, denominator)</td><td>求余数</td></tr><tr><td>RAND( [ seed ] )</td><td>RAND( [ seed] ) 其范围为 0 &lt;&#x3D; v &lt;&#x3D; 1.0</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 演示数学相关函数<br><br># 绝对值<br>SELECT ABS(10) FROM DUAL;<br>SELECT ABS(-23) FROM DUAL;<br><br># 十进制转二进制<br>SELECT BIN(10) FROM DUAL; # 1010<br><br>#向上取整<br>SELECT CEILING( 3.33 ) FROM DUAL; # 4<br>SELECT CEILING( -2.3) FROM DUAL; # -2<br><br># 进制转换 <br>SELECT CONV(11,10,2)FROM  DUAL; # 把十进制的 11 转成 2 进制输出 = 1011<br>SELECT CONV(&#x27;A&#x27;,16,10)FROM DUAL; # 把十六进制的 A 转成 10 进制 = 10<br><br># 向下取整<br>SELECT FLOOR(12.78) FROM DUAL; # 12<br><br># 保留小数位数  ## #######################################很重要###################<br>SELECT FORMAT( 32.422424, 3) FROM DUAL; # 保留3位, 四舍五入<br><br># 转16进制<br>SELECT HEX(15) FROM DUAL; # F<br><br># 多个数的最小值<br>SELECT LEAST(0,1,-10,42) FROM DUAL; # -10<br><br># 多个数最大值<br>SELECT GREATEST(0,1,-10,42) FROM DUAL;<br><br># 求余数<br>SELECT MOD(10,3) FROM DUAL; # 1<br>SELECT 10%3 FROM DUAL; # 1<br><br># 求随机数 [0,1] 闭区间<br>SELECT RAND() FROM DUAL;# 变化的随机数<br>SELECT RAND(3) FROM DUAL; # 固定的随机数, 当值改变, 返回的固定随机数也会改变. seed 不变化,随机数就不变<br><br></code></pre></div></td></tr></table></figure><h2 id="6-4-时间日期相关的函数"><a href="#6-4-时间日期相关的函数" class="headerlink" title="6.4 时间日期相关的函数"></a>6.4 时间日期相关的函数</h2><table><thead><tr><th><strong>CURRENT_DATE( )</strong></th><th><strong>当前日期</strong></th></tr></thead><tbody><tr><td><strong>CURRENT_TIME( )</strong></td><td><strong>当前时间</strong></td></tr><tr><td><strong>CURRENT_TIMESTAMP( )</strong></td><td><strong>当前时间戳</strong></td></tr><tr><td><strong>DATE( datetime )</strong></td><td><strong>返回datetime的日期部分</strong></td></tr><tr><td><strong>DATE_ADD(date2,INTERVAL d_value d_type)</strong></td><td><strong>在date2中加上日期或事件</strong></td></tr><tr><td><strong>DATE_SUB(date2,INTERVAL d_value d_type)</strong></td><td><strong>在date2上减去一个时间</strong></td></tr><tr><td><strong>DATEDIFF(date1, date2)</strong></td><td><strong>两个日期差(单位: 天)</strong></td></tr><tr><td>TIMEDIFF(date1,date2)</td><td>两个时间差(结果: 小时 分钟 秒)</td></tr><tr><td><strong>NOW( )</strong></td><td><strong>当前时间</strong></td></tr><tr><td>YEAR|MONTH|DATE(datetime) FROM_UNIXTIME()</td><td>从日期(datetime)中取出 年 | 月 | 日</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">##  单位  YEAR MONTH DAY HOUR MINUTE SECOND  ## <br><br># 日期函数<br><br># 当前日期<br>SELECT CURRENT_DATE FROM DUAL; # 括号可以带, 也可以不带  2022-03-09<br># 当前时间<br>SELECT CURRENT_TIME( ) FROM DUAL;  # 括号可带可不带  22:00:46<br># 当前时间戳 <br>SELECT CURRENT_TIMESTAMP FROM DUAL;# 2022-03-09 21:58:44<br><br><br># 返回日期部分<br>SELECT DATE(CURRENT_TIMESTAMP) FROM DUAL; # 2022-03-09 21:58:44 截取后得到: 2022-03-09<br><br> -- 测试用例<br> CREATE TABLE mes(<br>id INT,<br>content VARCHAR(30),<br>send_time DATETIME);<br>INSERT INTO mes VALUES(1,&#x27;北京新闻&#x27;,CURRENT_TIMESTAMP );<br>INSERT INTO mes VALUES(2,&#x27;上海新闻&#x27;,CURRENT_TIMESTAMP );<br>INSERT INTO mes VALUES(3,&#x27;四川新闻&#x27;,NOW() ); # 结果和 current_timestam一样<br>INSERT INTO mes VALUES(4,&#x27;广东新闻&#x27;,CURRENT_TIMESTAMP );<br><br>SELECT * FROM mes;<br><br>SELECT content, DATE(send_time) FROM mes; # 只显示content和日期, 不显示时间<br><br>SELECT * FROM mes WHERE DATE_ADD(send_time,INTERVAL 30 MINUTE) &gt;= CURRENT_TIMESTAMP; # 查询三十分钟以内的信息<br>SELECT * FROM mes WHERE DATE_SUB(CURRENT_TIMESTAMP,INTERVAL 20 MINUTE) &lt;= send_time; # 查询二十分钟以内的信息<br><br># 求两个时间天数差<br>SELECT DATEDIFF(CURRENT_DATE,&#x27;1998-11-08&#x27;) FROM DUAL; # 8522  (&#x27;2022-03-09&#x27;,&#x27;1998-11-08&#x27;) 前面减去后面<br>SELECT DATEDIFF(NOW(),&#x27;1950-03-04&#x27;) FROM DUAL;<br><br>SELECT DATE_ADD(&#x27;1998-11-08&#x27;, INTERVAL 80 YEAR) FROM DUAL;<br><br>SELECT DATEDIFF(DATE_ADD(&#x27;1998-11-08&#x27;, INTERVAL 80 YEAR), NOW() ) FROM DUAL;  <br>SELECT DATEDIFF(DATE_ADD(&#x27;1998-11-08&#x27;,INTERVAL 80 YEAR), NOW()) FROM DUAL; # 20698<br><br> <br># 取出年月日  时分秒<br>SELECT DAY(&#x27;1998-11-08&#x27;) FROM DUAL; # 8<br>SELECT MONTH(&#x27;1998-11-08&#x27;) FROM DUAL;<br>SELECT YEAR(&#x27;1998-11-08&#x27;) FROM DUAL;<br>SELECT MONTH(&#x27;2022-03-10 21:46:55&#x27;) FROM DUAL;# 3<br><br>SELECT HOUR(&#x27;2022-03-10 21:46:55&#x27;) FROM DUAL;<br>SELECT MINUTE(&#x27;2022-03-10 21:46:55&#x27;) FROM DUAL;<br>SELECT SECOND(&#x27;2022-03-10 21:46:55&#x27;) FROM DUAL;<br><br><br>#  unix_timestamp(): 返回的1970-1-1 距今的秒数<br>SELECT UNIX_TIMESTAMP(&#x27;2022-03-10 21:52:14&#x27;) FROM DUAL; # 不带参数就是距今, 否则是距离该时间戳的秒数<br><br><br># from_unixtime() :   把unix_timestamp秒数 转换成 #指定格式# 的日期<br><br>SELECT FROM_UNIXTIME(1646920334) FROM DUAL; # 2022-03-10 21:52:14<br>SELECT FROM_UNIXTIME(1646920334,&#x27;%Y-%m-%d &#x27;) FROM DUAL;<br>SELECT FROM_UNIXTIME(1646920334,&#x27;%Y-%m-%d %H:%i:%s&#x27;) FROM DUAL; # i表示分钟<br><br></code></pre></div></td></tr></table></figure><p><strong>在实际开发中, 经常使用int来保存一个unix时间戳, 然后使用FROM_UNIXTIME(  ) 进行转换</strong></p><h2 id="6-5-加密函数"><a href="#6-5-加密函数" class="headerlink" title="6.5 加密函数"></a>6.5 加密函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 演示加密系统函数<br><br># 查询用户  结果 : 用户名 @ IP地址<br><br>SELECT USER() FROM DUAL; # root@localhost  <br><br># 查询当前数据库名称<br>SELECT DATABASE() FROM DUAL; # 方式一<br>SELECT DATABASE(); # 方式二<br><br># 对用户密码进行加密  在数据库中存放的是加密后的密码, 采用md5进行加密<br>SELECT MD5( &#x27;hsp&#x27; ) FROM DUAL; # 这里显示该字符串的md5加密后结果: 32位16进制<br># 查询md5加密后长度<br>SELECT LENGTH(MD5(&#x27;hsp&#x27;)) FROM DUAL;<br><br># 演示: 用户表, 存放密码时采用 md5加密<br>CREATE TABLE users(<br>id INT,<br>`name` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;,<br>pwd CHAR(32) NOT NULL DEFAULT &#x27;&#x27;);   #安装了sql server以后，默认的用户名(uid)是sa，密码(pwd)是空值。  password<br><br>INSERT INTO users<br>VALUES(100,&#x27;韩顺平&#x27;,MD5(&#x27;hsp&#x27;));<br><br>SELECT * FROM users;  # pwd 将不会显示&#x27;hsp&#x27; 只会有32位 对应的md5加密结果 c435a9810009800cafef7dce3b7844a6<br><br>SELECT * FROM users<br>WHERE `name` = &#x27;韩顺平&#x27; AND pwd = MD5(&#x27;hsp&#x27;);  # 定位查询<br><br><br><br># password() 加密函数   MySQL 数据库用户密码就是采用的 password 函数加密<br>SELECT PASSWORD(&#x27;hsp&#x27;) FROM DUAL;<br>SELECT LENGTH(PASSWORD(&#x27;hsp&#x27;)) FROM DUAL;<br># <br>SELECT * FROM mysql.user;   # mysql.user 表示 数据库.表 / 这样就可以不换库就查询其他库内容<br> <br><br></code></pre></div></td></tr></table></figure><p><img src="/2022/02/27/MySQL/image-20220310223106553.png" alt="image-20220310223106553"></p><h2 id="6-6-流程控制函数"><a href="#6-6-流程控制函数" class="headerlink" title="6.6 流程控制函数"></a>6.6 流程控制函数</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 1. 查询emp表, 如果是comm是null, 就显示0.0</span><br><span class="hljs-comment">// 2. 如果emp表的job是cleark 则显示 职员, 如果是manager 则显示经理, 如果是salesman 则显示销售人员, 其它正常显示</span><br></code></pre></div></td></tr></table></figure><table><thead><tr><th>IF( expr1, expr2,expr3)</th><th>如果expr1为TRUE, 则返回expr2, 否则返回expr3</th></tr></thead><tbody><tr><td>IFNULL(expr1,expr2)</td><td>如果expr1不为空, 则返回expr1, 否则返回expr2</td></tr><tr><td>SELECT CASE WHEN expr1 THEN expr2 WHEN expr3 THEN expr4 ELSE expr5</td><td>如果expr1为true, 则返回expr2, 如果expr3为true, 返回expr4否则返回expr5</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># <br>SELECT IF(TRUE, &#x27;北京&#x27;, &#x27;上海&#x27;) FROM DUAL;  #  北京<br>#<br>SELECT IFNULL(null, &#x27;jsp&#x27;) # jsp<br>SELECT IFNULL(&#x27;JACK&#x27;,&#x27;124&#x27;) # JACK<br>#<br>SELECT CASE WHEN TRUE THEN &#x27;你好&#x27; WHEN TRUE  THEN &#x27;不好&#x27; ELSE &#x27;淦&#x27;; # 你好<br><br># 1. <br>SELECT IF(com IS NULL, 0.0, comm);  # 判断 null 用 IS<br>SELECT IFNULL(comm,0.0) from emp;<br># 2. <br>SELECT CASE <br>WHEN job = &#x27;cleark&#x27;  # 特定的值用 = <br>THEN &#x27;职员&#x27;<br>WHEN job = &#x27;manager&#x27;<br>THEN &#x27;经理&#x27;<br>WHEN job = &#x27;salesman&#x27;<br>THEN &#x27;销售人员&#x27;<br>ELSE job<br>END   # END 必不可少<br>FROM　emp;<br></code></pre></div></td></tr></table></figure><p><strong>用户管理：</strong></p><p>　　<strong>1、新建用户：</strong></p><p>　　　　<strong>&gt;CREATE USER name IDENTIFIED BY ‘ssapdrow’;</strong></p><p>　　<strong>2、更改密码：</strong></p><p>　　　　<strong>&gt;SET PASSWORD FOR name&#x3D;PASSWORD(‘fdddfd’);</strong></p><p>　　<strong>3、权限管理</strong></p><p>　　　　<strong>&gt;SHOW GRANTS FOR name;   &#x2F;&#x2F;查看name用户权限</strong></p><p>　　　　<em><em>&gt;GRANT SELECT ON db_name.</em> TO name;　　　　&#x2F;&#x2F;给name用户db_name数据库的所有权限</em>*</p><p>　　　　<em><em>&gt;REVOKE SELECT ON db_name.</em> TO name;　　　　&#x2F;&#x2F;GRANT的反操作，去除权限；</em>*</p><p><strong>一、数据库操作：</strong>　</p><p>　　<strong>1、查看数据库：</strong></p><p>　　　　<strong>&gt;SHOW DATABASES;</strong></p><p>　　<strong>2、创建数据库：</strong></p><p>　　　　<strong>&gt;CREATE DATABASE db_name;　　&#x2F;&#x2F;db_name为数据库名</strong></p><p>　　<strong>3、使用数据库：</strong></p><p>　　　　<strong>&gt;USE db_name;</strong></p><p>　　<strong>4、删除数据库：</strong></p><p>　　　　<strong>&gt;DROP DATABASE db_name;</strong></p><p><strong>二、创建表：</strong></p><p>　　<strong>1、创建表：</strong></p><p>　　　　<strong>&gt;CREATE TABLE table_name(</strong></p><p>　　　　<strong>&gt;id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,　　　　&#x2F;&#x2F;id值，无符号、非空、递增——唯一性，可做主键。</strong></p><p>　　　　<strong>&gt;name VARCHAR(60) NOT NULL</strong></p><p>　　　　<strong>&gt;score TINYINT UNSIGNED NOT NULL DEFAULT 0,　　　　&#x2F;&#x2F;设置默认列值</strong></p><p>　　　　<strong>&gt;PRIMARY KEY(id)</strong></p><p>　　　　<strong>&gt;)ENGINE&#x3D;InnoDB　　　　&#x2F;&#x2F;设置表的存储引擎，一般常用InnoDB和MyISAM；InnoDB可靠，支持事务；MyISAM高效不支持全文检索</strong></p><p>　　　　<strong>&gt;DEFAULT charset&#x3D;utf8;　　&#x2F;&#x2F;设置默认的编码，防止数据库中文乱码</strong></p><p>　　　　<strong>如果有条件的创建数据表还可以使用  &gt;CREATE TABLE IF NOT EXISTS tb_name(……..</strong></p><p>　　<strong>2、复制表：</strong></p><p>　　　　<strong>&gt;CREATE TABLE tb_name2 SELECT * FROM tb_name;</strong></p><p>　　　　<strong>或者部分复制：</strong></p><p>　　　　<strong>&gt;CREATE TABLE tb_name2 SELECT id,name FROM tb_name;</strong></p><p>　　<strong>3、创建临时表：</strong></p><p>　　　　<strong>&gt;CREATE TEMPORARY TABLE tb_name(这里和创建普通表一样);</strong></p><p>　　<strong>4、查看数据库中可用的表：</strong></p><p>　　　　<strong>&gt;SHOW TABLES;</strong></p><p>　　<strong>5、查看表的结构：</strong></p><p>　　　　<strong>&gt;DESCRIBE tb_name;</strong></p><p>　　　　<strong>也可以使用：</strong></p><p>　　　　<strong>&gt;SHOW COLUMNS in tb_name; 　　　&#x2F;&#x2F;from也可以</strong></p><p>　　<strong>6、删除表：</strong></p><p>　　　　<strong>&gt;DROP [ TEMPORARY ] TABLE [ IF EXISTS ] tb_name[ ,tb_name2…….];</strong></p><p>　　　　<strong>实例：</strong></p><p>　　　　<strong>&gt;DROP TABLE IF EXISTS tb_name;</strong></p><p>　　<strong>7、表重命名：</strong></p><p>　　　　<strong>&gt;RENAME TABLE name_old TO name_new;</strong></p><p>　　　　<strong>还可以使用：</strong></p><p>　　　　<strong>&gt;ALTER TABLE name_old RENAME name_new;</strong></p><p><strong>三、修改表：</strong></p><p>　　<strong>1、更改表结构：</strong></p><p>　　　　<strong>&gt;ALTER TABLE tb_name ADD[CHANGE,RENAME,DROP] …要更改的内容…</strong></p><p>　　　　<strong>实例：</strong></p><p>　　　　<strong>&gt;ALTER TABLE tb_name ADD COLUMN address varchar(80) NOT NULL;</strong></p><p>　　　　<strong>&gt;ALTER TABLE tb_name DROP address;</strong></p><p>　　　　<strong>&gt;ALTER TABLE tb_name CHANGE score score SMALLINT(4) NOT NULL;</strong></p><p><strong>四、插入数据：</strong></p><p>　　<strong>1、插入数据：</strong></p><p>　　　　<strong>&gt;INSERT INTO tb_name(id,name,score)VALUES(NULL,’张三’,140),(NULL,’张四’,178),(NULL,’张五’,134);</strong></p><p>　　　　<strong>这里的插入多条数据直接在后边加上逗号，直接写入插入的数据即可；主键id是自增的列，可以不用写。</strong></p><p>　　<strong>2、插入检索出来的数据：</strong></p><p>　　　　<strong>&gt;INSERT INTO tb_name(name,score) SELECT name,score FROM tb_name2;</strong></p><p><strong>五、更新数据：</strong></p><p>　　<strong>1、指定更新数据：</strong></p><p>　　　　<strong>&gt;UPDATE tb_name SET score&#x3D;189 WHERE id&#x3D;2;</strong></p><p>　　　　<strong>&gt;UPDATE tablename SET columnName&#x3D;NewValue [ WHERE condition ]</strong></p><p><strong>六、删除数据：</strong></p><p>　　<strong>1、删除数据：</strong></p><p>　　　　<strong>&gt;DELETE FROM tb_name WHERE id&#x3D;3;</strong></p><p><strong>七、条件控制：</strong></p><p>　　<strong>1、WHERE 语句：</strong></p><p>　　　　<strong>&gt;SELECT * FROM tb_name WHERE id&#x3D;3;</strong></p><p>　　<strong>2、HAVING 语句：</strong></p><p>　　　　<strong>&gt;SELECT * FROM tb_name GROUP BY score HAVING count(*)&gt;2</strong></p><p>　　<strong>3、相关条件控制符：</strong> </p><p>　　　　<strong>&#x3D;、&gt;、&lt;、&lt;&gt;、IN(1,2,3……)、BETWEEN a AND b、NOT</strong></p><p>　　　　<strong>AND 、OR</strong></p><p>　　　　<strong>Linke()用法中    %  为匹配任意、  _  匹配一个字符（可以是汉字）</strong></p><p>　　　　<strong>IS NULL 空值检测</strong></p><p> <strong>八、MySQL的正则表达式：</strong></p><p>　　<strong>1、<a href="https://so.csdn.net/so/search?q=Mysql&spm=1001.2101.3001.7020">Mysql</a>支持REGEXP的正则表达式：</strong></p><p>　　　　<strong>&gt;SELECT * FROM tb_name WHERE name REGEXP ‘^[A-D]’  &#x2F;&#x2F;找出以A-D 为开头的name</strong></p><p>　　<strong>2、特殊字符需要转义。</strong></p><p> <strong>九、MySQL的一些函数：</strong></p><p>　　<strong>1、字符串链接——CONCAT()</strong></p><p>　　　　<strong>&gt;SELECT CONCAT(name,’&#x3D;&gt;’,score) FROM tb_name</strong></p><p>　　<strong>2、数学函数：</strong></p><p>　　　　<strong>AVG、SUM、MAX、MIN、COUNT；</strong></p><p>　　<strong>3、文本处理函数：</strong></p><p>　　　　<strong>TRIM、LOCATE、UPPER、LOWER、SUBSTRING</strong></p><p>　　<strong>4、运算符：</strong></p><p>　　　　**+、-、<em>、*</em></p><p>　　<strong>5、时间函数：</strong></p><p>　　　　<strong>DATE()、CURTIME()、DAY()、YEAR()、NOW()…..</strong></p><p> <strong>十、分组查询：</strong></p><p> 　<strong>1、分组查询可以按照指定的列进行分组：</strong></p><p>　　　　<strong>&gt;SELECT COUNT(<em>) FROM tb_name GROUP BY score HAVING COUNT(</em>)&gt;1;</strong></p><p>　　<strong>2、条件使用Having；</strong></p><p>　　<strong>3、ORDER BY 排序：</strong></p><p>　　　　<strong>ORDER BY DESC|ASC　　　　&#x3D;&gt;按数据的降序和升序排列</strong></p><p><strong>十一、UNION规则——可以执行两个语句（可以去除重复行）</strong></p><p> <strong>十二、全文检索——MATCH和AGAINST</strong></p><p>　　<strong>1、SELECT MATCH(note_text)AGAINST(‘PICASO’) FROM tb_name;</strong></p><p>　　<strong>2、InnoDB引擎不支持全文检索，MyISAM可以；</strong></p><p> <strong>十三、视图</strong></p><p>　　<strong>1、创建视图</strong></p><p>　　　　<strong>&gt;CREATE VIEW name AS SELECT * FROM tb_name WHERE ~~ ORDER BY ~~;</strong></p><p>　　<strong>2、视图的特殊作用：</strong></p><p>　　　　　　<strong>a、简化表之间的联结（把联结写在select中）；</strong></p><p>　　　　　　<strong>b、重新格式化输出检索的数据（TRIM，CONCAT等函数）；</strong></p><p>　　　　　　<strong>c、过滤不想要的数据（select部分）</strong></p><p>　　　　　　<strong>d、使用视图计算字段值，如汇总这样的值。</strong></p><p> <strong>十四、使用存储过程：</strong></p><p>　　<strong>个人理解，存储过程就是一个自定义函数，有局部变量参数，可传入参数，可以返回值，不过这语法够呆滞的~~~</strong></p><p>　　<strong>1、创建存储过程：</strong></p><p>　　　　<strong>&gt;CREATE PROCEDURE pro(</strong></p><p>　　　　<strong>&gt;IN num INT,OUT total INT)</strong></p><p>　　　　<strong>&gt;BEGIN</strong></p><p>　　　　<strong>&gt;SELECT SUM(score) INTO total FROM tb_name WHERE id&#x3D;num;</strong></p><p>　　　　<strong>&gt;END;</strong></p><p>　　　***<strong>这里的  IN (传递一个值给存储过程)，OUT（从存储过程传出一个值），INOUT（对存储过程传入、传出），INTO（保存变量）</strong></p><p>　　<strong>2、调用存储过程：</strong></p><p>　　　　<strong>&gt;CALL pro(13,@total)　　　　　　&#x2F;&#x2F;这里的存储过程两个变量，一个是IN一个是OUT，这里的OUT也是需要写上的，不写会出错</strong></p><p>　　　　<strong>&gt;SELECT @total　　　　　　　　　&#x2F;&#x2F;这里就可以看到结果了；</strong></p><p>　　<strong>3、存储过程的其他操作：</strong></p><p>　　　　<strong>&gt;SHOW PROCEDURE STATUS;　　　　　　&#x2F;&#x2F;显示当期的存储过程</strong></p><p>　　　　<strong>&gt;DROP PROCEDURE pro;　　　　　　　　　&#x2F;&#x2F;删除指定存储过程</strong></p><p><strong>十五、使用游标：</strong></p><p>　　<strong>对这个理解不是很懂，朋友多多指点哦~~~</strong></p><p>　　　<strong>1、游标的操作</strong></p><p>　　　　<strong>&gt;CREATE PROCEDURE pro()</strong></p><p>　　　　<strong>&gt;BEGIN</strong> </p><p>　　　　<strong>&gt;DECLARE ordername CURSOR FOR</strong></p><p>　　　　<strong>&gt;SELECT order_num FROM orders;</strong></p><p>　　　　<strong>&gt;END;</strong></p><hr><p>　　　　<strong>&gt;OPEN ordername;　　　　&#x2F;&#x2F;打开游标</strong></p><hr><p>　　　　<strong>&gt;CLOSE ordername;　　　　&#x2F;&#x2F;关闭游标</strong></p><p><strong>十六、触发器：</strong></p><p>　　<strong>触发器是指在进行某项指定操作时，触发触发器内指定的操作；</strong></p><p>　　<strong>1、支持触发器的语句有DELETE、INSERT、UPDATE,其他均不支持</strong></p><p>　　<strong>2、创建触发器：</strong></p><p>　　　　<strong>&gt;CREATE TRIGGER trig AFTER INSERT ON ORDERS FOR EACH ROW SELECT NEW.orser_name;</strong></p><p>　　　　<strong>&gt;INSERT语句，触发语句，返回一个值</strong></p><p>　　<strong>3、删除触发器</strong></p><p>　　　　<strong>&gt;DROP TRIGGER trig;</strong></p><p><strong>十七、语法整理：</strong></p><p>　　<strong>1、ALTER TABLE（修改表）</strong></p><p>　　　　<strong>ALTER TABLE table_name</strong></p><p>　　　　<strong>(　　ADD　　　　column　　datatype  　[ NULL | NOT NULL ]　　[ CONSTRAINTS ]</strong></p><p>　　　　　　 <strong>CHANGE　　column 　　datatype 　　COLUMNS　　[ NULL | NOT NULL ]　　 [ CONSTRAINTS ]</strong></p><p>　　　　　　 <strong>DROP　　　 column，</strong></p><p>　　　　　　　<strong>。。。。</strong></p><p>　　　　<strong>)</strong></p><p>　　<strong>2、COMMIT(处理事务)</strong></p><p>　　　　<strong>&gt;COMMIT;</strong></p><p> 　<strong>3、CREATE INDEX(在一个或多个列上创建索引)</strong></p><p>　　　　<strong>CREATE INDEX index_name ON tb_name (column [ ASC | DESC ] , …….);</strong></p><p> 　<strong>4、CREATE PROCEDURE (创建存储过程)</strong></p><p>　　　　<strong>CREATE PROCEDURE pro([ parameters ])</strong></p><p>　　　　<strong>BEGIN</strong></p><p>　　　　<strong>……..</strong></p><p>　　　　<strong>END</strong></p><p> 　<strong>5、CREATE TABLE(创建表)</strong></p><p>　　　　<strong>CREATE TABLE tb_name(</strong></p><p>　　　　<strong>column_name　　datetype　　[ NULL | NOT NULL ] 　[ condtraints]  ,</strong></p><p>　　　　<strong>column_name　　datetype　　[ NULL | NOT NULL ] 　[ condtraints]  ,</strong></p><p>　　　　<strong>…….</strong></p><p>　　　　<strong>PRIMARY KEY( column_name )</strong></p><p>　　　　<strong>)ENGINE&#x3D;[  InnoDB | MyiSAM ]DEFAULT CHARSET&#x3D;utf8 AUTO_INCREMENT&#x3D;1 ;</strong></p><p> 　<strong>6、CREATE USER(创建用户)</strong></p><p>　　　　<strong>CREATE USER user_name [ @hostname ] [ IDENTIFIED BY [ PASSWORD ] ‘pass_word’ ];</strong></p><p> 　<strong>7、CREATE VIEW （在一个或多个表上创建视图）</strong></p><p>　　　　<strong>CREATE [ OR REPLACE ] VIEW view_name AS SELECT。。。。。。</strong></p><p> 　<strong>8、DELETE (从表中删除一行或多行)</strong></p><p>　　　　<strong>DELETE FROM table_name [WHERE ……]</strong></p><p> 　<strong>9、DROP(永久删除数据库及对象，如视图、索引等)</strong></p><p>　　　　<strong>DROP DATEBASE | INDEX | PROCEDURE | TABLE | TRIGGER | USER | VIEW  name</strong></p><p> 　<strong>10、INSERT （给表添加行）</strong></p><p>　　　　<strong>INSERT INTO tb_name [ ( columns,…… ) ]  VALUES(value1,…………);</strong></p><p>　　　　<strong>使用SELECT值插入：</strong></p><p>　　　　<strong>INSERT INTO tb_name [ ( columns,…… ) ]</strong></p><p>　　　　<strong>SELECT columns , …….  FROM tb_name [ WHERE …… ] ;</strong></p><p>　　 <strong>11、ROLLBACK（撤销一个事务处理块）</strong></p><p>　　　　<strong>ROLLBACK [  TO  savapointname  ];</strong></p><p>　　 <strong>12、SAVEPOINT(为ROLLBACK设置保留点)</strong></p><p>　　　　<strong>SAVEPOINT sp1;</strong></p><p>　　 <strong>13、SELECT (检索数据，显示信息)</strong></p><p>　　　　<strong>SELECT column_name,…..FROM tb_name  [ WHERE ]  [ UNION ]   [ RROUP BY ]  [ HAVING ]  [ ORDER BY ]</strong></p><p> 　<strong>14、START TRANSACTION (一个新的事务处理块的开始)</strong></p><p>　　　　<strong>START TRANSACTION</strong></p><p>　　 <strong>15、UPDATE(更新一个表中的一行或多行)</strong></p><p>　　　　<strong>UPDATE tb_name SET column&#x3D;value,……[ where ]</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合</title>
    <link href="/2022/02/27/%E9%9B%86%E5%90%88/"/>
    <url>/2022/02/27/%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p> [TOC]</p><p>前面我们保存多个数据使用的是数组, 那么数组有不足的地方</p><ol><li>数组开始时必须指定, 而且一旦指定, 不能更改</li><li>保存的必须为同一类型的元素</li><li>使用数组进行增加&#x2F;删除元素时比较麻烦(循环拷贝)</li></ol><p>集合:</p><ol><li>可以动态保护任意多个对象, 使用比较方便!</li><li>提供了一系列方便的操作对象的方法: add, remove, set, get(增删改查)</li><li>使用集合添加, 删除新元素简洁方便</li></ol><h1 id="一-集合框架体系"><a href="#一-集合框架体系" class="headerlink" title="一 集合框架体系"></a>一 集合框架体系</h1><p>集合主要是两组(单列集合, 双列集合)</p><p>Collection 接口有两个重要的子接口 List 和 Set . 他们的实现子类都是单列集合(集合中放的都是单个元素)</p><p><img src="/2022/02/27/%E9%9B%86%E5%90%88/image-20220227160741796.png" alt="集合框架图"></p><p>Map 接口实现子类 是双列集合, 存放的是 K-V</p><p><img src="/2022/02/27/%E9%9B%86%E5%90%88/image-20220227155252945.png" alt="image-20220227155252945"></p><p><strong>上述两张图必须记住</strong></p><h1 id="二-Collection接口和常用方法"><a href="#二-Collection接口和常用方法" class="headerlink" title="二 Collection接口和常用方法"></a>二 Collection接口和常用方法</h1><h2 id="2-1-Collection接口实现类的特点"><a href="#2-1-Collection接口实现类的特点" class="headerlink" title="2.1 Collection接口实现类的特点"></a>2.1 Collection接口实现类的特点</h2><p><code>public interface Collection&lt;E&gt; extends Iterable&lt;E&gt;</code></p><ol><li>Collection实现子类可以存放多个元素, 每个元素可以是Object</li><li>有些Collection的实现类, 可以存放重复的元素, 有些不可以</li><li>有些Colleciton的实现类, 有些是存取有序的(List), 有些是无序的(Set)</li><li>Collction接口没有直接实现子类, 他是通过他的子接口Set 和 List 来实现的</li></ol><h2 id="2-2-Collection接口常用方法-以ArrayList来演示"><a href="#2-2-Collection接口常用方法-以ArrayList来演示" class="headerlink" title="2.2  Collection接口常用方法(以ArrayList来演示)"></a>2.2  Collection接口常用方法(以ArrayList来演示)</h2><h3 id="1-add-添加单个元素"><a href="#1-add-添加单个元素" class="headerlink" title="1. add( ):添加单个元素"></a>1. add( ):添加单个元素</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<span class="hljs-comment">//创建ArrayList, 用接口来接收</span><br><br>list.add(<span class="hljs-string">&quot;jack&quot;</span>); <span class="hljs-comment">// 可以放Object对象及其子类</span><br>list.add(<span class="hljs-number">10</span>); <span class="hljs-comment">//有自动装箱, int ==&gt; Integer</span><br>list.add(<span class="hljs-literal">true</span>);<br>System.out.println(list);<br><br><span class="hljs-comment">//结果 [jack, 10, true]</span><br></code></pre></div></td></tr></table></figure><h3 id="2-remove-删除指定元素"><a href="#2-remove-删除指定元素" class="headerlink" title="2. remove( ): 删除指定元素"></a>2. remove( ): 删除指定元素</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">// 删除第一个元素</span><br>list.remove(<span class="hljs-string">&quot;jack&quot;</span>); <span class="hljs-comment">// 删除jack元素, 不存在也不报错</span><br>list.remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">10</span>)); <span class="hljs-comment">//删除元素10</span><br></code></pre></div></td></tr></table></figure><h3 id="3-contains-查找元素是否存在-返回boolean值"><a href="#3-contains-查找元素是否存在-返回boolean值" class="headerlink" title="3. contains( ): 查找元素是否存在, 返回boolean值"></a>3. contains( ): 查找元素是否存在, 返回boolean值</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.contains(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">true</span>));<br></code></pre></div></td></tr></table></figure><h3 id="4-size-返回元素个数"><a href="#4-size-返回元素个数" class="headerlink" title="4. size( ): 返回元素个数"></a>4. size( ): 返回元素个数</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.size();<br></code></pre></div></td></tr></table></figure><h3 id="5-isEmpty-判断是否为空-返回boolean值"><a href="#5-isEmpty-判断是否为空-返回boolean值" class="headerlink" title="5. isEmpty( ): 判断是否为空, 返回boolean值"></a>5. isEmpty( ): 判断是否为空, 返回boolean值</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.isEmpty();<br></code></pre></div></td></tr></table></figure><h3 id="6-clear-清空"><a href="#6-clear-清空" class="headerlink" title="6. clear( ): 清空"></a>6. clear( ): 清空</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.clear();<br></code></pre></div></td></tr></table></figure><h3 id="7-addAll-添加多个元素"><a href="#7-addAll-添加多个元素" class="headerlink" title="7.addAll( ): 添加多个元素"></a>7.addAll( ): 添加多个元素</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.addAll(list01); <span class="hljs-comment">//将集合list01加入到集合list</span><br></code></pre></div></td></tr></table></figure><h3 id="8-containsAll-查找多个元素是否都存在"><a href="#8-containsAll-查找多个元素是否都存在" class="headerlink" title="8.containsAll( ): 查找多个元素是否都存在"></a>8.containsAll( ): 查找多个元素是否都存在</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.containsAll(list01); <span class="hljs-comment">//判断集合list01是否是list的子集, 返回boolean值</span><br></code></pre></div></td></tr></table></figure><h3 id="9-removeAll-删除子集"><a href="#9-removeAll-删除子集" class="headerlink" title="9. removeAll( ): 删除子集"></a>9. removeAll( ): 删除子集</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.removeAll(list01);  <span class="hljs-comment">// 删除list的子集list01</span><br></code></pre></div></td></tr></table></figure><h2 id="2-3-Collection接口遍历元素方式"><a href="#2-3-Collection接口遍历元素方式" class="headerlink" title="2.3 Collection接口遍历元素方式"></a>2.3 Collection接口遍历元素方式</h2><h3 id="2-3-1-使用Iterator-迭代器"><a href="#2-3-1-使用Iterator-迭代器" class="headerlink" title="2.3.1 使用Iterator(迭代器)"></a>2.3.1 使用Iterator(迭代器)</h3><ul><li>基本介绍</li></ul><ol><li>Iterator对象称为迭代器, 主要用遍历Collection 集合中的元素</li><li>所有实现了Collection接口的集合类都有一个iterator( ) 方法, 用于返回一个实现了Iterator接口的对象, 即可以返回一个迭代器</li><li>Iterator的结构</li><li>Iterator 仅用于遍历集合, Iterator本身并不存放对象</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> list.iterator(); <span class="hljs-comment">//得到一个集合的迭代器</span><br><span class="hljs-comment">//hasNext(): 判断是否还有下一个元素</span><br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>    <span class="hljs-comment">//next():指针下移, 将下移以后所指元素返回</span><br>    System.out.println(iterator.next());<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>在调用it.next()方法之前必须要调用it.hasNext()进行检测. 若不调用, 且下一条记录无效, 直接调用it.next()会抛出NoSuchElementException</strong></p><h3 id="2-3-2-增强for循环"><a href="#2-3-2-增强for循环" class="headerlink" title="2.3.2 增强for循环"></a>2.3.2 增强for循环</h3><p>简化版本的迭代器遍历. IDEA快捷键: 输入大写 i</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">for</span>(Object o : list)&#123;<br>    System.out.println(o);<br>&#125;<br><span class="hljs-comment">//底层原理是用的迭代器</span><br></code></pre></div></td></tr></table></figure><h1 id="三-List接口和常用类"><a href="#三-List接口和常用类" class="headerlink" title="三 List接口和常用类"></a>三 List接口和常用类</h1><ol><li>List集合类中元素有序, 且可重复</li><li>List集合中的每个元素都有其对应的顺序索引, 即支持索引</li><li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置, 可以根据序号存取容器中的元素</li><li>JDK API中List接口的实现类有: ArrayList, Vector, LinkedList<h2 id="3-1-List接口常用方法"><a href="#3-1-List接口常用方法" class="headerlink" title="3.1 List接口常用方法"></a>3.1 List接口常用方法</h2><h3 id="3-1-1-void-add-int-index-Object-ele"><a href="#3-1-1-void-add-int-index-Object-ele" class="headerlink" title="3.1.1 void add(int index, Object ele)"></a>3.1.1 void add(int index, Object ele)</h3></li></ol><p>在index位置<strong>插入</strong>ele元素</p><h3 id="3-1-2-boolean-addAll-int-index-Collection-eles"><a href="#3-1-2-boolean-addAll-int-index-Collection-eles" class="headerlink" title="3.1.2 boolean addAll(int index, Collection eles)"></a>3.1.2 boolean addAll(int index, Collection eles)</h3><p>从index位置开始将eles的元素都<strong>添加</strong>进来</p><h3 id="3-1-3-Object-get-int-index"><a href="#3-1-3-Object-get-int-index" class="headerlink" title="3.1.3 Object get(int index)"></a>3.1.3 Object get(int index)</h3><p><strong>获取指定index位置</strong>的元素</p><h3 id="3-1-4-int-indexOf-Object-obj"><a href="#3-1-4-int-indexOf-Object-obj" class="headerlink" title="3.1.4 int indexOf(Object obj)"></a>3.1.4 int indexOf(Object obj)</h3><p>返回obj在集合中<strong>首次出现的位置</strong></p><h3 id="3-1-5-Object-remove-int-index"><a href="#3-1-5-Object-remove-int-index" class="headerlink" title="3.1.5 Object remove(int index)"></a>3.1.5 Object remove(int index)</h3><p><strong>移除</strong>指定的index位置的元素</p><h3 id="3-1-6-Object-set-int-index-Object-obj"><a href="#3-1-6-Object-set-int-index-Object-obj" class="headerlink" title="3.1.6 Object set(int index, Object obj)"></a>3.1.6 Object set(int index, Object obj)</h3><p>将index位置的元素<strong>替换</strong>为obj</p><h3 id="3-1-7-List-subList-int-fromIndex-int-tolndex"><a href="#3-1-7-List-subList-int-fromIndex-int-tolndex" class="headerlink" title="3.1.7 List subList(int fromIndex, int tolndex)"></a>3.1.7 List subList(int fromIndex, int tolndex)</h3><p>返回从fromIndex到toIndex位置的<strong>子集</strong>和</p><h2 id="3-2-ArrayList底层结构和源码分析"><a href="#3-2-ArrayList底层结构和源码分析" class="headerlink" title="3.2 ArrayList底层结构和源码分析"></a>3.2 ArrayList底层结构和源码分析</h2><h3 id="3-2-1-注意事项"><a href="#3-2-1-注意事项" class="headerlink" title="3.2.1 注意事项"></a>3.2.1 注意事项</h3><ol><li>permits all elements, including null, ArrayList 可以加入null, 并且可加入多个</li><li>ArrayList 是由数组来实现数据存储的</li><li>ArrayList 基本等同于Vector, 除了ArrayList 是线程不安全(执行效率高, 源码没有<code>synchronized</code>修饰) , 在多线程情况下, 不建议使用ArrayList</li></ol><h3 id="3-2-2-ArrayList的底层操作机制源码分析"><a href="#3-2-2-ArrayList的底层操作机制源码分析" class="headerlink" title="3.2.2 ArrayList的底层操作机制源码分析"></a>3.2.2 ArrayList的底层操作机制源码分析</h3><ol><li>ArrayList中维护了一个Object类型的数组elementData. <code>transient Object[] elementData;</code>&#x2F;&#x2F;transient修饰后的对象不会被序列化</li><li>当创建ArrayList对象时, 如果使用的是无参构造器, 则初始elementData容量为0, 第一次添加扩容到10, 如果再次扩容, 则扩容至1.5倍</li><li>如果使用的是指定大小的构造器, 则初始化为指定大小, 如果扩容,直接扩容至1.5倍(容量满了自动扩容)</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<span class="hljs-comment">//默认0</span><br>               <span class="hljs-comment">//new ArrayList(8); //初始化大小为8</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>    list.add(i);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">11</span>; i &lt;= <span class="hljs-number">15</span> ; i++) &#123;<span class="hljs-comment">//大于10扩容至15</span><br>    list.add(i);<br>&#125;<br>list.add(<span class="hljs-number">100</span>);<br>list.add(<span class="hljs-number">200</span>);<br>list.add(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">for</span> (Object o :list) &#123;<br>    System.out.println(o);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="3-3-Vector底层结构和源码剖析"><a href="#3-3-Vector底层结构和源码剖析" class="headerlink" title="3.3 Vector底层结构和源码剖析"></a>3.3 Vector底层结构和源码剖析</h2><ol><li>Vector类的定义说明</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector</span>&lt;E&gt;<br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable<br></code></pre></div></td></tr></table></figure><ol start="2"><li>Vector底层也是一个对象数组, protected Object[] elementData;</li><li>Vector 是线程同步的, 即线程安全, Vector类的操作方法带有<code>synchronized</code></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= elementCount)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(index);<br><br>    <span class="hljs-keyword">return</span> elementData(index);<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>在开发中, 需要线程同步安全时, 考虑使用Vector</li></ol><h2 id="3-4-Vector-和-ArrayList-的比较"><a href="#3-4-Vector-和-ArrayList-的比较" class="headerlink" title="3.4 Vector 和 ArrayList 的比较"></a>3.4 Vector 和 ArrayList 的比较</h2><table><thead><tr><th></th><th>底层结构</th><th>版本</th><th>线程安全(同步) 雄安率</th><th>扩容倍速</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>jdk1.2</td><td>不安全, 效率高</td><td>1. 有参1.5倍    2. 无参, 第一次10, 第二次1.5倍扩容</td></tr><tr><td>Vector</td><td>可变数组</td><td>jdk1.0</td><td>安全, 效率不高</td><td>1. 有参2倍      2. 无参 , 默认10, 满了就2倍扩容</td></tr></tbody></table><h2 id="3-5-LinkedList-底层结构"><a href="#3-5-LinkedList-底层结构" class="headerlink" title="3.5 LinkedList 底层结构"></a>3.5 LinkedList 底层结构</h2><ol><li>LinkedList 底层实现了<strong>双向链表</strong>和<strong>双端队列</strong>特点</li><li>可以添加任意元素(元素可以重复), 包括null</li><li>线程不安全, 没有实现同步</li></ol><ul><li>LinkedList底层操作机制<ol><li>LinkedList底层维护了一个双向链表</li><li>LinkedList中维护了两个属性first 和 last 分别指向 首个节点和尾节点</li><li>每个节点(Node对象), 里面又维护了prev, next, item三个属性, 其中通过prev指向前一个, next指向下一个,  item 存放值</li><li>所以LinkedList 的元素的添加和删除, 不是通过数组完成的, 相对来说效率较高</li></ol></li></ul><p>练习: 模拟一个简单的双向链表</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.collection_;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;tom&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">hsp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;hsp&quot;</span>);<br>        jack.next = tom;<br>        tom.pre = jack;<br>        tom.next = hsp;<br>        hsp.pre = tom;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> jack;<br><br>        <span class="hljs-keyword">while</span>(head != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(head);<br>            head = head.next;<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-keyword">public</span> Object item;<span class="hljs-comment">//存放数据</span><br>    <span class="hljs-keyword">public</span> Node next;  <span class="hljs-comment">// 下一个节点</span><br>    <span class="hljs-keyword">public</span> Node pre;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.item = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node name = &quot;</span> + item;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>LinkedList 增删改查</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">linkedList.add(<span class="hljs-number">234</span>);<span class="hljs-comment">// 添加一个元素</span><br>linkedList.remove();<span class="hljs-comment">//默认删除第一个</span><br>linkedList.remove(<span class="hljs-number">2</span>);<span class="hljs-comment">// 删除第3个元素</span><br>linkedList.remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>));<span class="hljs-comment">// 删除指定元素</span><br><br>linkedList.set(<span class="hljs-number">2</span>, <span class="hljs-number">23</span>);<span class="hljs-comment">// 将第3个元素修改为23</span><br>linkedList.get(<span class="hljs-number">3</span>); <span class="hljs-comment">// 得到第4个对象</span><br></code></pre></div></td></tr></table></figure><h2 id="3-6-ArrayList-和-LinkedList-比较"><a href="#3-6-ArrayList-和-LinkedList-比较" class="headerlink" title="3.6 ArrayList 和 LinkedList 比较"></a>3.6 ArrayList 和 LinkedList 比较</h2><table><thead><tr><th></th><th>底层结构</th><th>增删效率</th><th>改查效率</th><th>线程安全</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>较低    数组扩容</td><td>较高</td><td>不安全</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>较高,    通过链表追加</td><td>较低</td><td>不安全  不同步</td></tr></tbody></table><p>大部分情况都是查询操作, 因此大部分使用的是ArrayList</p><h1 id="三-Set-接口和常用类"><a href="#三-Set-接口和常用类" class="headerlink" title="三 Set 接口和常用类"></a>三 Set 接口和常用类</h1><h2 id="3-1-Set接口和常用方法"><a href="#3-1-Set接口和常用方法" class="headerlink" title="3.1 Set接口和常用方法"></a>3.1 Set接口和常用方法</h2><ol><li>无序(添加和取出的顺序不一致), 没有索引</li><li>不允许重复元素, 最多包含一个null</li><li>JDK API 中Set接口的实现类有<ol><li>HashSet</li><li>TreeSet</li><li>…</li></ol></li><li>常用方法, 常用方法和Collection一致</li><li>遍历<ol><li>可以使用迭代器</li><li>增强for循环</li><li>不可以使用索引</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">      <span class="hljs-comment">//以Set接口的实现类 HashSet来将讲解set方法</span><br>      <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>      set.add(<span class="hljs-string">&quot;jone&quot;</span>);<br>      set.add(<span class="hljs-string">&quot;jone&quot;</span>);<span class="hljs-comment">// 不存放重复元素</span><br>      set.add(<span class="hljs-string">&quot;hsp&quot;</span>);<br>      set.add(<span class="hljs-string">&quot;jone&quot;</span>);<br>      set.add(<span class="hljs-string">&quot;null&quot;</span>);<br>      <span class="hljs-comment">//HashSet -&gt; 数组 + 链表</span><br>      System.out.println(set);<span class="hljs-comment">//存放数据无序, 输入输出顺序不一致, 但输出顺序固定</span><br>set.remove(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 删除</span><br><br><br>      <span class="hljs-comment">//遍历</span><br>      <span class="hljs-comment">//方式1 迭代器</span><br>      <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br><br>      <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>          <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span>  iterator.next();<br>          System.out.println(<span class="hljs-string">&quot;迭代器 = &quot;</span> + next);<br>      &#125;<br>      <span class="hljs-comment">//方式2 增强for ---&gt; 本质就是迭代器</span><br>      <span class="hljs-keyword">for</span> (Object o :set) &#123;<br>          System.out.println(<span class="hljs-string">&quot;增强for = &quot;</span> + o);<br>      &#125;<br>      <br>      <span class="hljs-comment">//Set接口对象不能用索引来获取</span><br></code></pre></div></td></tr></table></figure><h2 id="3-2-HashSet-底层机制"><a href="#3-2-HashSet-底层机制" class="headerlink" title="3.2 HashSet 底层机制"></a>3.2 HashSet 底层机制</h2><p><strong>HashSet底层是HashMap</strong>, HashMap底层是(数组 + 链表 —&gt; 红黑树),               数组 + 链表 &#x3D; 邻接表</p><ul><li>添加一个元素时, 先得到hash值, 会转成索引值</li><li>找到存储数据表table, 看这个索引位置是否已经存放的有元素</li><li>如果没有, 直接加入, 如果有, 调用equals比较, 如果相同, 就放弃添加, 如果不相同, 则添加到最后</li><li>在java中, 如果一条链表的元素个数超过TREEIFY_THRESHOLD(默认为8), 并且table的大小 &gt;&#x3D; MIN_TREEIF_CAPACITY(默认64), 就会进行树化(红黑树)</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashset</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>    hashset.add(<span class="hljs-string">&quot;java&quot;</span>);<br>    hashset.add(<span class="hljs-string">&quot;php&quot;</span>);<br>    hashset.add(<span class="hljs-string">&quot;java&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;set = &quot;</span> + hashset);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br>    <span class="hljs-comment">//源码解读</span><br>    <span class="hljs-number">1.</span> 执行...<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br>    <span class="hljs-number">2.</span> 执行...<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br>    <span class="hljs-number">3.</span> 执行...<br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<span class="hljs-comment">//key=添加值, value = PRESENT = private final Object(始终不变)</span><br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br>    <span class="hljs-number">4.</span> 执行...<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<span class="hljs-comment">//得到key对应的hash值</span><br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<span class="hljs-comment">//无符号右移16位</span><br>&#125;<br>    <span class="hljs-number">5.</span> 执行...<br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<span class="hljs-comment">//   定义辅助变量</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<span class="hljs-comment">//table 是 HashMap的一个数组, Node[]类型</span><br>    <span class="hljs-comment">//if 如果当前table 是null 或者 大小为 0 , 就第一次扩容 16</span><br>        n = (tab = resize()).length;<br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>    <span class="hljs-comment">//if  根据key得到的Hash值, 计算该key应该存放到table表的哪个位置, 并赋给辅助变量p</span><br>    <span class="hljs-comment">// 判断p是否为空   空: 表示还没有存放过元素, 创建一个Node, 放在tab[i]</span><br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//开发技巧: 定义变量,在需要的局部变量来创建</span><br>        Node&lt;K,V&gt; e; K k;<span class="hljs-comment">// 辅助变量</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;     <span class="hljs-comment">//如果当前索引位置对应的链表的第一个元素 和 准备添加的key 的Hash值一样,</span><br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))  <span class="hljs-comment">//并且满足待加入key与p指向的node节点key是同一个对象, 或者</span><br>            e = p;                                                 <span class="hljs-comment">//内容相同</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)  <span class="hljs-comment">//如果是个红黑树</span><br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//在转换成红黑树时,判断表是否小于64, 大于64才转红黑树</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol><li>HashSet底层是HashMap</li><li>添加一个元素时, 先得到hash值, 会转成索引值</li><li>找到存储数据表table, 看这个索引位置是否已经存放的元素</li><li>如果没有, 直接加入</li><li>如果有, 调用equals比较(由程序员指定), 如果相同则放弃添加, 如果不相同添加到最后</li><li>在java中, 如果一条链表的元素个数超过TREEIFY_THRESHOLD(默认为8), 并且table的大小 &gt;&#x3D; MIN_TREEIF_CAPACITY(默认64), 就会进行树化(红黑树)</li></ol><blockquote><ol><li>HashSet底层是HashMap, 第一次添加时, table 数组扩容到16, 临界值(threshold) 是16*加载因子(loadFactor) 是0.75 &#x3D; 12</li><li>如果table数组使用到了临界值12, 就会扩容到16*2 &#x3D; 32, 新的临界值就是32 * 0.75 &#x3D;24, 以此类推  <strong>size</strong></li><li>在Java8中, 如果一条链表的元素个数到达TREEIFY_THRESHOLD(默认是8,大于8), &amp;&amp;并且table的大小&gt;&#x3D; MIN_TREEIFY_CAPACITY(默认64), 就会进行树化(红黑树), 否则仍然采用数组扩容机制</li></ol></blockquote><h2 id="3-3-LinkedHashSet"><a href="#3-3-LinkedHashSet" class="headerlink" title="3.3 LinkedHashSet"></a>3.3 LinkedHashSet</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;E&gt;<br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashSet</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable &#123;<br></code></pre></div></td></tr></table></figure><ol><li>LinkedHashSet 是 HashSet的一个子类</li><li>LinkedHashSet 底层是一个LinkedHashMap, 底层维护了一个 数组+ 双向链表</li><li>LinkedHashSet 是根据元素的hashCode 值来决定元素的存储位置, 同时使用链表维护元素的次序(图),  使得元素看起来是以插入顺序保存的</li><li>不允许添加重复元素</li></ol><blockquote><p>说明:</p><ol><li>在LinkedHashSet中维护了一个hash表和双向链表(LinkedHashSet有head和tail)</li><li>每一个节点有before 和after 属性, 这样可以形成双向链表</li><li>在添加一个元素时, 先求hash值, 在求索引时, 确定该元素在table 的位置, 然后将添加的元素加入到双向链表(如果已经存在, 不添加[原则和hashset一样])</li><li>tail.next &#x3D; newElement &#x2F;&#x2F; 示意代码</li><li>newElement.pre &#x3D; tail</li><li>tail &#x3D; newElement;</li><li>这样的话, 遍历LinkedHashSet 也能确保插入顺序和遍历顺序一致</li></ol></blockquote><ul><li>LinkedHashSet 加入顺序和取出顺序一致</li><li>LinkedHashSet 底层维护的是一个LinkedHashMap(HashMap子类)</li><li>底层结构(table 数组+ 双向链表)</li><li>添加第一次时, 直接将数组table扩容到16, 存放的节点是LinkedHashMap$Entry类型, table 的类型是HashMap$Node</li><li>数组是 HashMap$Node[ ] ,  存放的数据是 LinkedHashMap$Entry 类型   (数组多态)</li></ul><h1 id="四-Map接口和常用方法-Map相对更实用"><a href="#四-Map接口和常用方法-Map相对更实用" class="headerlink" title="四 Map接口和常用方法[Map相对更实用]"></a>四 Map接口和常用方法[Map相对更实用]</h1><h2 id="4-1-Map-接口实现类的特点"><a href="#4-1-Map-接口实现类的特点" class="headerlink" title="4.1 Map 接口实现类的特点"></a>4.1 Map 接口实现类的特点</h2><ol><li>Map与Collection并列存在(即两者无关系).    用于保存具有映射关系的数据:  Key - value   即输入的时候要输入       key和value</li><li>Map中的Key 和value 可以是任何引用类型的数据, 会封装到HashMap$Node对象中</li><li>Map中的key 不允许重复, 原因与HashSet一样</li><li>Map中的value 可以重复</li><li>Map中的key可以为null, value 也可以为null, 注意key为null, 只能有一个, value为null 可以多个</li><li>常用的String类作为Map的key</li><li>key 和 value 之间存在单向一对一关系, 即通过指定的key总能找到对应的value</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    map.put(<span class="hljs-string">&quot;No.1&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//k-v</span><br>    map.put(<span class="hljs-string">&quot;No.2&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//无序</span><br>    map.put(<span class="hljs-string">&quot;No.3&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//不同的key, 相同的value可以加进去</span><br>    map.put(<span class="hljs-string">&quot;No.1&quot;</span>,<span class="hljs-string">&quot;张三丰&quot;</span>);<span class="hljs-comment">//不允许重复, 相同的key,直接替换</span><br>    map.put(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>    map.put(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;abc&quot;</span>);  <span class="hljs-comment">// key只能有一个null</span><br>    map.put(<span class="hljs-string">&quot;No.4&quot;</span>, <span class="hljs-literal">null</span>);<span class="hljs-comment">//value 为null可以有多个</span><br>   <span class="hljs-comment">// map.put(&quot;No.1&quot;,&quot;韩顺平&quot;);</span><br>    System.out.println(map);<br>    <span class="hljs-comment">//通过get 方法, 传入key, 会返回对应的value</span><br>    System.out.println(map.get(<span class="hljs-string">&quot;No.1&quot;</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="8"><li>Map存放数据的key-value示意图, 一对k-v 是放在一个Node中的, 有因为Node实现了Entry接口,</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-number">1.</span> k-v 最后是 <span class="hljs-type">HashMap$Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> newNode(hash, key, value, <span class="hljs-literal">null</span>);<br><span class="hljs-number">2.</span> k-v 为了方便程序员的遍历, 还会创建 EntrySet 集合, 该集合存放的元素的类型是Entry, 而一个Entry 对象就有key 和 value<br>    EntrySet&lt;Entry&lt;K, V&gt;&gt;<span class="hljs-comment">//引用指向</span><br>    EntrySet中, 定义的类型是Map.Entry(编译类型), 但实际上存放的还是 HashMap$Node(运行类型)<br>    这是因为HashMap$Node <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry<br></code></pre></div></td></tr></table></figure><p><strong>HashMap$Node对象 (1<del>n对 k-v )   ——转换——-&gt; Entry类 对象(1</del>n个Entry对象) ———存放———&gt; 1个EntrySet集合: 方便程序员处理数据</strong></p><p>table就是HashMap$Node数组</p><h2 id="4-2-Map接口的常用方法"><a href="#4-2-Map接口的常用方法" class="headerlink" title="4.2 Map接口的常用方法"></a>4.2 Map接口的常用方法</h2><ol><li>put</li><li>remove</li><li>get</li><li>size</li><li>isEmpty</li><li>keySet() &#x2F;&#x2F; 返回key的set对象引用</li><li>clear</li><li>containsKey: 查找key是否存在</li></ol><h2 id="4-3-Map接口遍历方法"><a href="#4-3-Map接口遍历方法" class="headerlink" title="4.3 Map接口遍历方法"></a>4.3 Map接口遍历方法</h2><ol><li>containsKey: 查找key 是否存在</li><li>keySet: 获取所有的key</li><li>entrySet( ): 获取所有关系</li><li>values: 获取所有的值value</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;No.1&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//k-v</span><br>        map.put(<span class="hljs-string">&quot;No.2&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//无序</span><br>        map.put(<span class="hljs-string">&quot;No.3&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//不同的key, 相同的value可以加进去</span><br>        map.put(<span class="hljs-string">&quot;No.1&quot;</span>,<span class="hljs-string">&quot;张三丰&quot;</span>);<span class="hljs-comment">//不允许重复, 相同的key,直接替换</span><br>        map.put(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>        map.put(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;abc&quot;</span>);  <span class="hljs-comment">// key只能有一个null</span><br>        map.put(<span class="hljs-string">&quot;No.4&quot;</span>, <span class="hljs-literal">null</span>);<span class="hljs-comment">//value 为null可以有多个</span><br>       <span class="hljs-comment">// map.put(&quot;No.1&quot;,&quot;韩顺平&quot;);</span><br>        System.out.println(map);<br>        <span class="hljs-comment">//通过get 方法, 传入key, 会返回对应的value</span><br>        System.out.println(map.get(<span class="hljs-string">&quot;No.1&quot;</span>));<br><br>        <span class="hljs-comment">//第一组: 先取出所有的key, 再取出key对应的value</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> map.keySet();<br><br>        <span class="hljs-comment">//方式一</span><br>        System.out.println(<span class="hljs-string">&quot;====方式1====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object o :key) &#123;<br>            System.out.println(o + <span class="hljs-string">&quot;-&quot;</span> + map.get(o));<br>        &#125;<br><br>        <span class="hljs-comment">//方式二</span><br>        System.out.println(<span class="hljs-string">&quot;====方式2====&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> key.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span>  iterator.next();<br>            System.out.println(o + <span class="hljs-string">&quot;-&quot;</span> + map.get(o));<br><br>        &#125;<br>        <span class="hljs-comment">//第二组: values</span><br>        System.out.println(<span class="hljs-string">&quot;====方式1====&quot;</span>);<br>        <span class="hljs-comment">//取出所有value</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br>        <span class="hljs-comment">//1 迭代器, 增强for</span><br><br>        <span class="hljs-comment">//第三组: 通过EntrySet 来获取k-v</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.entrySet();<br>        <span class="hljs-comment">//增强for</span><br>        <span class="hljs-keyword">for</span> (Object entry :set) &#123;<br>            <span class="hljs-comment">//将entry转换为Map.Entry, 向下转型</span><br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry) entry;<br>            System.out.println(m.getKey() + <span class="hljs-string">&quot;====&quot;</span> + m.getValue());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;3-迭代器&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator1</span> <span class="hljs-operator">=</span> set.iterator();<br>        <span class="hljs-keyword">while</span> (iterator1.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span>  iterator1.next();<br>           <span class="hljs-comment">// System.out.println(next.getClass());</span><br>            <span class="hljs-comment">//向下转型</span><br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry)next;<br>            System.out.println(m.getKey()+ <span class="hljs-string">&quot;==00==&quot;</span> + m.getValue());<br>        &#125;<br>    &#125;<br><br>总结: <span class="hljs-number">1</span> keySet() 返回所有key<br>      <span class="hljs-number">2</span> entrySet() 返回所有k-v对, &lt;---Map.Entry<br></code></pre></div></td></tr></table></figure><h2 id="4-4-HashMap小结"><a href="#4-4-HashMap小结" class="headerlink" title="4.4 HashMap小结"></a>4.4 HashMap小结</h2><ol><li>Map接口的常用实现类, HashMap, Hashtable, 和 Properties</li><li><strong>HashMap  是 Map 接口使用频率最高的实现类</strong></li><li>HashMap 是以key-value 对的方式来存储数据(HashMap$Node类型)</li><li>key不能重复, 但是值可以重复, 允许使用null键和null值</li><li>如果添加相同的key, 则会覆盖原来的k-v</li><li>与HashSet一样, 不保证映射顺序, 因为底层是以hash表的方式来存储的(HashMap底层是  数组+ 链表 + 红黑树)</li><li>HashMap 没有实现同步, 因此是线程不安全的, 没有进做同步互斥的操作, 无synchronized关键字</li></ol><h2 id="4-5-Hashtable-的基本介绍"><a href="#4-5-Hashtable-的基本介绍" class="headerlink" title="4.5 Hashtable 的基本介绍"></a>4.5 Hashtable 的基本介绍</h2><ol><li>存放的元素是键值对: 即 k-v</li><li><strong>Hashtable的键和值都不能为null</strong>, 否则会抛出空指针异常</li><li><strong>Hashtable使用方法基本上和HashMap一样</strong></li><li>HashTable 是线程安全的, HashMap是是线程不安全的</li><li>底层有一个Hashtable$Entry[ ] 数组 初始化大小为11 ——–&gt; table表</li><li>临界值 &#x3D; 11 * 0.75 &#x3D; 8 (向下取整)</li><li>键值对放在一个Entry对象中, 这个对象链接到table表中</li><li>数组扩容  &#x3D;  原容量  &lt;&lt; 2 + 1</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 测试用例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashTable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>        hashTable.put(<span class="hljs-string">&quot;No.1&quot;</span>, <span class="hljs-string">&quot;4132&quot;</span>);<br><span class="hljs-comment">//        hashTable.put(null, &quot;4132&quot;);//NullPointerException</span><br><span class="hljs-comment">//        hashTable.put(&quot;No.2&quot;, null);//NullPointerException</span><br>        hashTable.put(<span class="hljs-string">&quot;No.3&quot;</span>, <span class="hljs-string">&quot;4132&quot;</span>);<br>        hashTable.put(<span class="hljs-string">&quot;No.4&quot;</span>, <span class="hljs-string">&quot;45254&quot;</span>);<br>        hashTable.put(<span class="hljs-string">&quot;No.5&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<span class="hljs-comment">//</span><br>        hashTable.put(<span class="hljs-string">&quot;No.6&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<span class="hljs-comment">//</span><br>        hashTable.put(<span class="hljs-string">&quot;No.7&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<span class="hljs-comment">//</span><br>        hashTable.put(<span class="hljs-string">&quot;No.8&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<span class="hljs-comment">//</span><br>        hashTable.put(<span class="hljs-string">&quot;No.9&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<span class="hljs-comment">// &gt;= 8 扩容</span><br>        hashTable.put(<span class="hljs-string">&quot;No.10&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<br>        hashTable.put(<span class="hljs-string">&quot;No.3&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<br>        hashTable.put(<span class="hljs-string">&quot;No.3&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<br>        hashTable.put(<span class="hljs-string">&quot;No.3&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<br>        System.out.println(hashTable);<br><br>    &#125;<br></code></pre></div></td></tr></table></figure><table><thead><tr><th></th><th>版本</th><th>线程安全(同步)</th><th>效率</th><th>允许null键, null值</th></tr></thead><tbody><tr><td>HashMap</td><td>1.2</td><td>不安全</td><td>高</td><td>可以</td></tr><tr><td>Hashtable</td><td>1.0</td><td>安全</td><td>较低</td><td>不可以</td></tr></tbody></table><p>HashMap没有对并发操作设防, 因此效率更高</p><h3 id="4-5-1-Properties"><a href="#4-5-1-Properties" class="headerlink" title="4.5.1 Properties"></a>4.5.1 Properties</h3><ol><li>Properties 类继承自Hashtable类并且实现了Map接口, 也是使用一种键值对的形式来保存数据</li><li>它的使用特点和Hashtable类似</li><li>Properties 还可以用于 从 XXX.properties文件中, 加载数据到Properties对象, 并进行读取和修改</li><li>说明: 工作后  xxx.properties 文件常作为配置文件,  涉及到IO流的知识</li><li><a href="https://www.cnblogs.com/xudong-bupt/p/3758136.html">Java 读写Properties配置文件</a></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">110</span>);<span class="hljs-comment">//增加</span><br>    <span class="hljs-comment">//properties.put(null,null);//不能为null k-v 对</span><br>    properties.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-string">&quot;4321&quot;</span>); <span class="hljs-comment">// 若相同key. value替换</span><br>    System.out.println();<br>    properties.get(<span class="hljs-string">&quot;john&quot;</span>); <span class="hljs-comment">// value 不必是String或其子类</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;john&quot;</span>);<span class="hljs-comment">//value 必须是String类型或其子类才能返回, 否则返回null</span><br>    System.out.println(obj);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="五-TreeSet-与-TreeMap"><a href="#五-TreeSet-与-TreeMap" class="headerlink" title="五 TreeSet 与 TreeMap"></a>五 TreeSet 与 TreeMap</h1><h1 id="5-1-TreeSet"><a href="#5-1-TreeSet" class="headerlink" title="5.1 TreeSet"></a>5.1 TreeSet</h1><ol><li>当使用无参构造器是, 加入数据后仍然是无序的</li><li>使用TreeSet 提供的一个构造器:    TreeSet( 实现comparator接口的匿名内部类)添加的元素按照字符串大小来排序</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>            <span class="hljs-comment">//长度 ((String)o1).length() - ((String)o1).length()  按长度排序, 但不能加入相同长度key了</span><br>            <span class="hljs-keyword">return</span> ((String)o1).compareTo(((String)o2));<span class="hljs-comment">//前面减去后面ASCILL, 逐个字符比较,直至不同</span><br>        &#125;<br>    &#125;);<span class="hljs-comment">//匿名内部类传送给TreeSet</span><br><br><br>    treeSet.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;2&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;3&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;4&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;5&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;A&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;AC&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;ABVA&quot;</span>);<br><br>    System.out.println(treeSet);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-2-TreeMap"><a href="#5-2-TreeMap" class="headerlink" title="5.2 TreeMap"></a>5.2 TreeMap</h2><ol><li>无参构造器是无序的</li><li>实现类Comparator接口的匿名内部类, 可以自定义顺序排序</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>            <span class="hljs-keyword">return</span> ((String)o1).compareTo((String)o2);<span class="hljs-comment">//比较的key</span><br>        &#125;<br>    &#125;);<br>    treeMap.put(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-string">&quot;杰克&quot;</span>);<br>    treeMap.put(<span class="hljs-string">&quot;rose&quot;</span>,<span class="hljs-string">&quot;罗丝&quot;</span>);<br>    treeMap.put(<span class="hljs-string">&quot;kristin&quot;</span>,<span class="hljs-string">&quot;克里斯汀&quot;</span>);<br>    treeMap.put(<span class="hljs-string">&quot;zz&quot;</span>,<span class="hljs-string">&quot;渣渣&quot;</span>);<br><br>    System.out.println(treeMap);<br>&#125;   <br></code></pre></div></td></tr></table></figure><h1 id="六-总结-开发中如何选择集合实现类"><a href="#六-总结-开发中如何选择集合实现类" class="headerlink" title="六 总结: 开发中如何选择集合实现类"></a>六 总结: 开发中如何选择集合实现类</h1><p>在开发中, 选择什么集合实现类, 主要取决于业务操作特点, 然后根据集合实现类特性进行选择, 分析如下:</p><ol><li>先判断存储的类型(一组对象或一组键值对)</li><li>一组对象: Collection 接口<ul><li>允许重复: List接口<ul><li>增删多: LinkedList(底层维护了一个双向链表)</li><li>改查多: ArrayList( 底层维护了一个Object类型的数组)</li></ul></li><li>不允许重复: Set 接口<ul><li>无序: HashSet  ( 底层是HashMap, 维护了一个哈希表, 即数组+ 链表 + 红黑树)</li><li>有序: TreeSet   底层是TreeMap</li><li>插入和取出一致: LinkedHashSet   数组 + 双向链表</li></ul></li></ul></li><li>一组键值对: Map<ul><li><strong>键无序: HashMap   底层是数组+ 链表 + 红黑树</strong>    </li><li>键排序: TreeMap</li><li>键插入和取出顺序一致: LinkedHashMap : 底层HashMap[ ]</li><li>读取文件: Properties   父类Hashtable</li></ul></li></ol><h1 id="七-工具类-Collections"><a href="#七-工具类-Collections" class="headerlink" title="七 工具类 Collections"></a>七 工具类 Collections</h1><ol><li>Collections 是一个操作Set, LIst 和Map 等集合的工具类</li><li>Collections 中提供了一系列静态方法对集合元素进行排序, 查询和修改等操作</li></ol><ul><li>​    第一组方法List<ul><li>reverse(List)   反转List中元素的顺序</li><li>frequency( List, Object)</li><li>shuffle(List)    对List集合元素进行随机排序&#x2F;&#x2F;&#x2F;   洗牌</li><li>sort(List) : 根据元素的自然顺序对指定List集合元素按升序排序</li><li>sort(List, Comparator): 自定义顺序排序</li><li>swap(List, int, int): 将指定list 集合中的i处元素和j处元素进行交换</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;d&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;e&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;f&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;g&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;h&quot;</span>);<br>    System.out.println(list);<br>    Collections.reverse(list);<span class="hljs-comment">//反转</span><br>    System.out.println(list);<span class="hljs-comment">//</span><br><br>    System.out.println(Collections.frequency(list,<span class="hljs-string">&quot;a&quot;</span>));<span class="hljs-comment">//频率 int</span><br>    Collections.shuffle(list);<span class="hljs-comment">//洗牌, 用于抽奖活动等</span><br>    System.out.println(list);<br><br>    Collections.sort(list);<br>    System.out.println(<span class="hljs-string">&quot;自然排序(字符串)= &quot;</span> + list);<br><br>    Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<span class="hljs-comment">//自定义排序</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>            <span class="hljs-keyword">return</span> ((String)o1).length() - ((String)o2).length();<br>        &#125;<br>    &#125;);<br><br>    Collections.swap(list,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">//两处下标交换, 范围超出抛出越界异常</span><br>    System.out.println(<span class="hljs-string">&quot;交换后 = &quot;</span> + list);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>第二组方法 Collection<ul><li>Object max(Collection): 根据元素的自然排序, 返回指定集合的最大值</li><li>Object max(Collection, Comparator): 自定义顺序</li><li>min 同上</li><li>int frequency( Collection, Object)</li><li>void copy(LIst dest, LIst src) : 将src中的内容复制到dest中   要求: dest.size( ) &gt;&#x3D; src.size( )    &#x3D;&#x3D;&#x3D;&gt; destination , source</li><li>boolean replaceAll(LIst list , Object oldVal, Object newVal) : 使用新值替换List对象的所有旧值</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;自然Max = &quot;</span> + Collections.max(list));<br> System.out.println(Collections.max(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>()&#123;<span class="hljs-comment">//自定义排序</span><br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>         <span class="hljs-keyword">return</span> ((String)o1).compareTo((String)o2);<br>     &#125;<br> &#125; ));<br> System.out.println(<span class="hljs-string">&quot;list.size() = &quot;</span> + list.size());<br> <span class="hljs-type">List</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(list.size());<span class="hljs-comment">//定义了初始空间, 但是每初始元素仍为0 , 所以list1.size() = 0</span><br> System.out.println(list1.size() + <span class="hljs-string">&quot; &lt;== list1.size()&quot;</span>);<br><br> <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>     list1.add(i);<br> &#125;<br><br> Collections.copy(list1,list);<br> System.out.println(<span class="hljs-string">&quot;list1 = &quot;</span> + list1);<br> Collections.replaceAll(list,<span class="hljs-string">&quot;f&quot;</span>,<span class="hljs-string">&quot;爱抚&quot;</span>);<span class="hljs-comment">//将list中&quot;f&quot;替换为新的&quot;爱抚&quot;</span><br> System.out.println(<span class="hljs-string">&quot;替换后 = &quot;</span> + list);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/02/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="一-计算机网络概述"><a href="#一-计算机网络概述" class="headerlink" title="一 计算机网络概述"></a>一 计算机网络概述</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/9b0e259a058e1e338ab3e50e728a2156.png" alt="9b0e259a058e1e338ab3e50e728a2156.png (1120×1587) (csdnimg.cn)"></p><h2 id="1-1-计算机网络的分类"><a href="#1-1-计算机网络的分类" class="headerlink" title="1.1 计算机网络的分类"></a>1.1 计算机网络的分类</h2><p>按照网络的作用范围: 广域网(WAN), 城域网(MAN), 局域网(LAN)</p><p>按照网络使用者: 公用网络, 专用网络</p><h2 id="1-2计算机网络的层次结构"><a href="#1-2计算机网络的层次结构" class="headerlink" title="1.2计算机网络的层次结构"></a>1.2计算机网络的层次结构</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/67df7eca8ba486a7282bef74321e2722.png" alt="img"></p><p>TCP&#x2F;IP四层模型与OS体系结构对比:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c2b921fd2023201a457a2b07fe3e8e9a.png" alt="img"></p><h2 id="1-3-层次结构设计的基本原则"><a href="#1-3-层次结构设计的基本原则" class="headerlink" title="1.3 层次结构设计的基本原则"></a>1.3 层次结构设计的基本原则</h2><ul><li>各层之间是相互独立的</li><li>每一层需要有足够的灵活性</li><li>各层之间完全解耦</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/ca899d9a067e8c6d6650f1b5f229648b.png" alt="image-20210824140534676"></p><h2 id="1-4-计算机网络的性能指标"><a href="#1-4-计算机网络的性能指标" class="headerlink" title="1.4 计算机网络的性能指标"></a>1.4 计算机网络的性能指标</h2><p>速率:bps &#x3D; bit&#x2F;s</p><p>时延: 发送时延, 传播时延, 排队时延, 处理时延</p><p>往返时间RTT：数据报文在端到端通信中的来回一次的时间</p><h1 id="二-物理层"><a href="#二-物理层" class="headerlink" title="二 物理层"></a>二 物理层</h1><h2 id="2-1-物理层的作用"><a href="#2-1-物理层的作用" class="headerlink" title="2.1 物理层的作用"></a>2.1 物理层的作用</h2><p>连接不同的物理设备, 传输比特流. 该层为上层协议提供了一个传输数据的可靠物理媒体. 简单来说, 物理层确保原始的数据可在各种物理媒体上传输</p><h2 id="2-2-物理层设备"><a href="#2-2-物理层设备" class="headerlink" title="2.2 物理层设备:"></a>2.2 物理层设备:</h2><ul><li>中继器: 同一局域网的再生信号, 两端口的网段必须同一个协议; 5-4-3规程; 10BASE-5以太网中, 最多可串联四个中继器, 5段中只能有3个连接主机</li><li>集线器: 同一局域网的再生, 放大信号(多端口中继器); 半双工, 不能隔离冲突域也不能隔离广播域</li></ul><p>信道的基本概念: 信道是往一个方向传输信息的媒体, 一条通信电路包含一个发送信道和一个接收信道</p><ol><li>单工通信信道: 只能一个方向通信</li><li>半双工通信信道: 双方都可以发送和接收信息, 但不能同时发送也不能同时接收</li><li>全双工通信信道: 双方都可以同时发送和接收</li></ol><h1 id="三-数据链路层"><a href="#三-数据链路层" class="headerlink" title="三 数据链路层"></a>三 数据链路层</h1><h2 id="3-1-数据链路层概述"><a href="#3-1-数据链路层概述" class="headerlink" title="3.1 数据链路层概述"></a>3.1 数据链路层概述</h2><p>数据链路层在物理层提供的服务的基础上向网络层提供服务, 其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层. 数据链路层在不可靠的物理介质上提供可靠的传输.</p><p>该层的作用包括: <strong>物理地址寻址, 数据的成帧, 流量控制, 数据的检错, 重发等</strong></p><p>有关数据链路层的重要知识点:</p><ul><li>数据链路层为网络层提供可靠的数据传输</li><li>基本数据单位为帧</li><li>主要的协议: 以太网协议</li><li>两个重要设备名称: 网桥和交换机</li></ul><p>封装成帧: “帧”是数据链路层数据的基本单位</p><p><img src="https://img-blog.csdnimg.cn/img_convert/969de8a50812f7772ed5cfef6969bef1.png" alt="img"></p><p>透明传输: “透明”是指即使控制字符在帧数据中, 但是要当作不存在去处理. 即在控制字符前加上转义字符ESC</p><p><img src="https://img-blog.csdnimg.cn/img_convert/40172930e675aa1e9b6d4852239144fc.png" alt="img"></p><h2 id="3-2-数据链路层的差错检测"><a href="#3-2-数据链路层的差错检测" class="headerlink" title="3.2 数据链路层的差错检测"></a>3.2 数据链路层的差错检测</h2><p>差错检测: 奇偶校验码, 循环冗余校验码CRC</p><ol><li>奇偶校验码–局限性: 当出错为偶数位, 检测不到错误</li><li>循环冗余校验码: 根据传输或保存的数据而产生固定位数校验码</li></ol><h2 id="3-3-最大传输单元"><a href="#3-3-最大传输单元" class="headerlink" title="3.3 最大传输单元"></a>3.3 最大传输单元</h2><p>最大传输单元MTU, 数据链路层的数据帧不是无限大的, 数据帧长度受到MTU限制</p><p>路径MTU: 由链路中MTU的最小值决定</p><p><img src="https://img-blog.csdnimg.cn/img_convert/437533a74e891aa9c7dcd3ccb94440a4.png" alt="image-20210824145733146"></p><h2 id="3-4-以太网协议详解"><a href="#3-4-以太网协议详解" class="headerlink" title="3.4 以太网协议详解"></a>3.4 以太网协议详解</h2><p>MAC地址: 每一个设备都拥有唯一的MAC地址, 共48位, 使用十六进制表示</p><p>以太网协议: 是一种使用广泛的局域网技术, 是一种应用于数据链路层的协议, 使用以太网可以完成相邻设备的数据帧传输:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/06765dad404a72429bead8950c219c10.png" alt="img"></p><p><strong>局域网分类</strong></p><p>以太网IEEE802.3:</p><ol><li>以太网第一个广泛部署的高速局域网</li><li>以太网数据速率快</li><li>以太网硬件价格便宜, 网络造价成本低</li></ol><p><strong>以太网帧结构</strong></p><ol><li>类型: 标识上层协议(2字节)</li><li>目的地址和源地址: MAC地址(每个6字节, 6*8&#x3D;48bit)</li><li>数据: 封装的上层协议的分组(46 ~ 1500字节)</li><li>CRC: 循环冗余码(4字节)</li><li>以太网最短帧: 以太网最短64字节; 以太网帧除了数据部分18字节; 数据最短46字节</li></ol><p><strong>MAC地址(物理地址, 局域网地址)</strong></p><ol><li>MAC地址长度为6字节, 48位</li><li>MAC地址具有唯一性, 每个网络适配器对应一个MAC地址</li><li>通常采用十六进制表示法, 每个字节表示一个十六进制数, 用 - 或 : 连接起来</li><li>MAC广播地址: FF-FF-FF-FF-FF-FF</li></ol><h1 id="四-网络层"><a href="#四-网络层" class="headerlink" title="四 网络层"></a>四 网络层</h1><p>网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。数据交换技术是报文交换（基本上被分组所替代）：采用储存转发方式，数据交换单位是报文。</p><p>网络层中涉及众多的协议，其中包括最重要的协议，也是TCP&#x2F;IP的核心协议——IP协议。IP协议非常简单，仅仅提供不可靠、无连接的传送服务。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。与IP协议配套使用实现其功能的还有地址解析协议ARP、逆地址解析协议RARP、因特网报文协议ICMP、因特网组管理协议IGMP。具体的协议我们会在接下来的部分进行总结，有关网络层的重点为:</p><ol><li><strong>网络层负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能</strong></li><li><strong>基本数据单位为IP数据报</strong></li><li><strong>包含的主要协议</strong><ul><li>IP协议（Internet Protocol，因特网互联协议）</li><li>ICMP协议（Internet Control Message Protocol，因特网控制报文协议）;</li><li>ARP协议（Address Resolution Protocol，地址解析协议）;</li><li>RARP协议（Reverse Address Resolution Protocol，逆地址解析协议）。</li></ul></li><li>重要的设备: 路由器<img src="https://img-blog.csdnimg.cn/img_convert/e976bb4dcb58a55615d825b0a808ebf0.png" alt="image-20210824150654047"></li></ol><h2 id="4-1-IP协议详解"><a href="#4-1-IP协议详解" class="headerlink" title="4.1 IP协议详解"></a>4.1 IP协议详解</h2><p>IP网际协议是 Internet <strong>网络层最核心</strong>的协议。虚拟互联网络的产生：实际的计算机网络错综复杂；物理设备通过使用IP协议，屏蔽了物理网络之间的差异；当网络中主机使用IP协议连接时，无需关注网络细节，于是形成了虚拟网络。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1512f8a9907449f746288ef22db5fa3a.png" alt="在这里插入图片描述"></p><p>IP协议使得复杂的实际网络变为一个虚拟互联的网络；并且<strong>解决了在虚拟网络中数据报传输路径的问题</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/dc7ef170f6522ce68e09c59f0450ab14.png" alt="img"></p><p>其中，版本指IP协议的版本，占4位，如IPv4和IPv6；首部位长度表示IP首部长度，占4位，最大数值位15；总长度表示IP数据报总长度，占16位，最大数值位65535；TTL表示IP数据报文在网络中的寿命，占8位；协议表明IP数据所携带的具体数据是什么协议的，如<a href="https://so.csdn.net/so/search?q=TCP&spm=1001.2101.3001.7020">TCP</a>、UDP.</p><h2 id="4-2-IP协议的转发流程"><a href="#4-2-IP协议的转发流程" class="headerlink" title="4.2 IP协议的转发流程"></a>4.2 IP协议的转发流程</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/2b15d397bb6ae792c4f786a39a3a3a1e.png" alt="image-20210829160514564"></p><h2 id="4-3-IP地址的子网划分"><a href="#4-3-IP地址的子网划分" class="headerlink" title="4.3 IP地址的子网划分"></a>4.3 IP地址的子网划分</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/81ecde62bf5383da3864b011575d436d.png" alt="img"></p><p>A类（8网络号+24主机号）、B类（16网络号+16主机号）、C类（24网络号+8主机号）可以用于标识网络中的主机或路由器，D类地址作为组广播地址，E类是地址保留</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ccc6e95f8657ca6094042cfaa0c21b6c.png" alt="img"></p><h2 id="4-4-网络地址转换NAT技术"><a href="#4-4-网络地址转换NAT技术" class="headerlink" title="4.4 网络地址转换NAT技术"></a>4.4 网络地址转换NAT技术</h2><p>用于多个主机通过一个公有IP访问访问互联网的私有网络中，减缓了IP地址的消耗，但是增加了网络通信的复杂度。</p><p><strong>NAT工作原理</strong></p><ul><li>从内网出去的IP数据报, 将其IP地址替换为NAT服务器拥有的合法的公共IP地址, 并将替换关系记录到NAT转换表中</li><li>从公共互联网返回的IP数据报, 依据其目的的IP地址检索NAT转换表，　并利用检索到的内部私有IP地址替换目的IP地址，　然后将IP数据报转发到内部网络</li></ul><h2 id="4-5-ARP协议与RARP协议"><a href="#4-5-ARP协议与RARP协议" class="headerlink" title="4.5 ARP协议与RARP协议"></a>4.5 ARP协议与RARP协议</h2><p>地址解析协议 ARP（Address Resolution Protocol）：为网卡（网络适配器）的IP地址到对应的硬件地址提供动态映射。可以把<strong>网络层32位地址转化为数据链路层MAC48位地址</strong>。</p><p>ARP 是<strong>即插即用</strong>的，一个ARP表是自动建立的，不需要系统管理员来配置。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/442e827fe069e4958f4cbedcc2f2fa13.png" alt="在这里插入图片描述"></p><p>RARP(Reverse Address Resolution Protocol)协议<strong>指逆地址解析协议</strong>，可以把数据链路层MAC48位地址转化为网络层32位地址.</p><h2 id="4-6-ICMP协议详解"><a href="#4-6-ICMP协议详解" class="headerlink" title="4.6 ICMP协议详解"></a>4.6 ICMP协议详解</h2><p>网际控制报文协议（Internet Control Message Protocol），<strong>可以报告错误信息或者异常情况</strong>，ICMP报文封装在IP数据报当中。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c5171aa88d22fe5055d682bb1d9681de.png" alt="img"></p><p>ICMP协议的应用:</p><ul><li>Ping应用: 网络故障的排查</li><li>Traceroute应用: 可以探测IP数据报在网络中走过的路径</li></ul><h2 id="4-7-网络层的路由概述"><a href="#4-7-网络层的路由概述" class="headerlink" title="4.7 网络层的路由概述"></a>4.7 网络层的路由概述</h2><p>关于路由算法的要求：正确的完整的、在计算上应该尽可能是简单的、可以适应网络中的变化、稳定的公平的。<br><strong>自治系统AS：</strong>指处于一个管理机构下的网络设备群，AS内部网络自治管理，对外提供一个或多个出入口，其中自治系统内部的路由协议为内部网关协议，如RIP、OSPF等；自治系统外部的路由协议为外部网关协议，如BGP。</p><p><strong>静态路由:</strong> 人工配置, 难度和复杂度高</p><p>动态路由:</p><ol><li>链路状态路由选择算法LS: 向所有隔壁路由发送信息收敛快; 全局式路由选择算法, 每个路由器计算路由时, 需要构建整个网络拓扑图, 利用Dijkstra算法求源端到目的端网络的最短路径;</li><li>距离- 向量路由选择算法DV: 向所有隔壁路由发送信息收敛慢, 会存在回路, 基础是Bellman-Ford方程(简称B-F方程)</li></ol><h2 id="4-8-内部网关路由协议之RIP协议"><a href="#4-8-内部网关路由协议之RIP协议" class="headerlink" title="4.8 内部网关路由协议之RIP协议"></a>4.8 内部网关路由协议之RIP协议</h2><p>路由信息协议 RIP(Routing Information Protocol)【<strong>应用层</strong>】，基于距离-向量的路由选择算法，<strong>较小的AS</strong>（自治系统），适合小型网络；RIP报文，封装进UDP数据报</p><p><strong>RIP协议特性：</strong></p><ol><li>RIP在度量路径时采用的是<strong>跳数</strong>（每个路由器维护自身到其他每个路由器的距离记录）；</li><li>RIP的费用定义在源路由器和目的子网之间；</li><li>RIP被限制的网络直径不超过<strong>15跳</strong>；</li><li>和隔壁交换所有的信息，30<strong>主动</strong>一次（广播）。</li></ol><h2 id="4-9-内部网关路由协议之OSPF协议"><a href="#4-9-内部网关路由协议之OSPF协议" class="headerlink" title="4.9 内部网关路由协议之OSPF协议"></a>4.9 内部网关路由协议之OSPF协议</h2><p>开放最短路径优先协议 OSPF(Open Shortest Path First)【<strong>网络层</strong>】，基于链路状态的路由选择算法（即Dijkstra算法），<strong>较大规模的AS</strong> ，适合大型网络，直接封装在<strong>IP数据</strong>报传输。</p><p><strong>OSPF协议优点：</strong></p><ol><li>安全；</li><li>支持多条相同费用路径；</li><li>支持区别化费用度量；</li><li>支持单播路由和多播路由；</li><li>分层路由。</li></ol><p><strong>RIP与OSPF的对比（路由算法决定其性质）：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0455a0dbe6b9689b32a117e9ab2db3e0.png" alt="image-20210824203252103"></p><h2 id="4-10外部网关路由协议之BGP协议"><a href="#4-10外部网关路由协议之BGP协议" class="headerlink" title="4.10外部网关路由协议之BGP协议"></a>4.10外部网关路由协议之BGP协议</h2><p>BGP（Border Gateway Protocol）边际网关协议【<strong>应用层</strong>】：是运行在AS之间的一种协议,寻找一条好路由：首次交换全部信息，以后只交换变化的部分,BGP封装进<strong>TCP</strong>报文段.</p><h1 id="五-传输层"><a href="#五-传输层" class="headerlink" title="五 传输层"></a>五 传输层</h1><p>第一个端到端, 即主机到主机连接的层次. 传输层负责将上层数据分段并提供端到端的, 可靠的或不可靠的传输. 此外, 传输层还要处理端到端的差错控制和流量控制问题</p><p>传输层的任务是根据通信子网的特性, 最佳的利用网络资源, 为两个端系统的会话层之间, 提供建立, 维护和取消传输连接的功能, 负责端到端的可靠数据传输. 在这一层, 信息传输的协议数据单元称为段或报文</p><p>网络层只是根据网络地址将源结点发出的数据包传送到目的节点, 而传输层则负责将数据可靠地传送到相应的端口</p><p>有关网络层的重点:</p><ol><li>传输层负责将上层数据分段并提供端到端的, 可靠的或不可靠的传输以及端到端的差错控制和流量控制问题</li><li>包含的主要协议: TCP, UDP</li><li>重要设备:网关</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/b8b9bdad6fe98840d4b98a7c74414c44.png" alt="image-20210824204416951"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3e813c4865d3c90d5c960e3febc02152.png" alt="image-20210825110057777"></p><h2 id="5-1-UDP协议详解"><a href="#5-1-UDP协议详解" class="headerlink" title="5.1 UDP协议详解"></a>5.1 UDP协议详解</h2><p>UDP(用户数据报协议)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c1e2c463a94254f0e157e1ecb84051fb.png" alt="（11-2-0303）"></p><p>UDP协议特点:</p><ul><li>UDP是无连接协议</li><li>不能保证可靠啊的数据交付</li><li>面向报文传输</li><li>没有拥塞控制</li><li>首部开销很小</li></ul><p>UDP数据报结构:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d88a84b462bac5a52716fc0d4de42856.png" alt="img"></p><h2 id="5-2-TCP协议详解"><a href="#5-2-TCP协议详解" class="headerlink" title="5.2 TCP协议详解"></a>5.2 TCP协议详解</h2><p>TCP(传输控制协议)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7dcb2a6d779a0424a4d0dcde5ce5fdd2.png" alt="image-20210825101232465"></p><p>TCP协议功能:</p><ul><li>对应用层数据报文进行分段和重组</li><li>面向应用层实现复用和分解</li><li>实现端到端流量控制</li><li>拥塞控制</li><li>传输层寻址</li><li>对接收到的报文进行差错检测(首部和数据部分都检错)</li><li>实现进程间的端到端可靠数据传输控制</li></ul><p>TCP协议特点:</p><ul><li>面向连接的协议</li><li>面向字节流的协议</li><li>点对点通信</li><li>提供可靠的传输服务</li><li>提供全双工通信</li></ul><p>TCP报文结构</p><p><img src="https://img-blog.csdnimg.cn/img_convert/90ea9c7215077889d809c598b88044b4.png" alt="image-20210825101507309"></p><p>TCP首部:</p><ul><li>序号字段:TCP的序号是对每个应用层数据的每个字节进行编号</li><li>确认序号字段: 期望从对方接收数据的字节序号, 即该序号对应的字节尚未收到. 用ack_seq标识</li><li>TCP段的首部长度最短是20B, 最长为60字节. 但是长度必须为4B的整数倍</li></ul><p>TCP标记的作用：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/059e327428c4997120ecd1099fd1bab5.png" alt="image-20210825101954996"></p><h2 id="5-3-可靠传输的基本原理"><a href="#5-3-可靠传输的基本原理" class="headerlink" title="5.3 可靠传输的基本原理"></a>5.3 可靠传输的基本原理</h2><p>基本原理:</p><ul><li><p>不可靠传输信道在数据传输中可能发生的情况: 比特差错, 乱序, 重传, 丢失</p></li><li><p>基于不可靠信道实现可靠数据传输采取的措施:</p><ul><li>差错检测: 利用编码实现数据包传输过程中的比特差错检测</li><li>确认: 接收方向发送方反馈接收状态</li><li>重传: 发送方重新发送接收方没有正确接收的数据</li><li>序号: 确保数据按序提交</li><li>计时器: 解决数据丢失问题</li></ul></li></ul><p>停止等待协议: 是最简单的可靠传输协议, 但是该协议对信道利用率不高</p><p>ARQ(自动重传请求)协议: 滑动窗口+累计确认, 大幅提高了信道利用率</p><h3 id="5-3-1-TCP协议的可靠传输"><a href="#5-3-1-TCP协议的可靠传输" class="headerlink" title="5.3.1 TCP协议的可靠传输"></a>5.3.1 TCP协议的可靠传输</h3><p>基于连续的ARQ协议, 在某些情况下, 重传的效率并不高, 会重复传输部分已经成功接收的字节</p><h3 id="5-3-2-TCP协议的流量控制"><a href="#5-3-2-TCP协议的流量控制" class="headerlink" title="5.3.2 TCP协议的流量控制"></a>5.3.2 TCP协议的流量控制</h3><p>流量控制: 让发送方发送速率不要太快, TCP协议使用滑动窗口实现流量控制</p><p><img src="https://img-blog.csdnimg.cn/img_convert/00f26c96e91c4bf95ef197940d0127f6.png" alt="image-20210825103907230"></p><h2 id="5-4-TCP协议的拥塞控制"><a href="#5-4-TCP协议的拥塞控制" class="headerlink" title="5.4 TCP协议的拥塞控制"></a>5.4 TCP协议的拥塞控制</h2><p>拥塞控制与流量控制的区别: 流量控制考虑点对点的通信量的控制, 而拥塞控制考虑整个网络, 是全局性的考虑. 拥塞控制方法: 慢启动算法 + 拥塞避免算法</p><p>慢开始和拥塞避免:</p><ol><li>慢开始: 拥塞窗口从1(2,4,8,16)指数增长</li><li>达到阈值时进入拥塞避免, 变成+1增长</li><li>发生超时, 阈值变为拥塞窗口的一半(必须大于等于2)</li><li>再从慢开始增长</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/6fff690ce568963043be6792251f4904.png" alt="img"></p><p>快重传和快恢复:</p><ol><li>发送方连续接收到3个冗余ACK, 执行快重传, 不必等计时器超时</li><li>执行快恢复, 阈值变为当前拥塞窗口的一半(须大于1), 并从此新的ssthresh点进入拥塞避免</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/77ff4adc711a615a88840a8abd37f1a0.png" alt="img"></p><h2 id="5-5-TCP的三次握手"><a href="#5-5-TCP的三次握手" class="headerlink" title="5.5 TCP的三次握手"></a>5.5 TCP的三次握手</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/f93fcf682b6e89b628ee458693f5cd32.png" alt="image-20210825104544704"></p><p><strong>为什么需要三次握手?</strong></p><ul><li>第一次握手: 客户机发送请求, 此时服务器知道客户能发送数据</li><li>第二次握手: 服务器发送确认, 此时客户知道服务器能发送也能接收数据</li><li>第三次握手: 客户发送确认, 此时服务器知道客户能接收数据</li></ul><p>建立连接:</p><p><strong>第一次：</strong>客户向服务器发送连接请求段，建立连接请求控制段（SYN&#x3D;1），表示传输的报文段的第一个数据字节的序列号是x，此序列号代表整个报文段的序号（seq&#x3D;x）；客户端进入 SYN_SEND （同步发送状态）；</p><p><strong>第二次：</strong>服务器发回确认报文段，同意建立新连接的确认段（SYN&#x3D;1），确认序号字段有效（ACK&#x3D;1），服务器告诉客户端报文段序号是y（seq&#x3D;y），表示服务器已经收到客户端序号为x的报文段，准备接受客户端序列号为x+1的报文段（ack_seq&#x3D;x+1）；服务器由LISTEN进入SYN_RCVD （同步收到状态）;</p><p>**第三次:**客户对服务器的同一连接进行确认.确认序号字段有效(ACK&#x3D;1),客户此次的报文段的序列号是x+1(seq&#x3D;x+1),客户期望接受服务器序列号为y+1的报文段(ack_seq&#x3D;y+1);当客户发送ack时，客户端进入ESTABLISHED 状态;当服务收到客户发送的ack后，也进入ESTABLISHED状态;第三次握手可携带数据;<br><img src="https://img-blog.csdnimg.cn/img_convert/1ad3ae0f896df40cfe163e93ca43ab11.png" alt="img"></p><h2 id="5-6-TCP连接的四次挥手"><a href="#5-6-TCP连接的四次挥手" class="headerlink" title="5.6 TCP连接的四次挥手"></a>5.6 TCP连接的四次挥手</h2><p>释放连接（四次挥手）</p><p>第一次：客户向服务器发送释放连接报文段，发送端数据发送完毕，请求释放连接（FIN&#x3D;1），传输的第一个数据字节的序号是x（seq&#x3D;x）；客户端状态由ESTABLISHED进入FIN_WAIT_1（终止等待1状态）；</p><p>第二次：服务器向客户发送确认段，确认字号段有效（ACK&#x3D;1），服务器传输的数据序号是y（seq&#x3D;y），服务器期望接收客户数据序号为x+1（ack_seq&#x3D;x+1）;服务器状态由ESTABLISHED进入CLOSE_WAIT（关闭等待）； 客户端收到ACK段后，由FIN_WAIT_1进入FIN_WAIT_2；</p><p>第三次:服务器向客户发送释放连接报文段，请求释放连接（FIN&#x3D;1），确认字号段有效（ACK&#x3D;1），表示服务器期望接收客户数据序号为x+1（ack_seq&#x3D;x+1）;表示自己传输的第一个字节序号是y+1（seq&#x3D;y+1）；服务器状态由CLOSE_WAIT 进入 LAST_ACK （最后确认状态）；</p><p>第四次：客户向服务器发送确认段，确认字号段有效（ACK&#x3D;1），表示客户传输的数据序号是x+1（seq&#x3D;x+1），表示客户期望接收服务器数据序号为y+1+1（ack_seq&#x3D;y+1+1）；客户端状态由FIN_WAIT_2进入TIME_WAIT，等待2MSL时间，进入CLOSED状态；服务器在收到最后一次ACK后，由LAST_ACK进入CLOSED；</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b55a473f789c42124afbfd0e82a9e811.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1fb9c88b10de4d3a77367645d5e93224.png" alt="image-20210825105441970"></p><p>为什么需要等待2MSL?</p><ol><li>最后一个报文没有确认；</li><li>确保发送方的ACK可以到达接收方；</li><li>2MSL时间内没有收到，则接收方会重发；</li><li>确保当前连接的所有报文都已经过期。</li></ol><h1 id="六-应用层"><a href="#六-应用层" class="headerlink" title="六 应用层"></a>六 应用层</h1><p>为操作系统或网络应用程序提供访问网络服务的接口。</p><p>应用层重点:</p><ol><li>数据传输单位为报文</li><li>包含主要的协议: FTP(文件传输协议), Telnet(远程登录协议), DNS(域名解析协议), SMTP(邮件传输协议), POP3(邮局协议), HTTP协议</li></ol><h2 id="6-1-DNS详解"><a href="#6-1-DNS详解" class="headerlink" title="6.1 DNS详解"></a>6.1 DNS详解</h2><p>DNS（Domain Name System:域名系统）<strong>【C&#x2F;S，UDP，端口53】</strong>：解决IP地址复杂难以记忆的问题,存储并完成自己所管辖范围内主机的 域名 到 IP 地址的映射。</p><p><strong>域名解析的顺序：</strong>【1】浏览器缓存，【2】找本机的hosts文件，【3】路由缓存，【4】找DNS服务器（本地域名、顶级域名、根域名）-&gt;迭代解析、递归查询。</p><ol><li><p>IP—&gt;DNS服务—&gt;便于记忆的域名</p></li><li><p>域名由点、字母和数字组成，分为顶级域（com，cn，net，gov，org）、二级域（baidu,taobao,qq,alibaba）、三级域（www）(12-2-0852)</p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/55345eaf75c7aecad38bf2cbcd652a2f.png" alt="image-20210825130407844"></p><h2 id="6-2-DHCP协议"><a href="#6-2-DHCP协议" class="headerlink" title="6.2 DHCP协议"></a>6.2 DHCP协议</h2><p>DHCP（Dynamic Configuration Protocol:动态主机设置协议）：<strong>是一个局域网协议，是应用UDP协议的应用层协议。</strong> <strong>作用：为临时接入局域网的用户自动分配IP地址。</strong></p><h2 id="6-3-FTP协议"><a href="#6-3-FTP协议" class="headerlink" title="6.3 FTP协议"></a>6.3 FTP协议</h2><p><strong>文件传输协议（FTP）</strong>：控制连接（端口21）：传输控制信息（连接、传输请求），以<strong>7位ASCII码的格式</strong>。<strong>整个会话期间一直打开。</strong></p><h2 id="6-4-HTTP协议"><a href="#6-4-HTTP协议" class="headerlink" title="6.4 HTTP协议"></a>6.4 HTTP协议</h2><p><strong>HTTP（HyperText Transfer Protocol:超文本传输协议）</strong>【<strong>TCP，端口80</strong>】：是可靠的数据传输协议，<strong>浏览器向服务器发收报文前，先建立TCP连接，HTTP使用TCP连接方式（HTTP自身无连接）</strong>。</p><p>HTTP请求报文方式：</p><ol><li>GET：请求指定的页面信息，并返回实体主体；</li><li>POST：向指定资源提交数据进行处理请求；</li><li>DELETE：请求服务器删除指定的页面；</li><li>HEAD：请求读取URL标识的信息的首部，只返回报文头；</li><li>OPETION：请求一些选项的信息；</li><li>PUT：在指明的URL下存储一个文档。</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/f182c08fd961d57d8e03263df7469c23.png" alt="image-20210825131432665"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/dc7492094737809454912e47f9d54ff8.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a5e08c253ea159f3ef609ae157f08750.png" alt="image-20210825131827137"></p><h3 id><a href="#" class="headerlink" title></a></h3><p>HTTPS(Secure)是安全的HTTP协议，<strong>端口号443</strong>。基于HTTP协议，通过SSL或TLS提供加密处理数据、验证对方身份以及数据完整性保护。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常用类</title>
    <link href="/2022/02/24/%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <url>/2022/02/24/%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="包装类-WrapperType"><a href="#包装类-WrapperType" class="headerlink" title="包装类   WrapperType"></a>包装类   WrapperType</h1><h2 id="包装类的分类"><a href="#包装类的分类" class="headerlink" title="包装类的分类"></a>包装类的分类</h2><ol><li>针对八种基本定义相应的引用类型   包装类</li><li>有了类的特点, 就可以调用类中的方法</li></ol><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">Boolean  (独立)</td></tr><tr><td align="center">char</td><td align="center">Character  (独立)</td></tr><tr><td align="center">byte</td><td align="center">Byte  (父类是Number)</td></tr><tr><td align="center">short</td><td align="center">Short  (父类是Number)</td></tr><tr><td align="center">int</td><td align="center">Interger  (父类是Number)</td></tr><tr><td align="center">long</td><td align="center">Long  (父类是Number)</td></tr><tr><td align="center">float</td><td align="center">Float  (父类是Number)</td></tr><tr><td align="center">double</td><td align="center">Double  (父类是Number)</td></tr></tbody></table><h2 id="包装类和基本数据类型的转换-以int-和-Integer为例"><a href="#包装类和基本数据类型的转换-以int-和-Integer为例" class="headerlink" title="包装类和基本数据类型的转换(以int 和 Integer为例)"></a>包装类和基本数据类型的转换(以int 和 Integer为例)</h2><ol><li>jdk5前的手动装箱和拆箱的方式, 装箱: 基本类型 &#x3D;&#x3D;&gt; 包装类型, 反之, 拆箱</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//手动装箱 int ==&gt; integer</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(n1);<span class="hljs-comment">//方式一</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> Integer.valueOf(n1); <span class="hljs-comment">// 方式二</span><br><br><span class="hljs-comment">//手动拆箱  integer ==&gt; int</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> integer.intValue();<br></code></pre></div></td></tr></table></figure><ol start="2"><li>jdk5 以后自动装箱和拆箱方式</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//jdk5以后, 就可以自动装箱和自动拆箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-comment">//自动装箱 int ==&gt; integer</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> n2;<span class="hljs-comment">// 底层使用的是  Integer.valueOf(n2)</span><br><span class="hljs-comment">//自动拆箱 Integer ==&gt; int</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> integer2;   <span class="hljs-comment">//底层调用的仍然是 intValue() 方法</span><br><br></code></pre></div></td></tr></table></figure><ol start="3"><li>自动装箱底层调用的是valueOf方法, 比如Interger.valueOf()</li><li>其他包装类的用法类似</li></ol><blockquote><p>三元运算符是一个整体, 存在int和double类型的变量运算的时候, int 会自动 double转型</p></blockquote><h2 id="包装类和String类型的相互转换"><a href="#包装类和String类型的相互转换" class="headerlink" title="包装类和String类型的相互转换"></a>包装类和String类型的相互转换</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//包装类 ==&gt; String</span><br><span class="hljs-comment">//以Integer为例</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">//自动装箱</span><br><span class="hljs-comment">//方式一</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span>  i + <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">//对象i不受str1影响, str1相当于复制了i的数据</span><br><span class="hljs-comment">//方式二</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> i.toString();<br><span class="hljs-comment">//方式三</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> String.valueOf(i);<br><br><br><span class="hljs-comment">// String ==&gt; 包装类</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br><span class="hljs-comment">//方式一</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> Integer.parseInt(str4); <span class="hljs-comment">//使用到了自动装箱</span><br><span class="hljs-comment">//方式二</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(str4);<span class="hljs-comment">//构造器</span><br></code></pre></div></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>System.out.println(i == j);  <span class="hljs-comment">//不是同一个对象, false</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">// 底层 Integer.valueOf(1);</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">// 底层 Integer.valueOf(1);</span><br>System.out.println(m == n); <span class="hljs-comment">// 看范围 -128&lt; 1 &lt; 127, 返回true</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>System.out.println(x == y); <span class="hljs-comment">// 128 &gt; 127, new Integer, 返回false</span><br></code></pre></div></td></tr></table></figure><h1 id="String类💖"><a href="#String类💖" class="headerlink" title="String类💖"></a>String类💖</h1><ul><li><p>String 对象用于保存字符串, 也就是一组<strong>字符序列</strong>. <strong>字符串常量</strong>是用双引号括起来的字符序列. </p></li><li><p>字符串的字符使用Unicode字符编码, 一个字符(不区分字母还是汉字) 占两个字节2B.   (char占两个字节)</p></li><li><p>String实现了Serializable接口, 说明String对象可以串行化. 对象可以在网络传输</p></li><li><p>String 类实现了Comparable接口, 说明String对象可以比较大小</p></li><li><p>String 是final类, 不能被其他的类继承</p></li><li><p>String类中有属性<strong>private final char value[ ];</strong> 用于存放字符串内容</p></li><li><p>value[ ]数组中的字符可以修改, 但是value不能修改, 即数组的地址不能修改</p></li><li><p>String类常用的构造方法:</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(String original);<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[] a);<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[] a, <span class="hljs-type">int</span> startIndex, <span class="hljs-type">int</span> count);<br></code></pre></div></td></tr></table></figure><h2 id="创建String对象的两种方式"><a href="#创建String对象的两种方式" class="headerlink" title="创建String对象的两种方式"></a>创建String对象的两种方式</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1.</span> <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hspedu&quot;</span>;<span class="hljs-comment">//方式一: 直接赋值.  s指向常量池的含有hspedu的数据空间地址</span><br><span class="hljs-number">2.</span> <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hspedu&quot;</span>);<span class="hljs-comment">// 方式二: 调用构造器, s指向堆区空间,这个空间里有个value属性, value指向常量池的含有hspedu的数据空间地址</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-comment">//创建了一个对象</span><br><span class="hljs-comment">//编译器会做优化, 判断创建的常量池对象, 是否有引用指向</span><br><span class="hljs-comment">//y</span><br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloabc&quot;</span>;<br></code></pre></div></td></tr></table></figure><h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hsp&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hsp&quot;</span>);<br>System.out.println(a.equals(b));T<br>System.out.println(a == b);F<br>System.out.println(a == b.intern()); T<span class="hljs-comment">//intern()返回一个地址, 这里b.intern(), 返回b的字符串在常量池中的地址</span><br>System.out.println(b == b.intern()); F<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">以下语句创建了几个对象? <br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;  <span class="hljs-comment">//在常量池中查找有无&quot;hello&quot;对象, 没有就创建一个</span><br>s1 = <span class="hljs-string">&quot;haha&quot;</span>;  <span class="hljs-comment">//在常量池中查找有无&quot;haha&quot;对象, 没有就创建一个</span><br><br><br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&quot;abc&quot;</span>; <span class="hljs-comment">//编译器会优化, 直接在常量池中创建一个helloabc, 因此这里只创建一个对象</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">// 常量池中创建一个&quot;hello&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>; <span class="hljs-comment">// 常量池中创建一个&quot;abc&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b; <span class="hljs-comment">// c指向堆中对象, value指向常量池中&quot;helloabc&quot;.    步骤如下:</span><br><span class="hljs-comment">//1. 先创建一个StringBuilder sb = StringBuilder();</span><br><span class="hljs-comment">//2. 执行 sb.append(&quot;hello&quot;);</span><br><span class="hljs-comment">//3. 执行 sb.append(&quot;abc&quot;);</span><br><span class="hljs-comment">//4. 调用sb.toString(), 返回一个String对象(new出来的).  其value指向&quot;helloabc&quot;</span><br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hsp&quot;</span>);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] ch = &#123;<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String str, <span class="hljs-type">char</span> ch[])</span>&#123;<br>        str = <span class="hljs-string">&quot;java&quot;</span>;<br>        ch[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;h&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Test1</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test1</span>();<br>        ex.change(ex.str, ex.ch);<br>        System.out.print(ex.str + <span class="hljs-string">&quot;and&quot;</span>);<br>        System.out.println(ex.ch);<br>    &#125;<br>    <br>&#125;<br><span class="hljs-comment">//结果:hspandhava</span><br><br></code></pre></div></td></tr></table></figure><h2 id="String类常用方法"><a href="#String类常用方法" class="headerlink" title="String类常用方法"></a>String类常用方法</h2><p>String类是保存字符串常量的. 每次更新都需要重新开辟空间, 效率较低. 因此java设计者还提供了StringBuilder和StringBuffer来增强String的功能, 并提高效率</p><ol><li>equals( ):  区分大小写, 判断内容是否相等</li><li>equalslgnoreCase( ):  <strong>忽略大小写</strong>判断内容是否相等</li><li>length( ): 获取字符串长度</li><li>indexOf( ):  获取字符在字符串第一次出现的索引, 索引从0开始, 找不到就返回-1;</li><li>lastIndexOf( ):  获取字符在字符串中最后一次出现的索引</li><li>substring( ): <strong>截取指定范围的子串</strong>. s.substring(6), 从索引6开始截取后面的内容(下标按从0开始计数), s.substring(0,5); 从0开始截取到第5个,即索引4这个位置</li><li>trim( ):   <strong>去前后空格</strong></li><li>charAt( ):  获取某索引处的字符, 注意不能使用Str[index] 这种方式. 正确:Str.charAt(0);</li><li>toUpperCase( ); <strong>转换为大写</strong></li><li>toLowerCase( );转化为小写</li><li>s.concat(“123”).concat(“456”); <strong>字符串拼接</strong></li><li>replace(s1 ,s2); 返回 字符串中将s1替换成s2的字符串  s.replace(s1,s2)</li><li><strong>s.split(“,”); 以 ‘,’为分割, 将s分成多个字符串, 返回一个字符串数组</strong></li><li>s.toCharArray( ); 将s转换成char数组</li><li>compareTo( ); a.compareTo(b): 字符集合是包含关系比较两个字符串的大小, 返回a.length() - b.length(); 字符集合非包含关系: 返回第一个不同处的字符Unicode编码之差</li><li>format(“字符串%s, %d”, s, i); c语言print;   %s(字符串), %d(整数), %.2f(小数保留两位,四舍五入), %c(char类型) : 占位符</li></ol><h1 id="StringBuffer类💖"><a href="#StringBuffer类💖" class="headerlink" title="StringBuffer类💖"></a>StringBuffer类💖</h1><ul><li>java.lang.StringBuffer代表可变的字符序列, 可以对字符串内容进行增删.</li><li>很多方法与String相同, 但StringBuffer是<strong>可变长度的</strong></li><li>StringBuffer是一个容器</li></ul><h2 id="String与StringBuffer"><a href="#String与StringBuffer" class="headerlink" title="String与StringBuffer"></a>String与StringBuffer</h2><ol><li>String保存的是字符串常量(常量池中), 里面的值不能更改, 每次String类的更新实际上就是更改地址, 效率较低</li><li>StringBuffer保存的是字符串变量(堆中), 里面的值可以更改, 每次StringBuffer的更新实际上可以更新内容, 不用每次更新地址, 效率较高</li></ol><h2 id="StringBuffer构造器"><a href="#StringBuffer构造器" class="headerlink" title="StringBuffer构造器"></a>StringBuffer构造器</h2><ol><li><p>StringBuffer(int capacity);&#x2F; StringBuffer();  构造一个字符缓冲区, 大小为capacity, 默认为16</p></li><li><p>StringBuffer(String str); 构造一个字符缓冲区, 初始内容为str.   缓冲区大小为str.length() + 16.</p></li></ol><h2 id="String-和-StringBuffer相互转换"><a href="#String-和-StringBuffer相互转换" class="headerlink" title="String 和 StringBuffer相互转换"></a>String 和 StringBuffer相互转换</h2><p>在开发中, 经常需要将String 和 StringBuffer进行转换</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//String ==&gt; StringBuffer</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">//方式一</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(s);<br><span class="hljs-comment">//方式二</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>b2.append(s);<br><br><span class="hljs-comment">//StringBuffer ==&gt; String</span><br><span class="hljs-comment">//方式一</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> b1.toString();<br><span class="hljs-comment">//方式二</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b1);<br></code></pre></div></td></tr></table></figure><h2 id="StringBuffer类常用方法"><a href="#StringBuffer类常用方法" class="headerlink" title="StringBuffer类常用方法"></a>StringBuffer类常用方法</h2><ol><li>append( ); 增</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>s.append(<span class="hljs-string">&#x27;,&#x27;</span>);<span class="hljs-comment">//在后面追加&#x27;,&#x27; 返回hello,</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li><p>delete(start, end); 删</p></li><li><p>replace(start, end, string) &#x2F;&#x2F;改  将start –end 间的内容替换掉, 不含end</p></li><li><p>indexOf( )  查  查找子串在字符串第一次出现的索引, 如果找不到就返回-1</p></li><li><p>insert(9, s) 插入, 在指定位置插入一个字符串, 这里是将字符串s插入到原字符串的第9个索引, 索引9及后面的内容后移</p></li><li><p>length()  获取长度</p></li></ol><h1 id="StringBuilder类💖"><a href="#StringBuilder类💖" class="headerlink" title="StringBuilder类💖"></a>StringBuilder类💖</h1><ul><li><p>一个可变的字符序列. 此类提供了一个与StringBuffer兼容的API, 但不保证同步(StringBuilder不是线程安全的). 该类被设计用作 StringBuffer的一个简易替换, <strong>用在字符串缓冲区被单个线程使用的时候</strong>. 如果可能, 建议优先采用该类, 因为在大多实现中, 它比StringBuffer 要快</p></li><li><p>在StringBuffer上的主要操作是append和insert方法, 可重载这些方法, 以接收任意类型的数据</p></li><li><p>StringBuilder和StringBuffer均代表可变的字符序列, 方法是一样的, 所以使用和StringBuffer一样</p></li><li><p>继承了AbstractStringBuilder类,</p></li><li><p>实现了Serializable,说明其对象可以串行化(对象可以网络传输,可以保存到文件)</p></li><li><p>是final类, 不可被继承</p></li><li><p>StringBuilder对象的字符序列仍然是存放在其父类AbstractStringBuilder的char[] value中(堆中)</p></li><li><p>StringBuilder的方法没有做互斥处理, 即没有synchronized关键字, 因此在单线程的情况下使用StringBuilder</p></li></ul><h2 id="String-StringBuffer-和-StringBuilder-的比较"><a href="#String-StringBuffer-和-StringBuilder-的比较" class="headerlink" title="String, StringBuffer 和 StringBuilder 的比较"></a>String, StringBuffer 和 StringBuilder 的比较</h2><ol><li>StringBuffer和StringBuilder非常类似, 均代表可变的字符序列, 而且方法也一样</li><li>String: 不可变字符序列, 效率低, 但是复用率高</li><li>StringBuffer: 可变字符序列, 效率较高(增删), 线程安全</li><li>StringBuilder: 可变字符序列, 效率最高, 线程不安全</li><li>String使用注意说明</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<span class="hljs-comment">//创建了一个字符串</span><br>s += <span class="hljs-string">&quot;b&quot;</span>; <span class="hljs-comment">//实际上原来的&quot;a&quot; 字符串对象已经丢弃了, 现在又产生了一个字符串s +&quot;b&quot;(也就是&quot;ab&quot;). 如果多次执行这些改变串内容的操作, 会导致大量副本字符串对象留存在内存中, 降低效率. 如果这样的操作放在循环中, 会极大影响程序的性能 ==&gt; 结论: 如果我们要对字符串对象做大量修改, 就不使用String</span><br></code></pre></div></td></tr></table></figure><h2 id="String-StringBuffer-和-StringBuilder-使用原则"><a href="#String-StringBuffer-和-StringBuilder-使用原则" class="headerlink" title="String, StringBuffer 和 StringBuilder 使用原则"></a>String, StringBuffer 和 StringBuilder 使用原则</h2><ol><li>如果字符串存在<strong>大量的修改操作</strong>, 一般使用StringBuffer或StringBuilder</li><li>如果字符串存在大量的修改操作, 并在<strong>单线程</strong>的情况, 使用<strong>StringBuilder</strong></li><li>如果字符串存在大量的修改操作, 并在<strong>多线程</strong>的情况, 使用 <strong>StringBuffer</strong></li><li>如果我们字符串很少修改, <strong>被多个对象引用</strong>, 使用String, 比如配置信息等</li></ol><h1 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h1><p>Math类包含用于执行基本数学运算的方法, 如初等指数, 对数, 平方根和三角函数</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li>abs  绝对值  <code>Math.abs(-3)</code> </li><li>pow  求幂</li><li>ceil  向上取整</li><li>floor  向下取整</li><li>round  四舍五入</li><li>sqrt  求开方</li><li>random  求随机数(0到1之间[0 , 1)的随机小数)</li><li>max  求两个数的最大值</li><li>min  求两个数的最小值</li></ol><h1 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h1><p>Arrays类里面包含了一系列静态方法, 用于管理或操作数组(比如排序和搜索)</p><ol><li>toString 返回数组的字符串形式   Arrays.toString(arr)</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">43</span>,<span class="hljs-number">23</span>,<span class="hljs-number">54</span>,<span class="hljs-number">23</span>,<span class="hljs-number">64</span>,<span class="hljs-number">43</span>,<span class="hljs-number">42</span>,<span class="hljs-number">24</span>&#125;;<br>        System.out.println(Arrays.toString(a));<br><span class="hljs-comment">//结果:[1, 23, 23, 43, 23, 54, 23, 64, 43, 42, 24]</span><br><br></code></pre></div></td></tr></table></figure><ol start="2"><li>sort排序(自然排序和定制排序)</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Arrays.sort(arr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>()&#123;<span class="hljs-comment">// 匿名内部类, 接口</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span>&#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> (Integer)o1;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> (Integer)o2;<br>        <span class="hljs-keyword">return</span> i1 - i2;<br>    &#125;<br>&#125;);<br><br><br></code></pre></div></td></tr></table></figure><ol start="3"><li>binarySearch通过二分搜索发进行<strong>二分查找</strong>, 数组要求必须已经排好序. 返回元素在数组中的索引, 不存在则返回-(low+1)</li><li>Arrays.copyOf(arr,arr.length)  数组元素的复制,     返回拷贝数组的n个元素组成的数组, 多了就把多出的元素设为null</li><li>Arrays.fill(num, 99).  数组元素的填充.   使用99替换num数组的所有元素</li><li>Arrays.equals(arr1, arr2),  比较两个数组元素内容是否完全一致  </li><li>Arrays.asList(1,2,3,4,4,5)  将一组值转换为list集合,并返回</li></ol><h1 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h1><h2 id="System类常见方法和案例"><a href="#System类常见方法和案例" class="headerlink" title="System类常见方法和案例"></a>System类常见方法和案例</h2><ol><li>exit 退出当前程序   System.exit(0); &#x2F;&#x2F; 0表示正常退出(0表示正常退出)</li><li>arraycopy: 复制数组元素, 比较适合底层调用, 一般使用Arrays.copyOf完成复制数组</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] src = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[] dest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>System.arraycopy(src,<span class="hljs-number">0</span>,dest,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//把原数组src的第0个位置开始的元素拷贝到目标数组的第0个元素开始位置,共拷贝3个</span><br><br></code></pre></div></td></tr></table></figure><ol start="3"><li>currentTimeMillens: 返回当前时间距离1970-1-1的毫秒数   System.currentTimeMilens();</li><li>gc: 运行垃圾回收机制  System.gc();</li></ol><h1 id="BigInteger-和-BigDecimal类"><a href="#BigInteger-和-BigDecimal类" class="headerlink" title="BigInteger 和 BigDecimal类"></a>BigInteger 和 BigDecimal类</h1><ol><li>BigInteger适合保存比较大的整型</li><li>BigDecimal适合保存精度更高的浮点型(小数)</li></ol><h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><p>在这两类方法中, 不能直接对对象进行 + - , 只能使用对应的方法</p><ol><li>add  加</li><li>subtract  减</li><li>multiply  乘</li><li>divide  除</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">BigInteger</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigeInteger</span>(<span class="hljs-string">&quot;545345755643212542365433242256&quot;</span>);<br>b.add(b);<span class="hljs-comment">//add(BigeInteger biginteger)  ;  参数必须为BigInteger类型</span><br>b.divide(b); <span class="hljs-comment">//可在后面指定精度, 防止异常 b.divide(b, BigDecimal.ROUND_CEILING);//保到自己输入时的精度</span><br></code></pre></div></td></tr></table></figure><h1 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h1><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>精确到毫秒, 代表特定的瞬间</p><p>SimpleDateFormat: 格式和解析日期的类SimpleDateFormat 格式化和解析日期的具体类, 它允许进行格式化(日期 -&gt; 文本), </p><p>解析(文本 -&gt; 日期) 和规范化</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">//获取当前系统时间</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">23424</span>);<span class="hljs-comment">// 通过指定毫秒数得到时间 得到对应的年月日时分秒</span><br>System.out.println(d1.getTime());<span class="hljs-comment">//获取某个时间对应的毫秒数</span><br><br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年mm月dd日 hh:mm:ss E&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(d1);<span class="hljs-comment">// 将日期转换为指定格式的字符串</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1996年01月01日 10:20:30 星期一&quot;</span>;<br><span class="hljs-type">Date</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> sdf.parse(s);<span class="hljs-comment">//把格式化的字符串转回Date</span><br></code></pre></div></td></tr></table></figure><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><p>Calendar类是一个抽象类, 它为特定瞬间与一组诸如YEAR, MONTH, DAY_OF_MONTH, HOUR 等日历字段之间的转换提供了一些方法, 并未操作日历字段提供了一些方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Callendar</span>  <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>System.out.println(c.get(Calendar.YEAR));<br>System.out.println(c.get(Calendar.MONTH)+<span class="hljs-number">1</span>);<span class="hljs-comment">//月份默认从 0 开始编号</span><br>System.out.println(c.get(Calendar.DAY));<br></code></pre></div></td></tr></table></figure><h2 id="LocalDate-日期-LocalTime-时间-LocalDateTime-日期时间"><a href="#LocalDate-日期-LocalTime-时间-LocalDateTime-日期时间" class="headerlink" title="LocalDate(日期), LocalTime(时间), LocalDateTime(日期时间)"></a>LocalDate(日期), LocalTime(时间), LocalDateTime(日期时间)</h2><p>JDK 8加入</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">lat</span> <span class="hljs-operator">=</span> LocalDateTime.now(); <span class="hljs-comment">//LocalDate.now();// LocalTime();</span><br>System.out.println(lat);<br>结果:<span class="hljs-number">2022</span>-<span class="hljs-number">02</span>-26T18:<span class="hljs-number">26</span>:<span class="hljs-number">19.986</span><br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>); <br>System.out.println(dateTimeFormatter.format(lat));<span class="hljs-comment">//格式化</span><br></code></pre></div></td></tr></table></figure><h2 id="Instant-时间戳"><a href="#Instant-时间戳" class="headerlink" title="Instant 时间戳"></a>Instant 时间戳</h2><p>类似于Date</p><p>提供了一系列和Date类转换的方式</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Instant</span> <span class="hljs-variable">instan</span> <span class="hljs-operator">=</span> Insrant.now();<br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Date.from(instant);<span class="hljs-comment">//Instant ---&gt; Date</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant1</span> <span class="hljs-operator">=</span> date.toInstant();<span class="hljs-comment">//Date ---&gt; Instant</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>常用类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CRM系统_第二天</title>
    <link href="/2022/02/23/CRM%E7%B3%BB%E7%BB%9F_%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <url>/2022/02/23/CRM%E7%B3%BB%E7%BB%9F_%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="4-CRM-系统数据库设计"><a href="#4-CRM-系统数据库设计" class="headerlink" title="4. CRM 系统数据库设计"></a>4. CRM 系统数据库设计</h1><h1 id="5-项目环境搭建与测试"><a href="#5-项目环境搭建与测试" class="headerlink" title="5. 项目环境搭建与测试"></a>5. 项目环境搭建与测试</h1>]]></content>
    
    
    <categories>
      
      <category>Java项目</category>
      
      <category>CRM系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CRM系统</tag>
      
      <tag>Java项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异常</title>
    <link href="/2022/02/23/%E5%BC%82%E5%B8%B8/"/>
    <url>/2022/02/23/%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、异常的概念"><a href="#一、异常的概念" class="headerlink" title="一、异常的概念"></a>一、异常的概念</h1><h2 id="引出"><a href="#引出" class="headerlink" title="引出"></a>引出</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.exception_;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Excepton01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//1. num1 / num2 ==&gt; 10 / 0</span><br>        <span class="hljs-comment">//因为分母为0, 因此执行到 num1 / num2 会抛出异常</span><br>        <span class="hljs-comment">//抛出异常之后, 程序就退出了, 下面的代码就不执行了. </span><br>        <span class="hljs-comment">//如果项目很大, 这样不致命的崩溃说明代码健壮性不够</span><br>        <span class="hljs-comment">//Java设计者提供了异常处理机制来解决该问题</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> num1 / num2;<br>        System.out.println(<span class="hljs-string">&quot;程序继续运行...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><h2 id="解决方案-异常捕获"><a href="#解决方案-异常捕获" class="headerlink" title="解决方案 - 异常捕获"></a>解决方案 - 异常捕获</h2><h3 id="try-catch演示"><a href="#try-catch演示" class="headerlink" title="try-catch演示"></a>try-catch演示</h3><p>如果程序员觉得一段代码可能出现异常, 可以使用try-catch 异常处理机制来解决, 从而保证程序的健壮性</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>操作: 将该代码块选中,输入快捷建CTRL + ALT + T ,选择try-catch<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> num1 / num2;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></div></td></tr></table></figure><p>如果进行异常处理, 那么即使出现了异常, 程序可以继续执行</p><h2 id="异常介绍"><a href="#异常介绍" class="headerlink" title="异常介绍"></a>异常介绍</h2><p>基本概念: Java语言中, 将程序执行中发生的不正常情况称为”异常”. (开发中语法错误和逻辑错误不是异常)</p><h3 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h3><h4 id="Error-错误"><a href="#Error-错误" class="headerlink" title="Error(错误):"></a>Error(错误):</h4><p><strong>Java虚拟机无法解决的严重问题</strong>. 如: JVM系统内部错误, 资源耗尽等严重情况. 比如:StackOverflowError[栈溢出] 和 OOM(out of memory)[内存不足]</p><p>  Error是严重错误, 程序会崩溃</p><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception:"></a>Exception:</h4><p>其它因编程错误或偶然的外在因素导致的<strong>一般性问题</strong>, 可以使用针对性的代码进行处理. 例如空指针访问, 试图读取不存在的文件, 网络连接中断等等, Exception分为两大类: <strong>运行时异常</strong>[程序运行时发生的异常] 和 <strong>编译时异常</strong>[编程时, 编译器检测出的异常]</p><p>上述 num1 &#x2F; num2 是运行时异常</p><h1 id="二、异常体系图"><a href="#二、异常体系图" class="headerlink" title="二、异常体系图"></a>二、异常体系图</h1><p><img src="https://tse1-mm.cn.bing.net/th/id/R-C.f4813cc359baaf19a878a9445a5c4b31?rik=sRk0XqorEjV7oQ&riu=http://upload-images.jianshu.io/upload_images/8669504-7275ff0c002ea218.jpg&ehk=3cYY4C6vMR6/ELG88bag2feFSphW/2G0L3ypWmPcQhY=&risl=&pid=ImgRaw&r=0" alt="R-C.f4813cc359baaf19a878a9445a5c4b31 (1462×826) (bing.net)"></p><p><img src="/2022/02/23/%E5%BC%82%E5%B8%B8/image-20220223144234699.png" alt="虚线是接口实现, 实线是继承"></p><p><img src="/2022/02/23/%E5%BC%82%E5%B8%B8/0CE13A8C38BC9F3027B8B69C3164C085.png" alt="img"></p><p>运行时异常, 编译器见检查不出来. 一般是指编程时的逻辑错误, 是程序员应该避免出现的异常. </p><p>对于运行时异常, 可以不做处理, 应为这类异常很普遍, 若全处理可能会对程序的可读性和运行效率产生影响</p><p>编译时异常, 是编译器要求必需处理的异常</p><h1 id="三、常见运行时异常-🔑🪓🔨🧡💛💚💙💜🤎"><a href="#三、常见运行时异常-🔑🪓🔨🧡💛💚💙💜🤎" class="headerlink" title="三、常见运行时异常  🔑🪓🔨🧡💛💚💙💜🤎"></a>三、常见运行时异常  🔑🪓🔨🧡💛💚💙💜🤎</h1><h2 id="NullPointException-空指针异常"><a href="#NullPointException-空指针异常" class="headerlink" title="NullPointException 空指针异常"></a>NullPointException 空指针异常</h2><p>当应用程序试图在需要对象的地方使用 null 时(即对象还没创建就使用) , 抛出该异常</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String name;<br>System.out.print(name); <span class="hljs-comment">//空指针异常</span><br></code></pre></div></td></tr></table></figure><h2 id="ArithmeticException-数学运算异常"><a href="#ArithmeticException-数学运算异常" class="headerlink" title="ArithmeticException 数学运算异常"></a>ArithmeticException 数学运算异常</h2><p>出现异常运算条件时, 抛出此异常. 如整数除以零</p><h2 id="ArrayIndexOutOfBoundsException-数组下标越界异常"><a href="#ArrayIndexOutOfBoundsException-数组下标越界异常" class="headerlink" title="ArrayIndexOutOfBoundsException 数组下标越界异常"></a>ArrayIndexOutOfBoundsException 数组下标越界异常</h2><p>用非法索引访问数组时抛出异常. 索引为负或者索引等于或大于数组大小, 则该索引为非法索引</p><h2 id="ClassCastException-类型转换异常"><a href="#ClassCastException-类型转换异常" class="headerlink" title="ClassCastException 类型转换异常"></a>ClassCastException 类型转换异常</h2><p>将对象强制转换为不是实例的子类时, 抛出该异常.</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;&#125;<br><span class="hljs-comment">//main方法</span><br><span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (A)b; <span class="hljs-comment">// 抛出异常</span><br></code></pre></div></td></tr></table></figure><h2 id="NumberFormatException-数字格式不正确异常"><a href="#NumberFormatException-数字格式不正确异常" class="headerlink" title="NumberFormatException 数字格式不正确异常"></a>NumberFormatException 数字格式不正确异常</h2><p>当应用程序试图将字符串转换成一种数值类型, 但该字符串不能转换为适当格式时, 抛出该异常  &#x3D;&#x3D;&gt; 使用异常我们可以确保输入是满足条件的数字.</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;韩顺平教育&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(name);<span class="hljs-comment">//抛出异常</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;13245&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> Integer.parseInt(n);<span class="hljs-comment">// 正常运行</span><br></code></pre></div></td></tr></table></figure><h1 id="四、常见编译时异常"><a href="#四、常见编译时异常" class="headerlink" title="四、常见编译时异常"></a>四、常见编译时异常</h1><p>编译异常是指在编译期间, 就必须处理的异常, 否则代码不能通过编译</p><ol><li><p>OException：输入输出流异常</p></li><li><p>FileNotFoundException：文件找不到的异常</p></li><li><p>ClassNotFoundException：类找不到的异常</p></li><li><p>DataFormatException：数据格式化异常</p></li><li><p>NoSuchFieldException：没有匹配的属性异常</p></li><li><p>NoSuchMethodException：没有匹配的方法异常</p></li><li><p>SQLException：数据库操作异常</p></li><li><p>TimeoutException：执行超时异常</p></li></ol><h1 id="五、异常处理方式"><a href="#五、异常处理方式" class="headerlink" title="五、异常处理方式"></a>五、异常处理方式</h1><h2 id="1-try-catch-finally"><a href="#1-try-catch-finally" class="headerlink" title="1. try-catch-finally"></a>1. try-catch-finally</h2><p>程序员在代码中捕获发生的异常, 自行处理</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    代码可能有异常<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<span class="hljs-comment">//没有异常则 catch 代码块不执行</span><br>    <span class="hljs-comment">//  1. 捕获到异常</span><br>    <span class="hljs-comment">//  2. 当异常发生时, 系统将异常封装成 Exception 对象 e, 传递给catch</span><br>    <span class="hljs-comment">//  3. 得到异常对象后, 程序员自己处理</span><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <span class="hljs-comment">//不管try代码块是否有异常发生, 始终要执行finally</span><br>    <span class="hljs-comment">//通常将释放资源的代码放在finally, 保证资源最终一定会释放</span><br>    <span class="hljs-comment">//如果没有finally, 语法也是可以通过的</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="细节"><a href="#细节" class="headerlink" title="细节:"></a>细节:</h4><ol><li>如果异常发生了, 则异常发生后面的代码不会执行(try中代码只执行到该异常, 然后直接进入catch块), 直接进入到catch块</li><li>如果异常没有发生, 则顺序执行try的代码块, 不会进入到catch</li><li>如果希望不管是否发生异常, 都执行某段代码(比如关闭连接, 释放资源等), 则使用finally{}</li><li>可以有<strong>多个catch语句</strong>, 捕获不同的异常(进行不同的业务处理), 要求父类异常在后, 子类异常在前, 比如(Exception 在后, NullPointerException在前), 如果发生异常, 只会匹配一个catch</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//main函数</span><br><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    p.getName();<span class="hljs-comment">// 这里是 NullPointerException, 是 Exception 的子类        第一个异常</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> n1 / n2; <span class="hljs-comment">// 这里是 ArithmeticException , 是 Exception 的子类        第二个异常</span><br>    <br>&#125; <span class="hljs-keyword">catch</span> (NullPointerException e)&#123;<br>    <span class="hljs-comment">//捕获第一个异常  Exception的子类异常放在前面</span><br>    <br>&#125; <span class="hljs-keyword">catch</span>(ArithmeticException e)&#123;<br>    <span class="hljs-comment">//捕获第二个异常    Exception的子类异常放在前面</span><br>&#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    <span class="hljs-comment">//Exception作为前两者的父类异常放在后面</span><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack&quot;</span>;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li>可以进行 <code>try-finally</code> 配合使用, 这种用法相当于没有捕获异常, 因此程序会直接崩溃. 目的是<strong>无论如何都要做善后处理(finally)</strong>.</li></ol><p><strong>当catch和finally中都有return语句时, 不会return 但会执行 return中的语句, 然后再执行finally中的return</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>    i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>        i++; <span class="hljs-comment">//i = 2</span><br>        异常;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        <span class="hljs-keyword">return</span> ++i; <span class="hljs-comment">// i = 3; temp = 3;</span><br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br>        <span class="hljs-keyword">return</span> ++i; <span class="hljs-comment">// i = 4; return 4</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//调用函数后返回 4</span><br></code></pre></div></td></tr></table></figure><p><strong>当catch中有return语句, 而finally中没有return 语句时, 返回temp</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>    i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>        i++; <span class="hljs-comment">//i = 2</span><br>        异常;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        <span class="hljs-keyword">return</span> ++i; <span class="hljs-comment">// i = 3; temp = 3; 返回时return temp</span><br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br>        没有<span class="hljs-keyword">return</span>语句; <span class="hljs-comment">// 执行finally中的语句, 再回到catch中的return</span><br>    &#125;<br>&#125;<br><br>这事调用函数后返回 <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="try-catch-finally执行顺序小结"><a href="#try-catch-finally执行顺序小结" class="headerlink" title="try-catch-finally执行顺序小结"></a>try-catch-finally执行顺序小结</h4><ol><li>如果没有出现异常, 则执行try块中的所有语句, 不执行catch块中的语句, 如果有finally, 最后还需要执行finally里面的语句</li><li>如果出现异常, 则try块中异常发生后, 剩下的语句不再执行, 将执行catch中的语句, 如果有finally, 最后还需要执行finally里面的语句!</li></ol><h2 id="2-throws"><a href="#2-throws" class="headerlink" title="2. throws"></a>2. throws</h2><p>将发生的异常抛出, 交给调用者(方法)来处理, 最顶级的处理者就是JVM</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//JVM 调用主方法 main() </span><br><span class="hljs-comment">//主方法 main() 调用 f1() 方法</span><br><span class="hljs-comment">//f1() 调用 f2()</span><br><br><span class="hljs-comment">//假如 f2() 发生了异常, 则f2() 可通过 throws 将异常抛给 f1(), 同样f1() 可以将异常抛给 main(), 同样main() ...</span><br><span class="hljs-comment">//不想抛就用 try-catch-finally 机制处理异常</span><br><br><span class="hljs-comment">//JVM处理异常时: 直接输出异常信息, 然后直接中断(退出)程序</span><br></code></pre></div></td></tr></table></figure><p>try-catch-finally 和 throws 二选一即可. </p><p><strong>如果抛出了异常, 但是没有try-catch-finally, 也没有throws, 默认使用throws</strong></p><h3 id="throws异常处理"><a href="#throws异常处理" class="headerlink" title="throws异常处理"></a>throws异常处理</h3><ul><li><p>如果一个方法（中的语句执行时). 可能生成某种异常, 但是并不能确定如何处理这种异常. 则此方法应该显示地声明抛出异常, 表明该方法将不对这些异常进行处理, 而由该<strong>方法的调用者负责处理</strong>.</p></li><li><p>在方法声明中用throws语句可以声明抛出异常的列表, throws后面的异常类型可以是方法中产生的异常类型, 也可以是它的父类.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.throws_;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Throws</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            f1();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException, NullPointerException &#123; <span class="hljs-comment">//2. 这里也可以是FileNotFoundException的父类:Exception</span><br>        <span class="hljs-comment">//创建了一个文件流对象</span><br>        <span class="hljs-comment">//异常处理</span><br>        <span class="hljs-comment">//FileNotFoundException  编译异常</span><br>        <span class="hljs-comment">//可以try-catch处理, 也可以throws</span><br>        <span class="hljs-comment">//使用throws时, 抛出异常, 让调用f1()方法的调用者(方法)处理</span><br>        <span class="hljs-comment">//throws 关键字之后也可以是异常列表, 即可以抛出多个异常</span><br>        <span class="hljs-comment">//用Exception代替多种异常</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;d://a.txt&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="注意事项和使用细节"><a href="#注意事项和使用细节" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h3><ul><li><strong>对于编译异常, 程序中必须处理</strong>, 比如try-catch 或者 throws    🧡💛💚💙         <strong>编译异常必须处理</strong></li><li>对于运行时异常, 程序中如果没有处理, <strong>默认就是throws方式处理</strong></li><li>子类重写父类方法时, 对抛出异常的规定: 子类重写的方法, <strong>所抛出的异常类型要么和父类抛出的异常一致, 要么为父类抛出的异常的类型的子类型</strong></li><li>在throws过程中, 如果有方法try-catch , 就相当于处理异常, 就可以不必throws</li></ul><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>当程序中出现了某些”错误”, 但是该错误信息并没有在Throwable子类中描述处理, 这个时候可以自己设计异常类, 用于描述该错误信息</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.customexception_;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<span class="hljs-comment">// throws RuntimeException ==&gt;这里throws后面是一个异常类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">180</span>;<br>        <span class="hljs-comment">//要求范围在 18 ~ 120 之间, 否则就抛出一个自定义异常</span><br>        <span class="hljs-keyword">if</span>(!(age &gt;= <span class="hljs-number">18</span> &amp;&amp; age &lt;=<span class="hljs-number">120</span>))&#123;<br>            <span class="hljs-comment">//可以通过构造器,设置信息</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeException</span>(<span class="hljs-string">&quot;年龄需要在18 ~ 120之间&quot;</span>);  <span class="hljs-comment">//throw 后面是对象</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;你的年龄范围正确&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//自定义的一个异常</span><br><span class="hljs-comment">//1. 一般情况,自定义异常继承的时RuntimeException</span><br><span class="hljs-comment">//2. 即把自定义异常做成 运行时异常, 好处是, 我们可以使用默认的处理机制, 比较方便</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">(String message)</span> &#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="throws-和-throw-的区别"><a href="#throws-和-throw-的区别" class="headerlink" title="throws 和 throw 的区别"></a>throws 和 throw 的区别</h1><table><thead><tr><th align="center"></th><th align="center">意义</th><th align="center">位置</th><th align="center">后面跟的东西</th></tr></thead><tbody><tr><td align="center">throws</td><td align="center">异常处理的一种方式</td><td align="center">方法声明处</td><td align="center">异常类型</td></tr><tr><td align="center">throw</td><td align="center">手动生成异常对象的关键字</td><td align="center">方法体内</td><td align="center">异常对象</td></tr></tbody></table><blockquote><p>先finally再throw</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CRM系统_第一天</title>
    <link href="/2022/02/22/CRM%E7%B3%BB%E7%BB%9F_%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2022/02/22/CRM%E7%B3%BB%E7%BB%9F_%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天是开始学习CRM系统这一项目的第一天, 根据<a href="https://b23.tv/7ULVNbW">B站视频</a>进行学习. 希望能加深对 Java 基础知识的理解.</p><p>需要的技术储备: JavaSE基础, SSM框架, Springboot框架, 前端js基础. </p><p>现阶段有的技术储备: JavaSE基础70%</p><p>学完此项目将收获: </p><ol><li>前后端交互的完整流程  </li><li>企业开发过程  </li><li>了解主流开发框架在企业中的使用  </li><li>提升解决问题的能力</li></ol></blockquote><h1 id="CRM包含的模块"><a href="#CRM包含的模块" class="headerlink" title="CRM包含的模块"></a>CRM包含的模块</h1><p><img src="/2022/02/22/CRM%E7%B3%BB%E7%BB%9F_%E7%AC%AC%E4%B8%80%E5%A4%A9/img/essay/CRM.jpg" alt="CRM系统"></p><ol><li><p>基础信息模块</p><p>主要介绍项目基本信息, 登录功能, 项目准备工作(项目开发流程, 数据库中表的设计, 系统模块划分方式, 项目环境搭建方式), 用户登录, 退出,修改密码等基础功能</p></li><li><p>营销管理</p><p>针对营销人员, 对营销机会实现前后端</p></li><li><p>系统管理</p><p>主要是 <strong>用户 角色 资源</strong>. 构成权限管理RBAC(Role-Based Access Control). 拥有特定角色的用户可以操作特定的资源.</p><p>增删改查操作</p></li><li><p>客户管理</p></li><li><p>服务管理</p></li><li><p>数据报表: 图形化操作(柱状图, 饼状图等来分析数据)</p></li></ol><h1 id="CRM用户管理"><a href="#CRM用户管理" class="headerlink" title="CRM用户管理"></a>CRM用户管理</h1><h2 id="1-CRM系统概念与项目开发流程"><a href="#1-CRM系统概念与项目开发流程" class="headerlink" title="1. CRM系统概念与项目开发流程"></a>1. CRM系统概念与项目开发流程</h2><h3 id="1-1-CRM基本概念"><a href="#1-1-CRM基本概念" class="headerlink" title="1.1.CRM基本概念"></a>1.1.CRM基本概念</h3><p>客户关系管理（Customer Relationship Management）管理公司与客户之间的关系, 是一种以”客户关系一对一”理论为基础, 旨在改善企业与客户之间关系的新型管理机制. CRM的实施目标就是通过全面提高企业业务流程的管理来降低企业成本, 通过提供更快速和周到的优质服务来<strong>吸引和保持更多用户</strong>.</p><h3 id="1-2-CRM-分类"><a href="#1-2-CRM-分类" class="headerlink" title="1. 2. CRM 分类"></a>1. 2. CRM 分类</h3><ol><li><p>根据用户类型分类</p><p>B to C CRM 企业对用户</p><p>B to B CRM 企业对企业 </p></li><li><p>根据CRM管理侧重点不同</p><p>操作性CRM(主要)  上班打卡…</p><p>分析型CRM  数据分析统计, 让数据更直观</p></li></ol><h3 id="1-3-企业项目开发流程"><a href="#1-3-企业项目开发流程" class="headerlink" title="1.3. 企业项目开发流程"></a>1.3. 企业项目开发流程</h3><p>![img](file:&#x2F;&#x2F;&#x2F;F:\User\Documents\Tencent Files\1196498420\Image\C2C\70B2DA257A9340538F15C1843509235D.png)</p>]]></content>
    
    
    <categories>
      
      <category>Java项目</category>
      
      <category>CRM系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CRM系统</tag>
      
      <tag>Java项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/02/22/equals%E6%96%B9%E6%B3%95/"/>
    <url>/2022/02/22/equals%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>内部类</title>
    <link href="/2022/02/20/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <url>/2022/02/20/%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>一个类的内部又完整嵌套了另一个类结构. 被嵌套的类称为<strong>内部类</strong>(inner class). 嵌套其他类的类又称为外部类(outer class). 是我们类的<strong>五大成员(属性, 方法, 构造器, 代码块, 内部类)</strong>. 内部类的最大特点就是可以直接访问私有属性, 并且可以体现类与类之间的包含关系.</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<span class="hljs-comment">//内部类</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Other</span>&#123;<span class="hljs-comment">//其他类</span><br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="内部类的分类-4种"><a href="#内部类的分类-4种" class="headerlink" title="内部类的分类( 4种 )"></a>内部类的分类( 4种 )</h1><h3 id="定义在外部类局部位置上-比如方法内"><a href="#定义在外部类局部位置上-比如方法内" class="headerlink" title="定义在外部类局部位置上(比如方法内):"></a>定义在外部类<strong>局部</strong>位置上(比如方法内):</h3><ol><li>局部内部类(有类名)</li><li><strong>匿名内部类</strong>(没有类名, <strong>重点</strong>)  ( •̀ ω •́ )✧</li></ol><h3 id="定义在外部类的成员位置上"><a href="#定义在外部类的成员位置上" class="headerlink" title="定义在外部类的成员位置上:"></a>定义在外部类的成员位置上:</h3><ol><li>成员内部类(没有static修饰)</li><li>静态内部类(使用static修饰)</li></ol><h1 id="1-局部内部类"><a href="#1-局部内部类" class="headerlink" title="1. 局部内部类"></a>1. 局部内部类</h1><h3 id="局部内部类的使用"><a href="#局部内部类的使用" class="headerlink" title="局部内部类的使用"></a>局部内部类的使用</h3><blockquote><p>说明: <strong>局部内部类</strong>是定义在<strong>外部类的局部位置</strong>, 比如<strong>方法中,或者代码块中</strong>, 并且有类名</p></blockquote><ol><li>可以直接访问外部类的所有成员, 包含私有的<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n1  <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//方法</span><br>        <span class="hljs-comment">//1.局部内部类是定义在外部类的局部位置, 通常都是方法中</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<span class="hljs-comment">//局部内部类</span><br>            <span class="hljs-comment">//可以直接访问外部内的所有成员,包含私有的</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//内部类方法</span><br>                System.out.println(n1);<span class="hljs-comment">//这里不会报错</span><br>                m2();<span class="hljs-comment">//也不会报错</span><br>            &#125;<br>        &#125;<br>     <br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>不能添加访问修饰符, 因为它的地位就是一个局部变量. 局部变量是不能使用修饰符的. 但是可以用final修饰, 因为局部变量也可以使用final</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>;<span class="hljs-comment">//这里会报错,因为使用了public修饰局部内部类</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>;<span class="hljs-comment">//这里语法正确</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner_001</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Inner</span>&#123;<br><span class="hljs-comment">//这一句语法是正确的, 只要Inner没有被final修饰</span><br>&#125;<br><br><span class="hljs-comment">//局部内部类就相当于一个局部变量, 作用域只在被定义的方法体内</span><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li><p>作用域: 仅仅在定义它的<strong>方法或者代码块中</strong></p><p>局部内部类就相当于一个局部变量, 作用域只在被定义的方法体内</p></li><li><p>局部内部类访问外部类成员[访问方式: 直接访问]</p></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span><span class="hljs-number">12</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> n1;<span class="hljs-comment">//直接访问外部类的成员</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li>外部类访问局部类成员[访问方式:<strong>创建对象, 再访问</strong>, <strong>必须在作用域内</strong>]</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br><span class="hljs-type">int</span> n1;<br>&#125;<br><br>    <span class="hljs-type">Inner</span> <span class="hljs-variable">inner001</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>    inner001.n1;<span class="hljs-comment">//外部类访问内部类成员, 需要创建对象</span><br>    <span class="hljs-comment">//而且必须在内部类的作用域内, 比如这里必须在m()方法内才能创建内部类对象</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>记住<strong>三点</strong></p><ol><li><strong>局部内部类定义</strong>在<strong>方法或者代码块</strong>中</li><li><strong>作用域</strong>在方法体或者代码块中</li><li><strong>本质</strong>仍然是一个类</li></ol><h3 id="局部内部类的其他细节"><a href="#局部内部类的其他细节" class="headerlink" title="局部内部类的其他细节"></a>局部内部类的其他细节</h3><ol><li><strong>外部其他类不能访问局部内部类</strong>(因为局部内部类是一个局部变量)</li><li>如果外部类和局部内部类的成员<strong>重名时</strong>,遵循<strong>就近原则</strong>, 如果想访问外部类的成员, 则可以使用(<strong>外部类名.this.成员名</strong>)去访问</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;外部类的 n = &quot;</span> + Outer.<span class="hljs-built_in">this</span>.n);<br></code></pre></div></td></tr></table></figure><blockquote><p>原因: 这里的<code>Outer.this</code> 本质是外部类Outer的一个对象, 哪个对象调用的这个使用了<code>Outer.this</code>的内部类所在的方法, 那么这个<code>Outer.this</code>就指向这个调用该方法的对象.</p><p>比如建立了一个<code>Outer</code>对象<code>outer001</code>, 这个<code>outer001</code>调用了<code>m()</code>方法, <code>m()</code>方法中有内部类<code>Inner</code> ,<code>Inner</code>内部又有<code>Outer.this</code>, 那么这个<code>Outer.this</code>则指向<code>outer001</code></p></blockquote><h1 id="2-匿名内部类"><a href="#2-匿名内部类" class="headerlink" title="2. 匿名内部类"></a>2. 匿名内部类</h1><blockquote><p>说明:匿名内部类是定义在外部类的<strong>局部位置</strong>, 比如方法中, 并且<strong>没有类名</strong></p></blockquote><h3 id="匿名内部类的使用-基于接口-—-实现接口"><a href="#匿名内部类的使用-基于接口-—-实现接口" class="headerlink" title="匿名内部类的使用(基于接口)    —-  实现接口"></a>匿名内部类的使用(基于接口)    —-  实现接口</h3><blockquote><ol><li>本质是类</li><li>内部类</li><li>该类没有名字(系统取名, 用户不定义其名字)</li><li>同时还是一个对象</li></ol></blockquote><ol><li>匿名内部类的基本语法</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 类或接口(参数列表)&#123;<br>    类体<br>&#125;;<span class="hljs-comment">//分号不能少, 这里整体相当于一个语句</span><br></code></pre></div></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//方法</span><br>        <span class="hljs-comment">//基于接口的匿名内部类</span><br>        <span class="hljs-comment">//1. 需求: 想使用IA接口, 并创建对象</span><br>        <span class="hljs-comment">//2. 传统方式: 写一个类, 实现该接口, 并创建对象</span><br>        <span class="hljs-type">IA</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tiger</span>();<br>        tiger.cry();<br>        <br>        <span class="hljs-comment">//3. tiger只想使用一次呢? 上述方式有点啰嗦,假如又狗猫什么很多动物, 这样定义是很烦的</span><br>        <span class="hljs-comment">//4. 因此可以使用匿名内部类来简化开发</span><br>        <br>       <span class="hljs-type">IA</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">IA</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;老虎叫&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//这里就不用再单独创建一个Tiger类了, 直接使用的匿名内部类</span><br>        <br>        <br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><span class="hljs-comment">//实现接口,创建对象, 不使用匿名内部类的时候, 就需要创建一个类并实现IA接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;嗷呜~~~~~~~&quot;</span>)<br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>看底层, 匿名内部类的实质</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">XXXX</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>&#123;<br>    ...<br>&#125;<br>XXXX是系统分配的, 外部类+$分配数字,  如上述代码的名字为Outer$<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p><strong>匿名内部类虽然只使用一次, 但是创建的对象可以多次使用</strong></p><p>如上述的Outer$1不能再使用了, 但是tiger可以再次使用</p><h3 id="匿名内部类的使用-基于类-——-实现继承"><a href="#匿名内部类的使用-基于类-——-实现继承" class="headerlink" title="匿名内部类的使用(基于类)    ——-  实现继承"></a>匿名内部类的使用(基于类)    ——-  实现继承</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//基于类的匿名内部类</span><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">father</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>(<span class="hljs-string">&quot;jack&quot;</span>)&#123;<br>            <span class="hljs-comment">//参数列表 传送给Father的构造器, 匿名内部类一般不建立自己的构造器</span><br>            <span class="hljs-comment">//这里的运行类型是匿名内部类Test$1, 不是Father</span><br>            <br>        &#125;;<span class="hljs-comment">//分号不能少, 这是一个语句</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这里的匿名内部类本质是:</span><br><span class="hljs-comment">class Test$1 extends Father&#123;// 继承Father类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;Test$1 是在类Test内的内部类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">(String name)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>匿名内部类的语法比较奇特, 因为匿名内部类<strong>既是一个类的定义</strong>, <strong>同时它本身也是一个对象</strong>, 因此从语法上来看, 它既有定义类的特征, 也有创建对象的特征</p><p>因此可以直接调用, 匿名内部类本身也是返回对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br>        ...<br>    &#125;<br>&#125;.hi();<br></code></pre></div></td></tr></table></figure><ul><li>可以直接访问外部类的所有成员, 包含私有的</li><li>不能添加访问修饰符, 因为它的地位就是一个局部变量</li><li><strong>作用域: 仅仅在它的方法或代码块中</strong></li><li>匿名内部类访问外部成员是直接访问的</li><li>外部其他类不能访问匿名内部类(因为匿名内部类是一个局部变量)</li><li>如果外部类和内部类的成员重名时, 内部类访问时遵循就近原则, 若要访问外部类, 则使用( 外部类名.this.成员) 访问, 方法同局部内部类</li></ul><h3 id="匿名内部类的最佳实践"><a href="#匿名内部类的最佳实践" class="headerlink" title="匿名内部类的最佳实践"></a>匿名内部类的最佳实践</h3><ul><li>当做实参直接传递, 简洁高效</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//当作实参直接传递, 简洁高效</span><br>        <span class="hljs-comment">//本质传递了一个对象, 而且这个对象实现了IL接口</span><br>        f1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IL</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;直接在方法的参数列表&quot;</span>);<br>            &#125;<br>        &#125;);<span class="hljs-comment">//分号不可少,因为这是一个语句</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(IL il)</span>&#123;<br>        il.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IL</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>课堂练习</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.InnerClass;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 蓝鸟x</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Anonymous</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellPhone</span>().alarmClock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;懒狗起床了&quot;</span>);<br>            &#125;<br><br>        &#125;);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellPhone</span>().alarmClock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;上课了&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bell</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CellPhone</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">alarmClock</span><span class="hljs-params">(Bell bell)</span>&#123;<br>        bell.ring();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>包含的知识点: </p><ol><li>继承</li><li>多态</li><li>动态绑定</li><li>内部类</li></ol></blockquote><h1 id="3-成员内部类"><a href="#3-成员内部类" class="headerlink" title="3. 成员内部类"></a>3. 成员内部类</h1><blockquote><p>说明:成员内部类是<strong>定义在外部类的成员位置</strong>, 并且<strong>没有static修饰</strong></p></blockquote><ul><li>可以直接访问外部类的所有成员, 包含私有的</li><li>可以添加任意访问修饰符(public, protected, 默认, private), 因为<strong>它的地位就是一个成员</strong></li><li>作用域和其他外部类的其他成员一样, 为整个类体. </li><li>成员内部类访问外部类成员时, 直接访问</li><li>外部类访问内部类成员, 先创建内部类对象, 再访问</li><li>外部其他类访问成员内部类(三种方式):</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1.</span> Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner001</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<span class="hljs-comment">//new Inner()当作new Outer()的成员</span><br><span class="hljs-number">2.</span> 在外部内定义一个getInner()方法, 可以返回内部类对象<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Inner <span class="hljs-title function_">getInner</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//需要参数加参数即可</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>    &#125;<br>&#125;<br><span class="hljs-number">3.</span> 本质同方式<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><ul><li>如果外部类和内部类成员重名的时候, 内部类访问的话, 默认遵循就近原则, 如果想访问外部类的成员, 可以使用(外部类名.this.成员)去访问</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>            n2 = Outer.<span class="hljs-built_in">this</span>.n2;<span class="hljs-comment">//部类名.this.成员</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h1><blockquote><p>说明: 静态内部类是定义在外部类的成员位置, 并且有static修饰</p></blockquote><ul><li>可以直接访问外部类的所有静态成员, 包含私有的, 但<strong>不能直接访问非静态成员</strong> → 可以通过创建外部类对象去访问</li><li>可以添加任意访问修饰符(public private 默认 protected). 因为<strong>它的位置就是一个成员</strong></li><li>作用域: 和其他成员一样, 为整个类体</li><li>静态内部类<strong>直接访问外部类静态成员</strong></li><li>访问非静态类时, 先创建外部类对象, 再访问</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> outer.n;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>外部其他类访问静态内部类, 只要静态内部类不被private修饰就能直接访问</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1.</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.Inner();<br><span class="hljs-number">2.</span> 外部类设置一个get方法返回Inner对象<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br></code></pre></div></td></tr></table></figure><ul><li>如果外部类和静态内部类的成员变量重名时, 静态内部类访问时, 默认遵循就近原则, 如果想访问外部类成员, 则可以使用(外部类名.成员) 去访问</li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol><li><p>内部类有四种: <strong>局部内部类  匿名内部类  成员内部类  静态内部类</strong></p></li><li><p>重点掌握<strong>匿名内部类</strong></p><p>new 类&#x2F;接口(参数列表){};  &#x2F;&#x2F;分号不能少</p></li><li><p>成员内部类, 静态内部类 是放在外部类的成员位置, 本质是一个成员</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>面向对象部分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>枚举类</title>
    <link href="/2022/02/20/%E6%9E%9A%E4%B8%BE%E7%B1%BB%20enum/"/>
    <url>/2022/02/20/%E6%9E%9A%E4%B8%BE%E7%B1%BB%20enum/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举类-enum"><a href="#枚举类-enum" class="headerlink" title="枚举类 enum"></a>枚举类 enum</h1><blockquote><p>本文章是通过学习B站视频<a href="https://www.bilibili.com/video/BV1fh411y7R8?p=425">【零基础 快速学Java】韩顺平 零基础30天学会Java_哔哩哔哩_bilibili</a>写的笔记</p><p align="right">2022/2/20</p></blockquote><p>😃给自己的代码加头</p><p><img src="https://img-blog.csdnimg.cn/80e0adcdf52d423b923941f476de04c8.png" alt="操作流程"></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>当有多个固定的对象需要定义时, 如果每一个对象都要新建, 例如对于季节类, 需要春夏秋冬四个对象, 而按照之前所学内容, 要用户来创建对象, 那么四个季节就不固定. 季节只有四个, 用户定义没限制. 枚举类型是把具体的对象一个一个列举出来的类,因此季节可用枚举类来设计季节类</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>枚举是一组常量的集合. 可以理解为: 枚举属于<strong>一种特殊的类</strong>, 里面只包含一组有限的特定的对象</p><h2 id="自定义枚举流程"><a href="#自定义枚举流程" class="headerlink" title="自定义枚举流程"></a>自定义枚举流程</h2><ol><li>使用关键字<code>enum</code> 替代 <code>class</code></li><li>定义常量, 例如: <strong>本质</strong>是<code>public static final Season SPRING = new Season(&quot;Spring&quot;, &quot;warm&quot;); </code>可以直接用<code>SPRING(&quot;Spring&quot;, &quot;warm&quot;)</code> 替代. 解读: <code>常量名( 实参列表...)</code></li><li>如果有<strong>多个常量, 使用 <code>,</code> 间隔</strong>即可. 例如<code>SPRING(&quot;Spring&quot;, &quot;warm&quot;), SUMMER(&quot;Summer&quot;, &quot;hot&quot;);</code> </li><li>🐳🐳🐳使用enum来实现枚举, 要求将定义的常量<strong>写在最前面</strong></li></ol><h2 id="enum关键字实现枚举注意事项"><a href="#enum关键字实现枚举注意事项" class="headerlink" title="enum关键字实现枚举注意事项"></a><code>enum</code>关键字实现枚举注意事项</h2><ol><li>当我们使用enum关键字来开发一个枚举类时, 默认会继承Enum类, 这里使用javap工具来进行反编译验证<br><img src="https://img-blog.csdnimg.cn/e3ee96f82e8a4053ae0b0a10c6e02951.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JOd6bifeA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Compiled from <span class="hljs-string">&quot;Enumeration01.java&quot;</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.hspedu.enum_.Season2 <span class="hljs-keyword">extends</span> <span class="hljs-title class_">java</span>.lang.Enum&lt;com.hspedu.enum_.Season2&gt; &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 SPRING;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 SUMMER; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 AUTUMN; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 WINTER; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> com.hspedu.enum_.Season2[] values(); <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> com.hspedu.enum_.Season2valueOf(java.lang.String); <br><span class="hljs-keyword">public</span> java.lang.String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>; <br><span class="hljs-keyword">public</span> java.lang.String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span>; <br><span class="hljs-keyword">public</span> java.lang.String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>; <br><span class="hljs-keyword">static</span> &#123;&#125;; <br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>传统的 public static final Season2 SPRING &#x3D; new Season2(“春天”, “温暖”); 简化成SPRING(“春天”, “温暖”); 这里要明白它调用的哪个构造器.  格式: <strong>对象名(实参列表)</strong>, 这里实参列表是<strong>传给构造器的</strong> </li><li>如果使用无参构造器, 创建枚举对象, 则<strong>实参列表和小括号都可以省略(省不省略都可以)</strong> </li><li>当<strong>有多个枚举对象的时候,使用’ , ‘ 间隔,</strong> 最后一个用分号结尾 枚举对象必须放在枚举类的行首</li></ol><h2 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span>&#123;<br>BOY, GIRL;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>正确的写法, 调用无参构造器, 对象名是BOY, 和GIRL. 这里对象名就是常量名, 一般枚举类内部定义的变量后续操作不可更改, 视为常量.</p><h2 id="enum常用方法说明"><a href="#enum常用方法说明" class="headerlink" title="enum常用方法说明"></a>enum常用方法说明</h2><blockquote><p>原理: 使用enum时, 会所建类会隐式继承Enum类, 这样我们就可以使用Enum类相关的方法<br>**对象名.name(); **输出对象的名字<br>**对象名.ordinal();**输出对象的编号,从0开始<br><strong>类名.values();</strong> 返回枚举类定义的所有对象, 返回的是一个数组<br>新知识点: 增强for循环, <code>for(Season2 season : values)&#123;&#125;</code>&#x2F;每次循环将数组的一个元素传入到season, 没有了就退出<br>**类名.valueOf()**将字符串转化为枚举对象, 要求字符串必须为已有的常量名, 否则报错</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.根据输入的名称&quot;SPRING&quot;到Season2的枚举类对象去查找,找到了就返回给spring1对象,否则报错</span><br>Season2  spring1=Season2.valueOf(<span class="hljs-string">&quot;SPRING&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>且返回类型的对象引用类型, 即运行类型的地址</p><p><strong>compareTo</strong> 比较两个枚举常量(对象), 比较的是编号对应values</p><h2 id="enum实现接口"><a href="#enum实现接口" class="headerlink" title="enum实现接口"></a>enum实现接口</h2><p>使用enum关键字后, 所创建的类不能再继承其他类了, 因为enum会隐式继承Enum, 而java是单继承机制<br>枚举类和普通类一样, 可以实现接口, 如下格式</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> 类名 implements 接口<span class="hljs-number">1</span>, 接口<span class="hljs-number">2</span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><table><tr><td bgcolor="#bfe1f1">以上就是enum类的全部内容了, 有不正确的地方欢迎大佬指正, 在下是编程小白蓝鸟x</td></tr></table>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="/2022/02/20/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <url>/2022/02/20/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h2><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回 -1 </p><p>示例1:</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">输入：<br>[<span class="hljs-string">&quot;CQueue&quot;</span>,<span class="hljs-string">&quot;appendTail&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>]<br>[[],[<span class="hljs-number">3</span>],[],[]]<br>输出：[null,null,<span class="hljs-number">3</span>,<span class="hljs-number">-1</span>]<br></code></pre></div></td></tr></table></figure><p>示例2:</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">输入：<br>[<span class="hljs-string">&quot;CQueue&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>,<span class="hljs-string">&quot;appendTail&quot;</span>,<span class="hljs-string">&quot;appendTail&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>]<br>[[],[],[<span class="hljs-number">5</span>],[<span class="hljs-number">2</span>],[],[]]<br>输出：[null,<span class="hljs-number">-1</span>,null,null,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>]<br></code></pre></div></td></tr></table></figure><p>思路:</p><blockquote><p>维护两个栈，第一个栈支持插入操作，第二个栈支持删除操做. 插入操作时, 数据元素先被顺序插入第一个栈, 随后再从第一个栈取出插入到第二个栈, 最后从第二个栈一一删除</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f1ebe6b526934309b05440a03f979dde.gif" alt="在这里插入图片描述"></p><p>代码: </p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">CQueue</span> &#123;<br>    Deque&lt;Integer&gt; stack1;<br>    Deque&lt;Integer&gt; stack2;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CQueue</span>()</span> &#123;<br>        stack1 = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        stack2 = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">appendTail</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span></span>)</span> &#123;<br>        stack1.push(<span class="hljs-keyword">value</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">deleteHead</span>()</span> &#123;<br>        <span class="hljs-comment">// 第二个栈为空时, 执行数据元素从栈1向栈2转移</span><br>        <span class="hljs-keyword">if</span> (stack2.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (!stack1.isEmpty()) &#123;<br>                stack2.push(stack1.pop());<br>            &#125;<br>        &#125; <br>        <span class="hljs-comment">//转移完毕后, 栈2仍然为空返回-1, 否则将栈2元素一一删除</span><br>        <span class="hljs-keyword">if</span> (stack2.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">int</span> deleteItem = stack2.pop();<br>            <span class="hljs-keyword">return</span> deleteItem;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>复杂度分析时间复杂度为O(1), 空间复杂度为O(n)</p>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
      <tag>算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>房屋出租系统(初级)</title>
    <link href="/2022/02/17/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E7%B3%BB%E7%BB%9F(%E5%88%9D%E7%BA%A7)/"/>
    <url>/2022/02/17/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E7%B3%BB%E7%BB%9F(%E5%88%9D%E7%BA%A7)/</url>
    
    <content type="html"><![CDATA[<p>本项目是根据<a href="https://www.bilibili.com/video/BV1fh411y7R8?p=362">【零基础 快速学Java】韩顺平 零基础30天学会Java_哔哩哔哩_bilibili</a> 课程进行的。项目的主要目的是巩固一下以前学习的 Java基础 知识。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>​    实现基于文本界面的房屋出租系统，能够实现对房屋信息的添加，修改和删除（用数组实现），并且能够打印房屋明细表。</p><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><ul><li>主菜单<ol><li>新 增 房 源</li><li>查 找 房 屋</li><li>删 除 房 屋</li><li>修 改 房 屋 信 息</li><li>房 屋 列 表</li><li>退           出</li></ol></li><li>新增房源<ul><li>姓名：</li><li>电话：</li><li>地址：</li><li>月租：</li><li>状态（未出租&#x2F;已出租）:</li></ul></li><li>查找房源<ul><li>请输入查找的id：</li><li>有id    姓名   电话   地址   租金   状态</li></ul></li><li>删除房源<ul><li>选择要删除的房屋编号</li><li>再次确认</li></ul></li><li>修改房源<ul><li>选择房屋编号</li><li>列出修改的信息（不修改的地方直接回车）</li></ul></li><li>退出系统<ul><li>再次确认</li><li>输出：你退出了程序~~~</li></ul></li></ul><h2 id="项目设计-程序框架"><a href="#项目设计-程序框架" class="headerlink" title="项目设计-程序框架"></a>项目设计-程序框架</h2><p><img src="https://img-blog.csdnimg.cn/1c3e603acc7443fcb8fb49cd5cac7c34.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JOd6bifeA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="房屋出租系统框架图"></p><p>上图每一个类对应一个包，便于管理。虽然最初设计时只有一个类或者一个文件，但是随着项目后续的完善，所对应的相关类有很多，因此这里的每个类对应一个包。上述图片用<a href="https://www.iodraw.com/diagram/">ioDraw</a>绘制</p><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><p>实际开发中，公司都会提供对应的工具类和开发库，可以提高开发效率。因此在日常学习中要能够看懂别人写的代码，并正确调用</p><p>这里的 <code>utility</code> 类是课程提供的,  可在<a href="https://blog.csdn.net/m0_52228020/article/details/120975203">(16条消息) 韩顺平Utility工具类(java房屋出租项目)_m0_52228020的博客-CSDN博客</a>复制到自己的项目里.</p><h4 id="House类"><a href="#House类" class="headerlink" title="House类"></a>House类</h4><p>House类的属性有 编号, 房主, 电话, 地址, 月租, 状态. House的对象表示一个房屋信息</p><p>将各属性写入House类, 并且设立相应的构造器与 setter 与 getter 方法, 为了方便输出对象信息, 还应该实现toString 方法的重写</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> id +<br>            <span class="hljs-string">&quot;\t&quot;</span> + name + <br>            <span class="hljs-string">&quot;\t&quot;</span> + phone +<br>            <span class="hljs-string">&quot;\t&quot;</span> + address +<br>            <span class="hljs-string">&quot;\t&quot;</span> + rent +<br>            <span class="hljs-string">&quot;\t&quot;</span> + state;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="HouseView类-与-HouseService类"><a href="#HouseView类-与-HouseService类" class="headerlink" title="HouseView类 与 HouseService类"></a>HouseView类 与 HouseService类</h4><p>HouseView类用于显示，HouseService类用于给HouseView类传输相应的数据，如HouseView中有listHouse()方法，而HouseService中的list()方法用于给listHouse()方法传送房屋列表的信息.  个人理解: HouseView相当于前端, HouseService相当于后端.</p><ol><li>实现主菜单和完成退出软件的功能</li></ol><p>说明：实现功能的三步曲[明确功能 –&gt; 思路分析 –&gt; 代码实现]</p><ul><li><p>功能说明:</p><p>用户打开软件, 可以看见主菜单, 可退出软件</p></li><li><p>思路分析:</p><p>在HouseView.java中, 编写一个方法mainMenu, 显示菜单.</p></li><li><p>实现效果</p><blockquote><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;房屋出租系统菜单&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>       1 新 增 房 源<br>       2 查 找 房 源<br>       3 删 除 房 源 信 息<br>       4 修 改 房 源 信 息<br>       5 房 屋 列 表<br>       6 退      出<br>       7 新增房源<br>请输入你的选择(1 ~ 6):<br>1<br>新 增</p></blockquote></li></ul><ol start="2"><li><p>完成显示房屋列表的功能</p><ul><li><p>功能说明: 显示房屋列表的各个信息</p></li><li><p>思路分析: 需要编写HouseView.java 和 HouseService.Java</p><p>在显示房屋列表时, 如果总房源数小于数组容量, 应该设置 break 语句, 防止输出空指针</p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listHouses</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===================房屋列表==================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;编号\t\t房主\t\t电话\t\t地址\t\t月租\t\t状态(未出租/已出租)&quot;</span>);<br>        House[] houses = houseService.list();<span class="hljs-comment">//得到房屋信息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; houses.length; i++) &#123;<span class="hljs-comment">//   1.这里不因该用houses.length, 因为houses是能表示的房屋总数, 实际存在的房屋因该另外设置变量</span><br>            <span class="hljs-comment">//2. 或者加一个判断</span><br>            <span class="hljs-keyword">if</span>(houses[i] == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(houses[i]);  <span class="hljs-comment">//这里输出房屋的基本信息, 默认输出调用的是toString方法</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;===================房屋列表显示完毕==================&quot;</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>实现效果</p><blockquote><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;     房 屋 列 表       &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>编号        房主        电话        地址        月租        状态(未出租&#x2F;已出租)<br>1        jack    113        海定区    2000    未出租<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;房屋列表显示完毕&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p></blockquote></li><li><p>添加房屋信息功能</p><ul><li><p>功能说明与思路分析</p><p>在HouseView设置addHouse()方法, 用于前端显示. 在HouseService中添加 add()方法, 用于添加房屋信息, 并返回boolean值</p><p>在HouseService中设置houseNums的整型变量来记录当前房屋信息, 并通过如下方式将创建的房屋对象加入到数组中.</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">houses[houseNums++] = newHouse;<span class="hljs-comment">// 把newHouse信息加入到数组</span><br></code></pre></div></td></tr></table></figure><p>在HouseService中设置idCounter的整型变量来记录当前房屋id增长到哪一个值了, 并通过如下的方式来更新新加入的房屋id(创建房屋对象时设置的id为0(任意值均可,反正会修改)).</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">newHouse.setId(++idCounter);<span class="hljs-comment">//更新newHouse的id</span><br></code></pre></div></td></tr></table></figure><p>添加房屋信息时实现了对House数组的扩容机制, 方法如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * House数组扩容,每次增加10个</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> houses</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> House[] addLengthArray(House[] houses)&#123;<br>    House[] houses1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">House</span>[houses.length + <span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; houses.length; i++) &#123;<span class="hljs-comment">//一一复制</span><br>        houses1[i] = houses[i];<br>    &#125;<br>    <span class="hljs-comment">//houses = houses1;</span><br>    <span class="hljs-keyword">return</span> houses1;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>addLengArray() 方法位于HouseService类中</p></blockquote><ul><li><p>实现效果</p><blockquote><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  添 加 房 屋  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>姓名: jack<br>電話: 112<br>地址: China<br>月租: 3000<br>状态(已出租&#x2F;未出租): 已出租<br>“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  添加房屋成功  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”</p></blockquote></li><li><p>删除房源</p><ul><li><p>功能说明: </p><p>用户输入待删除的房屋编号, 并二次确认, 然后系统删除该id对应的房屋信息. 当该id不存在时, 系统应该提示删除失败</p></li><li><p>思路分析</p><p>编写HouseView和HouseService方法</p></li><li><p>HouseService中的del方法</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> delId)</span>&#123;<br>       <span class="hljs-comment">//先找出对应的id的房屋信息对应的编号</span><br>       <span class="hljs-comment">//注意编号和id是不一样的</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">//作为哨兵</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; houseNums; i++) &#123;<br>           <span class="hljs-keyword">if</span>(delId == houses[i].getId())&#123;<span class="hljs-comment">//房屋id与i对应的id相同时</span><br>               index = i; <span class="hljs-comment">//用index记录i</span><br>               <br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(index == -<span class="hljs-number">1</span>)&#123;<br>           <span class="hljs-comment">//index没变, 说明数组中不存在此id</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       &#125;<br>       <span class="hljs-comment">//如果找到, 后面对象前移覆盖要删除的房屋对象</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> index; i &lt; houseNums - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-comment">//num从1开始,而下标从0开始</span><br>           houses[i] = houses[i+<span class="hljs-number">1</span>];<br>           <br>       &#125;<br>       houses[--houseNums] = <span class="hljs-literal">null</span>;  <span class="hljs-comment">//--houseNums对应最后一个房屋信息, 正好也把houseNums减1</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br></code></pre></div></td></tr></table></figure><ul><li>HouseView中的delId方法</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//编写delHouse() 接收输入的id, 调用HouseService的del方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delHouse</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===================  删除房屋信息  ==================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;请输入待删除房屋的id(-1)表示退出:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">delId</span> <span class="hljs-operator">=</span> Utility.readInt();<br>        <span class="hljs-keyword">if</span>(delId == -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;=================  放弃删除房屋信息  ==================&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>      <span class="hljs-comment">//  System.out.println(&quot;请确认是否删除(Y/N), 请小心选择:&quot;);</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> Utility.readConfirmSelection();<span class="hljs-comment">//该方法本身就有循环逻辑</span><br>        <span class="hljs-keyword">if</span>(choice == <span class="hljs-string">&#x27;Y&#x27;</span>)&#123;<br>            <span class="hljs-comment">//真的删除</span><br>            <span class="hljs-keyword">if</span>(houseService.del(delId))&#123;<br>                System.out.println(<span class="hljs-string">&quot;=================  删除房屋信息成功  ==================&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;=================  删除房屋信息编号不存在  ==================&quot;</span>);<br>            &#125;<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;=================  放弃删除房屋信息  ==================&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>退出确认机制</p><ul><li>使用Utility提供的方法, 完成确认</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//这里使用Utility提供的方法, 完成退出确认</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Utility.readConfirmSelection();<br>      <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;Y&#x27;</span>)&#123;<br>          loop = <span class="hljs-literal">false</span>;<br>      &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>根据id查找房屋信息</p><ul><li><p>功能说明:</p><p>根据用户输入的id, 查找出已有房源. 先确认输入的信息有效, 如果能找到则显示, 找不到就报错</p></li><li><p>思路分析</p><p>需要同时编写HosueView类, 和HosueService类. 实现houseSerch与Serch方法</p></li><li><p>小小bug</p><p>这里发现了一个Utility的bug, 当我在readInt() 前面没有输出信息的时候, 程序就会卡在这里不动, 即便我回车也没有继续执行, 希望有大佬指点一二.</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">houseFind</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入要查找的房屋id:&quot;</span>);<span class="hljs-comment">//当没有这一条语句时, 下一条语句无法跳出</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">findId</span> <span class="hljs-operator">=</span> Utility.readInt();<span class="hljs-comment">//Utility是上文提供的工具类</span><br><br>        <span class="hljs-type">House</span> <span class="hljs-variable">tempHouse</span> <span class="hljs-operator">=</span> houseService.find(findId);<br><br>        <span class="hljs-keyword">if</span>(tempHouse == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;不存在此id的房屋&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        System.out.println(tempHouse);<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>bug已解决, 是我突然降智了, 哈哈哈.</p><ul><li><p>修改房屋信息</p><ul><li><p>功能说明: 先让用户输入需要修改的房屋id, 再通过此id查找到对应房屋, 并对其信息进行修改</p></li><li><p>思路分析:需要同时编写HosueView类, 和HosueService类. 实现modifyHouse与modify方法</p></li><li><p>特别说明:</p><p>因为houseService.find()  返回的是引用类型, 因此对其返回对象的修改其实是修改houses数组里对应的House对象</p></li><li><p>代码如下:</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改房屋信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">modifyHouse</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;==================修改房屋信息=================&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;请选择待修改的房屋编号(-1表示退出)&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">modifyId</span> <span class="hljs-operator">=</span> Utility.readInt();<br>   <span class="hljs-comment">// houseService.modify(modifyId);</span><br>    <span class="hljs-keyword">if</span>(modifyId == -<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;你放弃了房屋修改&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br><br>    &#125;<br>    <span class="hljs-type">House</span> <span class="hljs-variable">modifyHouse</span> <span class="hljs-operator">=</span> houseService.find(modifyId);<br>    <span class="hljs-keyword">if</span>(modifyHouse == <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;该id对应的房屋信息不存在&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;姓名(&quot;</span>+modifyHouse.getName() +<span class="hljs-string">&quot;):&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">8</span>,modifyHouse.getName());<br>    <span class="hljs-keyword">if</span>(!modifyHouse.getName().equals(name))&#123;<br>        modifyHouse.setName(name);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;电话(&quot;</span>+modifyHouse.getPhone() +<span class="hljs-string">&quot;):&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">12</span>,modifyHouse.getPhone());<br>    <span class="hljs-keyword">if</span>(!modifyHouse.getPhone().equals(phone))&#123;<br>        modifyHouse.setPhone(phone);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;地址(&quot;</span>+modifyHouse.getAddress() +<span class="hljs-string">&quot;):&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">18</span>,modifyHouse.getAddress());<br>    <span class="hljs-keyword">if</span>(!modifyHouse.getAddress().equals(address))&#123;<br>        modifyHouse.setAddress(address);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;月租(&quot;</span>+modifyHouse.getRent() +<span class="hljs-string">&quot;):&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rent</span>  <span class="hljs-operator">=</span> Utility.readInt(modifyHouse.getRent());<br>    <span class="hljs-keyword">if</span>(modifyHouse.getRent() != rent)&#123;<br>        modifyHouse.setRent(rent);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;状态(&quot;</span>+modifyHouse.getState() +<span class="hljs-string">&quot;):&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">8</span>,modifyHouse.getState());<br>    <span class="hljs-keyword">if</span>(!modifyHouse.getState().equals(state))&#123;<br>        modifyHouse.setState(state);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>​    以上就是房屋出租系统的全部内容了, 本项目并非自己独立完成, 在项目许多搞不明白的地方是看着老韩的视频逐步写下来的. 虽然在这个项目上老是磕磕绊绊, 但最终还是完成了. 本来一天的时间就已经足够了的, 因为自己第一天起床晚加上当天晚上又去看迪迦奥特曼, 导致第一天学了3小时多一点. 希望以后在写项目的过程中要合理安排时间. 另外, 在以后还应当提升自己的表达能力, 目前对于问题的分析以及自己想法的陈述还有诸多不足, 希望接下来能一点一点向前进步.</p>]]></content>
    
    
    <categories>
      
      <category>Java项目</category>
      
      <category>房屋出租系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目</tag>
      
      <tag>房屋出租</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客优化</title>
    <link href="/2022/02/16/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <url>/2022/02/16/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="个人博客的优化"><a href="#个人博客的优化" class="headerlink" title="个人博客的优化"></a>个人博客的优化</h1><h2 id="1-自动部署"><a href="#1-自动部署" class="headerlink" title="1. 自动部署"></a>1. 自动部署</h2><p>对于个人博客，如果设置为自动部署，每一次发布文章时还需要手动更新 GitHub 仓库中的内容，如果设置为自动部署，那么以后在本地修改博客内容以后便会自动更新 GitHub 中的内容</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>首先我们要确保本地 Hexo 是可以正确运行的，比如</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></div></td></tr></table></figure><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>如果 Hexo 可以正常地部署到 GitHub，那么实际上你原来的秘钥是可以正常使用的。</p><p>以下为 macOS 下的操作，Linux 下操作方法相同，Windows 10 用户可以在市场中安装 Ubuntu 以后执行：</p><h2 id="添加标签页和分类页"><a href="#添加标签页和分类页" class="headerlink" title="添加标签页和分类页"></a>添加标签页和分类页</h2><p>现在使用的主题里打开<code>_config.yml</code>文件（这里一定要是themes文件下所含的主题，不要弄错了）。按下<code>Ctrl+F</code>，搜索<code>menu</code>，找到如下内容：</p><p><img src="/2022/02/16/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BC%98%E5%8C%96/Users\Administrator.DESKTOP-VVE6ROJ\AppData\Roaming\Typora\typora-user-images\image-20220216180517037.png" alt="image-20220216180517037"></p><p>按照自己的要求对代码进行修改，让菜单按钮显示出来。</p><p>在blog文件夹下打开 git bash 键入如下命令</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo n page tags<br></code></pre></div></td></tr></table></figure><p>可以发现在 source  文件夹下出现一个 tags 文件夹，</p><h3 id="文章页"><a href="#文章页" class="headerlink" title="文章页"></a>文章页</h3><h4 id="便签使用"><a href="#便签使用" class="headerlink" title="便签使用"></a>便签使用</h4><figure class="highlight django"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><span class="language-xml"></span><br><span class="language-xml">文字 或者 `markdown` 均可</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></div></td></tr></table></figure><p>使用时 <div class="note note-primary">            <p>和 </p>          </div> 需单独一行，否则会出现问题</p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续~~~~"></a>未完待续~~~~</h1>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客的搭建</title>
    <link href="/2022/02/16/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/02/16/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这是蓝鸟x发布的第一篇文章</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>直接在<code>github page</code>平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且<code>hexo</code>作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</p><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a><code>Hexo</code>简介</h2><p><code>Hexo</code>(中文官方网站)是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. <code>Hexo</code>支持<code>Github</code> <code>Flavored</code> <code>Markdown</code>的所有功能, 甚至可以整合<code>Octopress</code>的大多数插件. 并自己也拥有强大的插件系统.</p><h2 id="Hexo-搭建教程"><a href="#Hexo-搭建教程" class="headerlink" title="Hexo 搭建教程"></a><code>Hexo</code> 搭建教程</h2><h6 id="本次教程有-8-个部分，详细介绍了如何搭建个人博客"><a href="#本次教程有-8-个部分，详细介绍了如何搭建个人博客" class="headerlink" title="本次教程有 8 个部分，详细介绍了如何搭建个人博客"></a>本次教程有 8 个部分，详细介绍了如何搭建个人博客</h6><ul><li>安装 <code>Git</code></li><li>安装 <code>Node.js</code></li><li>安装 <code>Hexo</code></li><li><code>Github</code> 创建个人仓库</li><li>更改主题</li><li>发布文章<h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 <code>Git</code></h3><blockquote><p>本教程使用的系统是<code>Windows10 Pro</code></p></blockquote></li></ul><p> 到 <a href="https://git-scm.com/download/win">Git</a> 官网下载并安装即可，下载后有一个Git Bash的命令行工具，以后就用这个命令行工具来使用git</p><h3 id="安装-NodeJs"><a href="#安装-NodeJs" class="headerlink" title="安装 NodeJs"></a>安装 <code>NodeJs</code></h3><p> <code>Hexo</code> 是基于 <code>NodeJs</code> 编写的， 因此要安装 <code>nodejs</code> 和里面的工具<code>npm</code>。<br> Windows：<a href="https://nodejs.org/en/download/">下载链接 https://nodejs.org/en/download</a>，选择LTS版本</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 <code>Hexo</code></h3><p>安装好 Git 后，选择好需要安装<code>hexo</code>的地方，这就是你博客的本地服务器（可以新建一个以英文命名的文件夹, 本文建立的文件夹名为 <code>Blog</code>，代指下文出现的<code>Blog</code>），进入这个文件夹后点击空白处，并右键选择 <code>Git Bash here </code> 可以打开 Git 的命令行窗口，输入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></div></td></tr></table></figure><p>回车后键入 <code>hexo -v</code> 查看<code>hexo</code>版本</p><h6 id="到这里环境准备完成，开始使用-hexo-搭建个人博客"><a href="#到这里环境准备完成，开始使用-hexo-搭建个人博客" class="headerlink" title="到这里环境准备完成，开始使用 hexo 搭建个人博客"></a>到这里环境准备完成，开始使用 <code>hexo </code>搭建个人博客</h6><h3 id="初始化-Hexo"><a href="#初始化-Hexo" class="headerlink" title="初始化 Hexo"></a>初始化 <code>Hexo</code></h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo init 文件夹名<br>$ <span class="hljs-built_in">cd</span> 文件夹名<br>$ npm install<br></code></pre></div></td></tr></table></figure><p>这一步之后会在 <code>Blog</code> 文件夹生成许多的文件以及文件夹，以下是相关的英译汉：</p><blockquote><p>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>_config.yml: 博客的配置文件</p></blockquote><p>接着输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo s<br></code></pre></div></td></tr></table></figure><p>这里的<code> hexo s</code> 表示打开服务器，如果要关闭服务器，按下<code>ctrl+c</code>即可，打开服务器后可看见如下结果<br><img src="https://img-blog.csdnimg.cn/0afdf4a39f1f436e9149070ae119473c.png" alt="在这里插入图片描述"><br>此时可在浏览器进入 <a href="http://localhost:4000/">http://localhost:4000</a> ，便可看到个人博客的主页。如下图所示：<br><img src="https://img-blog.csdnimg.cn/6f15f2b61af248649695629013d5ca3f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2VpeGluXzQ2NjE5OTEy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a>创建 <code>GitHub </code>仓库</h3><ol><li><p>首先，需要一个<code>GitHub</code>账户，可通过QQ邮箱注册，这里便不一一赘述了</p></li><li><p>登录<code>GitHub</code>账户后，在个人主页新建仓库，点击<code>New  repository</code><br><img src="https://img-blog.csdnimg.cn/61089a5787e54a47b3fe5eb425495924.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2VpeGluXzQ2NjE5OTEy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>创建一个和你用户名相同的仓库，后面加<code>.github.io</code>，只有这样，将来要部署到<code>GitHub page</code>的时候，才会被识别，也就是<code>xxxx.github.io</code>，其中<code>xxx</code>就是你注册<code>GitHub</code>的用户名。</p><h3 id="生成-SSH-添加到-github-仓库"><a href="#生成-SSH-添加到-github-仓库" class="headerlink" title="生成 SSH 添加到 github 仓库"></a>生成 SSH 添加到 <code>github </code>仓库</h3><p>由于后续都是通过 SSH 进行仓库代码的快速部署，所以这一步很有必要，如果之前有在你的电脑本地进行过你的 github 仓库的 SSH 绑定，那此步可跳过<br>在 Bash 命令行键入以下内容</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></div></td></tr></table></figure><p>yourname就是你的 GitHub 用户名，youremail 就是你注册 GitHub 使用的邮箱。<br>然后键入以下内容，经过多次回车即可。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></div></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。ssh，简单来讲，就是一个秘钥，其中，id_rsa 是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub 是公共秘钥，可以随便给别人看。把这个公钥放在 GitHub 上，这样当你链接 GitHub 自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过 git 上传你的文件到 GitHub 上。而后在 github 的 setting 中，找到 SSH keys 的设置选项，点击 New SSH key 把你的 id_rsa.pub 里面的信息复制进去。之后，在 gitbash 中输入以下指令，查看是否 SSH 是否已绑定成功。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">ssh -T git@github.com<br></code></pre></div></td></tr></table></figure><p>成功的界面如下<br><img src="https://img-blog.csdnimg.cn/d63484b3eb6541a385c73fd17585eca2.png" alt="在这里插入图片描述"></p><h3 id="将本地-Hexo-部署到-Github"><a href="#将本地-Hexo-部署到-Github" class="headerlink" title="将本地 Hexo 部署到 Github"></a>将本地 Hexo 部署到 Github</h3><p>这一步，我们就可以将 hexo 和 github 关联起来，也就是将 hexo 生成的文章部署到 github 上，打开站点配置文件 <code>_config.yml</code>，翻到最后，进行如下修改即可，xxxx 改为你的 github 账户用户名</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">deploy:<br>  type: git<br>  repo: git@github.com:xxxx/xxxx.github.io.git<br>  branch: main<br></code></pre></div></td></tr></table></figure><p>修改完配置文件<code>_config.yml</code>并保存后，回到 gitbash命令行这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到 GitHub</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></div></td></tr></table></figure><blockquote><p><code>hexo clean</code> 清除了你之前生成的东西。<br><code>hexo generate </code>生成静态文章，可以用 <code>hexo g </code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p></blockquote><p>部署的时候可能有弹出窗口需要你登录Github，登录即可，设置了 ssh 一般不需要</p><p>得到下图说明你已经部署成功，<br><img src="https://img-blog.csdnimg.cn/692ca13d165d429da904dbe7984a87b6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2VpeGluXzQ2NjE5OTEy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h3><p>这里以 fluid 主题作为示例<br>来到主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid">github</a> 仓库，点击 Download ZIP 下载最新的压缩包<br><img src="https://img-blog.csdnimg.cn/41de292e86b642dfb46f80a64dab1644.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2VpeGluXzQ2NjE5OTEy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>下载完后，将压缩包解压到你博客项目的 themes 文件夹下，并将解压出来文件夹更名为 fluid<br>然后打开根目录的 _config.yml 文件，拉到最下面找到 theme 属性，修改为 fluid<br><img src="https://img-blog.csdnimg.cn/5daa3dc87284453894cea1643c19551e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2VpeGluXzQ2NjE5OTEy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>输入以下三个指令进行重新部署，过一会儿即可看到主题发生改变</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">hexo clean<br>hexo g<br>hexo d<br></code></pre></div></td></tr></table></figure><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>发布新文章</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">hexo <span class="hljs-keyword">new</span> newpapername<br></code></pre></div></td></tr></table></figure><p>然后在Blog&#x2F;source&#x2F;_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再键入</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">hexo clean<br>hexo g<br>hexo d<br></code></pre></div></td></tr></table></figure><p>每次更新完文章或配置，都建议输入以上三个指令进行重新部署，而不要缺某条指令</p><p>以上就是本篇文章的全部内容。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>Hi! Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/02/16/hello-world/"/>
    <url>/2022/02/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="/2022/02/16/hello-world/image-20220218160816545.png" alt="image-20220218160816545"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
