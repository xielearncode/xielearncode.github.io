<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于博客的暂停更新~~~</title>
      <link href="/2022/09/12/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%9A%82%E5%81%9C%E6%9B%B4%E6%96%B0/"/>
      <url>/2022/09/12/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%9A%82%E5%81%9C%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>emmm, 这个博客从5月份之后就没怎么更新了, 虽然没有人看, 我还是想写点胡思乱想. 算是给自己提个醒吧.</p></blockquote><p>容我想一想, 5月份是最忙的时候. 5月初开始准备答辩, 改毕业论文, 那段时间真的是昏天黑地. 现在认真想一想, 好像也没干什么, 大多数时间都是在找bug. emmm 还有摸鱼…  6月中旬结束答辩, 玩到7月中旬, 然后进公司, 进入公司后好像没干什么, 但是却很忙. 大概是我没有分配好时间, 没有协调好工作, 学习和生活的关系. 嗯<del>, 然后到了9月, 一直这样. 中秋这两天, 我睡了好长的觉. 如梦初醒, 今天神清气爽, 然后就发现我已经快5个月没有学Java了. 然后吧, 想起来还有个博客已经黑久没有更新了</del>. 这两天看到同学各种秀研究生生活, 我有点羡慕了. 如果…, 算了, 既然选择了这条路, 就应当去欣赏这一路特有的风景, 同时去迎接一次次风浪. 所以, 此后我会继续学习, 继续更新博客. 叭过, 我要先完成Specialty Learning 后再来更新. [doge]. emm, 其实也有可能提前, 希望如此吧! 我也不知道我之后到底会不会依然像今天这样神清气爽. 加油咯!</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2022/06/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/06/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="一、快速入门"><a href="#一、快速入门" class="headerlink" title="一、快速入门"></a>一、快速入门</h1><h2 id="1-1-在文本中找到英文单词"><a href="#1-1-在文本中找到英文单词" class="headerlink" title="1.1 在文本中找到英文单词"></a>1.1 在文本中找到英文单词</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1995年，互联网的蓬勃发展给了Oak机会。业界为了使死板、单调的静态网页能够“灵活”起来，急需一种软件技术来开发一种程序，这种程序可以通过网络传播并且能够跨平台运行。于是，世界各大IT企业为此纷纷投入了大量的人力、物力和财力。这个时候，Sun公司想起了那个被搁置起来很久的Oak，并且重新审视了那个用软件编写的试验平台，由于它是按照嵌入式系统硬件平台体系结构进行编写的，所以非常小，特别适用于网络上的传输系统，而Oak也是一种精简的语言，程序非常小，适合在网络上传输。Sun公司首先推出了可以嵌入网页并且可以随同网页在网络上传输的Applet（Applet是一种将小程序嵌入到网页中进行执行的技术），并将Oak更名为Java（在申请注册商标时，发现Oak已经被人使用了，再想了一系列名字之后，最终，使用了提议者在喝一杯Java咖啡时无意提到的Java词语）。5月23日，Sun公司在Sun world会议上正式发布Java和HotJava浏览器。IBM、Apple、DEC、Adobe、HP、Oracle、Netscape和微软等各大公司都纷纷停止了自己的相关开发项目，竞相购买了Java使用许可证，并为自己的产品开发了相应的Java平台。 [9-10] \n&quot;</span> +<br>            <span class="hljs-string">&quot;1996年1月，Sun公司发布了Java的第一个开发工具包（JDK 1.0），这是Java发展历程中的重要里程碑，标志着Java成为一种独立的开发工具。9月，约8.3万个网页应用了Java技术来制作。10月，Sun公司发布了Java平台的第一个即时（JIT）编译器。&quot;</span>;<br>    <span class="hljs-comment">//提取所有英文单词</span><br>    <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;[a-zA-Z]+&quot;</span>);<span class="hljs-comment">//创建一个Pattern对象，模式对象，理解为一个正则表达式对象</span><br>    <span class="hljs-comment">//创建一个匹配器对象</span><br>    <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>    <span class="hljs-comment">//开始循环匹配</span><br>    <span class="hljs-keyword">while</span>(matcher.find())&#123;<br>        <span class="hljs-comment">//找到一个匹配的就返回true</span><br>        System.out.println(<span class="hljs-string">&quot;找到：&quot;</span> + matcher.group(<span class="hljs-number">0</span>));<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-2-找到文本中所有数字"><a href="#1-2-找到文本中所有数字" class="headerlink" title="1.2 找到文本中所有数字"></a>1.2 找到文本中所有数字</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;[0-9]+&quot;</span>);<br></code></pre></div></td></tr></table></figure><h2 id="1-3-找到数字和英文单词"><a href="#1-3-找到数字和英文单词" class="headerlink" title="1.3 找到数字和英文单词"></a>1.3 找到数字和英文单词</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;([0-9]+)|([a-zA-Z]+)&quot;</span>);<br></code></pre></div></td></tr></table></figure><h1 id="二、正则表达式底层实现"><a href="#二、正则表达式底层实现" class="headerlink" title="二、正则表达式底层实现"></a>二、正则表达式底层实现</h1><h3 id="2-1-实例分析"><a href="#2-1-实例分析" class="headerlink" title="2.1 实例分析"></a>2.1 实例分析</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/6/12 11:14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegTheory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1233dsfajdsaf32232fdasofj飞机到分机多少3223发达省份的都是1111附近的赛附件减肥的死哦澳警方第四哦啊1234565432幅度萨芬&quot;</span>;<br>        <span class="hljs-comment">//目标：匹配四个数字</span><br>        <span class="hljs-comment">// \\d表示一个任意的数字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d\\d\\d\\d&quot;</span>;<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr);<span class="hljs-comment">//模式对象，==》正则表达式对象</span><br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<span class="hljs-comment">//创建一个匹配器</span><br><br>        <span class="hljs-keyword">while</span>(matcher.find())&#123;<br>            System.out.println(<span class="hljs-string">&quot;found :&quot;</span> +matcher.group(<span class="hljs-number">0</span>));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ol><li><p>matcher.find()完成的任务：</p><ol><li>根据制定的规则，定位满足规则的子字符串（比如1233）；</li><li>找到后，将子字符串的开始索引记录到matcher对象的属性int[] groups中，这里1233的1索引为0，groups[0] &#x3D; 0, 将该子字符串的结束索引+1的值记录到groups[1] &#x3D; 4；</li><li>同时记录oldLast的值为 子字符串的结束索引+1 即4；即下次匹配从oldLast开始</li></ol></li><li><p>matcher.group(0)分析：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//源码</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">group</span><span class="hljs-params">(<span class="hljs-type">int</span> group)</span> &#123;<br>        <span class="hljs-keyword">if</span> (first &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;No match found&quot;</span>);<br>        <span class="hljs-keyword">if</span> (group &lt; <span class="hljs-number">0</span> || group &gt; groupCount())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(<span class="hljs-string">&quot;No group &quot;</span> + group);<br>        <span class="hljs-keyword">if</span> ((groups[group*<span class="hljs-number">2</span>] == -<span class="hljs-number">1</span>) || (groups[group*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] == -<span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> getSubSequence(groups[group * <span class="hljs-number">2</span>], groups[group * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]).toString();<br>    &#125;<span class="hljs-comment">//int 存一个字符需要</span><br><br></code></pre></div></td></tr></table></figure><p>a. 根据groups[0]和groups[1]记录的位置，从content开始截取子串。</p><p>b. 如果再次调用find, 则从下一处四个数字开始</p></li><li><p>分组时</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-string">&quot;(\\d\\d)(\\d\\d)&quot;</span>  %两组<br></code></pre></div></td></tr></table></figure><p>（1 记录整个字符串 ： groups[0] &#x3D; 0; groups[1] &#x3D; 4; </p><p>（2 记录第一组： groups[2] &#x3D; 0; groups[3] &#x3D; 2;</p><p>（3 记录第二组： groups[4] &#x3D; 2; groups[5] &#x3D; 4;</p><p>（4 如果有更多的分组，继续… </p><p>调用时：group(0):一整个匹配的字符；groups(1)：第一组；groups(2):第二组 ；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegTheory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1233dsfajdsaf32232fdasofj飞机到分机多少3223发达省份的都是1111附近的赛附件减肥的死哦澳警方第四哦啊1234565432幅度萨芬&quot;</span>;<br>        <span class="hljs-comment">//目标：匹配四个数字</span><br>        <span class="hljs-comment">// \\d表示一个任意的数字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(\\d\\d)(\\d\\d)&quot;</span>;<br><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regStr);<span class="hljs-comment">//模式对象，==》正则表达式对象</span><br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<span class="hljs-comment">//创建一个匹配器</span><br><br>        <span class="hljs-keyword">while</span>(matcher.find())&#123;<br>            System.out.println(<span class="hljs-string">&quot;found :&quot;</span> +matcher.group(<span class="hljs-number">0</span>));<br>            System.out.println(<span class="hljs-string">&quot;第一组：&quot;</span> +matcher.group(<span class="hljs-number">1</span>));<br>            System.out.println(<span class="hljs-string">&quot;第二组：&quot;</span> +matcher.group(<span class="hljs-number">2</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h1 id="三、正则表达式语法"><a href="#三、正则表达式语法" class="headerlink" title="三、正则表达式语法"></a>三、正则表达式语法</h1><h3 id="3-1-基本介绍"><a href="#3-1-基本介绍" class="headerlink" title="3.1 基本介绍"></a>3.1 基本介绍</h3><p>   元字符从功能上分为：</p><div class="hljs code-wrapper"><pre><code class="hljs">  1. 限定符  2. 选择匹配符  3. 分组组合与反向引用符  4. 特殊字符  5. 字符匹配符  6. 定位符</code></pre></div><h3 id="3-2-元字符-转义号"><a href="#3-2-元字符-转义号" class="headerlink" title="3.2 元字符-转义号\\"></a>3.2 元字符-转义号<code>\\</code></h3><p><code>\\</code>符号说明：检索特殊字符时，如&amp; ，*，.，+ 或者$等符号，为了防止检索不到结果而产生报错，需要用到转义符，在Java语言中<code>\\</code>代表其他语言中<code>\</code>.</p><h3 id="3-3-字符匹配符"><a href="#3-3-字符匹配符" class="headerlink" title="3.3 字符匹配符"></a>3.3 字符匹配符</h3><table><thead><tr><th align="center">符号</th><th align="center">说明</th><th align="center">示例</th><th>示例说明</th></tr></thead><tbody><tr><td align="center"><code>[  ]</code></td><td align="center">可接收的字符列表</td><td align="center">[efgh]</td><td>匹配e,f,g,h中的任意一个</td></tr><tr><td align="center"><code>[^]</code></td><td align="center">不接收的字符列表</td><td align="center">[^abc]</td><td>匹配出除a,b,c任意字符之外的字符</td></tr><tr><td align="center"><code>-</code></td><td align="center">连字符</td><td align="center">A-Z</td><td>匹配大写A到Z的所有字符</td></tr><tr><td align="center"><code>.</code></td><td align="center">匹配除<code>\n</code>之外的任意字符</td><td align="center">a..b</td><td>匹配以a开头，以b结尾的长度为4的字符串，如adsb，a*&amp;b</td></tr><tr><td align="center"><code>\\d</code></td><td align="center">匹配单个数字字符，相当于<code>[0-9]</code></td><td align="center"><code>\\d</code></td><td>匹配0-9的单个数字</td></tr><tr><td align="center"><code>\\D</code></td><td align="center">匹配单个非数字字符，相当于<code>[^0-9]</code></td><td align="center"><code>\\D</code></td><td>匹配除0-9之外的单个字符</td></tr><tr><td align="center"><code>\\w</code></td><td align="center">匹配单个数字或者字母字符，相当于[0-9a-zA-Z]</td><td align="center"><code>\\w&#123;7&#125;</code></td><td>匹配由数字和字母组成的长度为7的字符串</td></tr><tr><td align="center"><code>\\W</code></td><td align="center">匹配单个除数字与字母之外的字符，相当于<code>[^0-9a-zA-Z]</code></td><td align="center"></td><td></td></tr><tr><td align="center"><code>\\s</code></td><td align="center">匹配任意空白字符，例如空格和tab</td><td align="center"></td><td></td></tr><tr><td align="center"><code>\\S</code></td><td align="center">匹配任意非空白字符</td><td align="center"></td><td></td></tr><tr><td align="center">&#96;</td><td align="center">&#96;</td><td align="center">选择匹配符</td><td>“han|韩|寒”</td></tr></tbody></table><p><strong>如何不区分大小写 – (?i):</strong> 例如，  (?i)abc: 匹配abc且不区分大小写；a(?i)bc: b和c不区分大小写；a((?i)b)c:只有b不区分大小写；</p><p>或者<code>Pattern pattern = Pattern.compile(regExp, Pattern.CASE_INSENSITIVE);</code></p><h3 id="3-4-限定符"><a href="#3-4-限定符" class="headerlink" title="3.4 限定符"></a>3.4 限定符</h3><table><thead><tr><th align="center">符号</th><th align="center">含义</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">指定字符重复0次或n次</td><td>(abc)*</td><td>包含任意个abc的字符串，如abc，abcabcabc</td></tr><tr><td align="center">+</td><td align="center">指定字符重复一次或n次</td><td>m+(abc)*</td><td>以至少一个m开头，后接任意个abc的字符串</td></tr><tr><td align="center">？</td><td align="center">指定字符重复0次或1次</td><td>m+abc?</td><td>以至少一个m开头，后接ab或者abc</td></tr><tr><td align="center">{n}</td><td align="center">长度为n的字符</td><td>[abcd]{3}</td><td>由abcd中字符组成的任意长度为3的字符串</td></tr><tr><td align="center">{n,}</td><td align="center">指定至少出现n次</td><td></td><td></td></tr><tr><td align="center">{m,n}</td><td align="center">指定出现m-n次（闭区间）</td><td></td><td></td></tr></tbody></table><h3 id="3-5-定位符"><a href="#3-5-定位符" class="headerlink" title="3.5 定位符"></a>3.5 定位符</h3><table><thead><tr><th align="center">符号</th><th align="center">含义</th><th align="center">示例</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>^</code></td><td align="center">指定起始字符</td><td align="center">^[0-9]+[a-z]*</td><td align="center">至少一个数字开头，后跟任意个小写字母</td></tr><tr><td align="center"><code>$</code></td><td align="center">指定结束字符</td><td align="center"><code>^[0-9]\\-[a-z]+$</code></td><td align="center">以一个数字开头，后接-号，最后以至少一个小写英文字母结尾</td></tr><tr><td align="center"><code>\\b</code></td><td align="center">匹配目标字符串的边界</td><td align="center"><code>han\\b</code></td><td align="center">匹配以han结尾或者空格前有han的字符</td></tr><tr><td align="center"><code>\\B</code></td><td align="center">非边界</td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="3-6-分组"><a href="#3-6-分组" class="headerlink" title="3.6 分组"></a>3.6 分组</h3><p>捕获分组</p><table><thead><tr><th align="center">常用分组构造形式</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">(pattern)</td><td align="center">非命名捕获。捕获匹配的子字符串。编号为0的第一个捕获是由整个正则表达式模式匹配的文本，其他捕获的结果则根据左括号的顺序从1开始自动编号。</td></tr><tr><td align="center"><code>（?&lt;name&gt;pattern)</code></td><td align="center">命名捕获。将匹配的子字符串捕获到一个组名称或编号名称中。用于name的字符串不能包含任何标点符号，并且不能以数字开头。可以使用单引号代替尖括号，例如(?’name’); name 就是组名</td></tr></tbody></table><p><strong>非捕获分组</strong></p><table><thead><tr><th>构造形式</th><th>说明</th></tr></thead><tbody><tr><td>(?:pattern)</td><td>匹配pattern但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配，这对于”or“字符(|)组合模式部件的情况很有用，例如”industr(?:y|ies)”是比“industry|industries“更经济的表达式</td></tr><tr><td>(?&#x3D;pattern)</td><td>非捕获匹配，例如”Windows (?&#x3D;95|98|NT|2000)”匹配“Windows 2000”中的Windows但不匹配“Windows 10”中的Windows</td></tr><tr><td>(?!pattern)</td><td>该表达式匹配不处于匹配pattern的字符串的起始点的搜索字符串。它是一个非捕获匹配。例如，“Windows (?!95|98|NT|2000)”匹配”Windows 10”中的Windows但是不匹配”Windows 2000“中的Windows。</td></tr></tbody></table><p><code>//d+?</code>最后的问号表示非贪婪捕获。</p><h1 id="四、应用实例"><a href="#四、应用实例" class="headerlink" title="四、应用实例"></a>四、应用实例</h1><ol><li><p>验证汉字：</p><p><code>&quot;^[\u0391-\uffe5]+$&quot;</code></p></li><li><p>邮政编码：1-9开头的6位数</p><p><code>&quot;^[1-9]\\d&#123;5&#125;$&quot;</code></p></li><li><p>QQ号：1-9开头的5-10位数</p><p><code>&quot;^[1-9]\\d&#123;4,9&#125;$&quot;</code></p></li><li><p>手机号码：13,14,15,18开头的11位数</p><p><code>&quot;^1[3458]\\d&#123;9&#125;$&quot;</code></p></li><li><p>URL:</p></li></ol><p><code>&quot;^((http|https)://)([\\w-]+\\.)+[\\w-]+(\\/[\\w=?/%-.&amp;#]*)?&quot;$</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.bilibili.com/video/BV1fh411y7R8?p=894&amp;spm_id_from=page-Driver&amp;vd_source=3e149ab79eab845696a34aa43635df76&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">RegStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^((http|https)://)([\\w-]+\\.)+[\\w-]+(\\/[\\w=?/%-.&amp;#]*)?&quot;</span>;<br>    <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(RegStr);<br>    <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br><br>    <span class="hljs-keyword">if</span>(matcher.find())&#123;<br>        System.out.println(<span class="hljs-string">&quot;匹配到：&quot;</span>+ matcher.group(<span class="hljs-number">0</span>));<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;not found&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="五、正则表达式三个常用类"><a href="#五、正则表达式三个常用类" class="headerlink" title="五、正则表达式三个常用类"></a>五、正则表达式三个常用类</h1><h3 id="5-1-Pattern类"><a href="#5-1-Pattern类" class="headerlink" title="5.1 Pattern类"></a>5.1 Pattern类</h3><p>pattern 对象是一个正则表达式对象。Pattern类没有公共的构造方法。要创建一个Pattern对象，调用其公共静态方法（compile），它返回一个Pattern对象。该方法接收一个正则表达式作为它的第一个参数。</p><h3 id="5-2-Matcher类"><a href="#5-2-Matcher类" class="headerlink" title="5.2 Matcher类"></a>5.2 Matcher类</h3><p>Matcher对象是对输入字符串进行解释和匹配的引擎。与Pattern类一样，Matcher也没有公共的构造方法。需要调用Pattern对象的matcher方法来获取一个Matcher对象。</p><h3 id="5-3-PatternSyntaxException"><a href="#5-3-PatternSyntaxException" class="headerlink" title="5.3 PatternSyntaxException"></a>5.3 PatternSyntaxException</h3><p>PatternSyntaxException表示一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p><h1 id="六、反向引用"><a href="#六、反向引用" class="headerlink" title="六、反向引用"></a>六、反向引用</h1><ol><li><p>分组</p><p>用圆括号组成一个比较复杂的匹配模式，那么一个圆括号的部分我们可以看作是一个子表达式&#x2F;一个分组</p></li><li><p>捕获</p><p>吧正则表达式中子表达式&#x2F;分组匹配的内容，保存到内存中以数字编号或显式命名的组里，方便后面引用，从左至右，以分组的左括号为标志，第一个出现的分组组号为1，第二个为2，以此类推。组0代表整个正则式。</p></li><li><p>反向引用</p><p>圆括号的内容被捕获之后，可以在这个括号后使用，从而写出一个比较实用的匹配模式，这个我们称之为反向引用，这种引用既可以在正则表达式的内部，也可以是在正则表达式的外部，内部反向引用<code>\\</code>分组号,外部引用<code>$</code>分组号。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">匹配两个连续相同的数字：<span class="hljs-string">&quot;(\\d)\\1&quot;</span> ==&gt; <span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,...<br>匹配五个连续相同的数字：<span class="hljs-string">&quot;(\\d)\\1&#123;4&#125;&quot;</span><br>匹配个位与千位相同，十位与百位相同的数：<span class="hljs-string">&quot;(\\d)(\\d)\\2\\1&quot;</span><br></code></pre></div></td></tr></table></figure><h1 id="七、练习题"><a href="#七、练习题" class="headerlink" title="七、练习题"></a>七、练习题</h1><h3 id="7-1-结巴去重"><a href="#7-1-结巴去重" class="headerlink" title="7.1 结巴去重"></a>7.1 结巴去重</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我我...要要要...学学学编程Java&quot;</span>;<br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;\\.&quot;</span>);<span class="hljs-comment">//找到所有的.</span><br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>content  = matcher.replaceAll(<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//替换所有的.</span><br><br>System.out.println(<span class="hljs-string">&quot;content= &quot;</span>+content);<br><br><span class="hljs-comment">//2.去掉重复的字</span><br>pattern = Pattern.compile(<span class="hljs-string">&quot;(.)\\1+&quot;</span>);<br>matcher = pattern.matcher(content);<br><span class="hljs-keyword">while</span>(matcher.find())&#123;<br>    System.out.println(<span class="hljs-string">&quot;找到：&quot;</span>+matcher.group(<span class="hljs-number">0</span>));<br>&#125;<br>content = matcher.replaceAll(<span class="hljs-string">&quot;$1&quot;</span>);<br>System.out.println(content);<br></code></pre></div></td></tr></table></figure><h3 id="7-2-验证电子邮箱"><a href="#7-2-验证电子邮箱" class="headerlink" title="7.2 验证电子邮箱"></a>7.2 验证电子邮箱</h3><p>规则：</p><ol><li>只能有一个@;</li><li>@前面是用户名, 1-9,a-z,A-Z,-,_;</li><li>@后面是域名,只能是英文字母和.的结合;</li><li>写出其正则表达式</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//  &quot;[\\w-_]+@([a-zA-Z]+\\.)+([a-zA-Z]+)&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123_-21321@qq.su.com&quot;</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">matches</span> <span class="hljs-operator">=</span> content.matches(<span class="hljs-string">&quot;([\\w_-]+)@([a-zA-Z]+\\.)+[a-zA-Z]+&quot;</span>);<br>        System.out.println(matches);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//.在()里面需要加\\(这样才代表点,否则代表任意字符),只有当它在[]里面才不用\\</span><br></code></pre></div></td></tr></table></figure><h3 id="7-3-验证是否属于小数和整数"><a href="#7-3-验证是否属于小数和整数" class="headerlink" title="7.3 验证是否属于小数和整数"></a>7.3 验证是否属于小数和整数</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//&quot;-?\\d+(\\.\\d+)?&quot;</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2342&quot;</span>;<br>        System.out.println(content.matches(<span class="hljs-string">&quot;-?\\d+(\\.\\d+)?&quot;</span>));<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-4-URL解析"><a href="#7-4-URL解析" class="headerlink" title="7.4 URL解析"></a>7.4 URL解析</h3><p>要求:</p><ol><li>得到采用的协议</li><li>得到域名</li><li>得到端口号</li><li>得到文件名</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegExp09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.sohu.com:4040/acds/sdfds/f/index.htm&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">RegExp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^([a-zA-Z]+)://(([a-zA-Z]+\\.)+[a-zA-Z]+):?(\\d+)?[\\w-_/]*/([\\w]+\\.[\\w]+)$&quot;</span>;<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(RegExp);<br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(content);<br>        <span class="hljs-keyword">if</span>(matcher.find())&#123;<br>            System.out.println(<span class="hljs-string">&quot;匹配成功&quot;</span>);<br>            System.out.println(matcher.group(<span class="hljs-number">1</span>));<br>            System.out.println(matcher.group(<span class="hljs-number">2</span>));<br>            System.out.println(matcher.group(<span class="hljs-number">3</span>));<br>            System.out.println(matcher.group(<span class="hljs-number">4</span>));<br>            System.out.println(matcher.group(<span class="hljs-number">5</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需求说明</title>
      <link href="/2022/04/06/%E9%A4%90%E9%A5%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/04/06/%E9%A4%90%E9%A5%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="一、功能说明"><a href="#一、功能说明" class="headerlink" title="一、功能说明"></a>一、功能说明</h1><p>完成餐饮管理系统的<strong>登录</strong>，<strong>订座</strong>，<strong>点餐</strong>和<strong>结账</strong>，<strong>查看订单</strong>等功能</p><h1 id="二、界面设计"><a href="#二、界面设计" class="headerlink" title="二、界面设计"></a>二、界面设计</h1><h2 id="2-1-用户登录"><a href="#2-1-用户登录" class="headerlink" title="2.1 用户登录"></a>2.1 用户登录</h2><p><img src="/2022/04/06/%E9%A4%90%E9%A5%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220416181905120.png" alt="image-20220416181905120"></p><h2 id="2-2-显示餐桌状态"><a href="#2-2-显示餐桌状态" class="headerlink" title="2.2 显示餐桌状态"></a>2.2 显示餐桌状态</h2><p><img src="/2022/04/06/%E9%A4%90%E9%A5%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220416181807143.png" alt="image-20220416181807143"></p><h2 id="2-3-预定"><a href="#2-3-预定" class="headerlink" title="2.3 预定"></a>2.3 预定</h2><p><img src="/2022/04/06/%E9%A4%90%E9%A5%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220416181926204.png" alt="image-20220416181926204"></p><p>这里需要注意：预定是还要判断餐桌是否被预定以及是否正在被使用。</p><h2 id="2-3-显示菜品"><a href="#2-3-显示菜品" class="headerlink" title="2.3 显示菜品"></a>2.3 显示菜品</h2><p><img src="/2022/04/06/%E9%A4%90%E9%A5%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220416182117790.png" alt="image-20220416182117790"></p><h2 id="2-4-点餐"><a href="#2-4-点餐" class="headerlink" title="2.4 点餐"></a>2.4 点餐</h2><p><img src="/2022/04/06/%E9%A4%90%E9%A5%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220416182145425.png" alt="image-20220416182145425"></p><h2 id="2-5-查看账单"><a href="#2-5-查看账单" class="headerlink" title="2.5 查看账单"></a>2.5 查看账单</h2><p><img src="/2022/04/06/%E9%A4%90%E9%A5%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220416182247340.png" alt="image-20220416182247340"></p><h2 id="2-6-结账"><a href="#2-6-结账" class="headerlink" title="2.6 结账"></a>2.6 结账</h2><p><img src="/2022/04/06/%E9%A4%90%E9%A5%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/image-20220416182337616.png" alt="image-20220416182337616"></p><h1 id="三、项目设计"><a href="#三、项目设计" class="headerlink" title="三、项目设计"></a>三、项目设计</h1><h2 id="3-1-程序框架图"><a href="#3-1-程序框架图" class="headerlink" title="3.1 程序框架图"></a>3.1 程序框架图</h2><h1 id="四、功能实现"><a href="#四、功能实现" class="headerlink" title="四、功能实现"></a>四、功能实现</h1><h2 id="4-1-设计Utils类"><a href="#4-1-设计Utils类" class="headerlink" title="4.1 设计Utils类"></a>4.1 设计Utils类</h2><p>准备工具类Utils，提高开发效率。同时搭建项目整体结构</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//Utility类</span><br><br><span class="hljs-keyword">package</span> com.bluebird.foodservice.utils;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">工具类的作用:</span><br><span class="hljs-comment">处理各种情况的用户输入，并且能够按照程序员的需求，得到用户的控制台输入。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Utility</span> &#123;<br><span class="hljs-comment">//静态属性。。。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的一个菜单选项，值：1——5的范围</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 1——5</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readMenuSelection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//包含一个字符的字符串</span><br>            c = str.charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//将字符串转换成字符char类型</span><br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp; <br>                c != <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;5&#x27;</span>) &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能：读取键盘输入的一个字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 一个字符</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readChar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//就是一个字符</span><br>        <span class="hljs-keyword">return</span> str.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的一个字符，如果直接按回车，则返回指定的默认值；否则返回输入的那个字符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultValue 指定的默认值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 默认值或输入的字符</span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readChar</span><span class="hljs-params">(<span class="hljs-type">char</span> defaultValue)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<span class="hljs-comment">//要么是空字符串，要么是一个字符</span><br>        <span class="hljs-keyword">return</span> (str.length() == <span class="hljs-number">0</span>) ? defaultValue : str.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的整型，长度小于2位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 整数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readInt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">2</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//一个整数，长度&lt;=2位</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                n = Integer.parseInt(str);<span class="hljs-comment">//将字符串转换成整数</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.print(<span class="hljs-string">&quot;数字输入错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的 整数或默认值，如果直接回车，则返回默认值，否则返回输入的整数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultValue 指定的默认值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 整数或默认值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readInt</span><span class="hljs-params">(<span class="hljs-type">int</span> defaultValue)</span> &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">10</span>, <span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">if</span> (str.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> defaultValue;<br>            &#125;<br><br><span class="hljs-comment">//异常处理...</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                n = Integer.parseInt(str);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.print(<span class="hljs-string">&quot;数字输入错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的指定长度的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 限制的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 指定长度的字符串</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">(<span class="hljs-type">int</span> limit)</span> &#123;<br>        <span class="hljs-keyword">return</span> readKeyBoard(limit, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的指定长度的字符串或默认值，如果直接回车，返回默认值，否则返回字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 限制的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultValue 指定的默认值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 指定长度的字符串</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, String defaultValue)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(limit, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> str.equals(<span class="hljs-string">&quot;&quot;</span>)? defaultValue : str;<br>    &#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能：读取键盘输入的确认选项，Y或N</span><br><span class="hljs-comment"> * 将小的功能，封装到一个方法中.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Y或N</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readConfirmSelection</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入你的选择(Y/N)&quot;</span>);<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<span class="hljs-comment">//无限循环</span><br>        <span class="hljs-comment">//在这里，将接受到字符，转成了大写字母</span><br>        <span class="hljs-comment">//y =&gt; Y n=&gt;N</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>).toUpperCase();<br>            c = str.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;Y&#x27;</span> || c == <span class="hljs-string">&#x27;N&#x27;</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能： 读取一个字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 读取的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> blankReturn 如果为true ,表示 可以读空字符串。 </span><br><span class="hljs-comment">     *   如果为false表示 不能读空字符串。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment"> *如果输入为空，或者输入大于limit的长度，就会提示重新输入。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readKeyBoard</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, <span class="hljs-type">boolean</span> blankReturn)</span> &#123;<br>        <br><span class="hljs-comment">//定义了字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">//scanner.hasNextLine() 判断有没有下一行</span><br>        <span class="hljs-keyword">while</span> (scanner.hasNextLine()) &#123;<br>            line = scanner.nextLine();<span class="hljs-comment">//读取这一行</span><br>           <br><span class="hljs-comment">//如果line.length=0, 即用户没有输入任何内容，直接回车</span><br><span class="hljs-keyword">if</span> (line.length() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (blankReturn) <span class="hljs-keyword">return</span> line;<span class="hljs-comment">//如果blankReturn=true,可以返回空串</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//如果blankReturn=false,不接受空串，必须输入内容</span><br>            &#125;<br><br><span class="hljs-comment">//如果用户输入的内容大于了 limit，就提示重写输入  </span><br><span class="hljs-comment">//如果用户如的内容 &gt;0 &lt;= limit ,我就接受</span><br>            <span class="hljs-keyword">if</span> (line.length() &lt; <span class="hljs-number">1</span> || line.length() &gt; limit) &#123;<br>                System.out.print(<span class="hljs-string">&quot;输入长度（不能大于&quot;</span> + limit + <span class="hljs-string">&quot;）错误，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> line;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//JDBCUtilsByDruid类</span><br><br><span class="hljs-keyword">package</span> com.bluebird.foodservice.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 韩顺平</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 基于druid数据库连接池的工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCUtilsByDruid</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource ds;<br><br>    <span class="hljs-comment">//在静态代码块完成 ds初始化</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\druid.properties&quot;</span>));<br>            ds = DruidDataSourceFactory.createDataSource(properties);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//编写getConnection方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> ds.getConnection();<br>    &#125;<br><br>    <span class="hljs-comment">//关闭连接, 老师再次强调： 在数据库连接池技术中，close 不是真的断掉连接</span><br>    <span class="hljs-comment">//而是把使用的Connection对象放回连接池</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(ResultSet resultSet, Statement statement, Connection connection)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-literal">null</span>) &#123;<br>                resultSet.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>) &#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) &#123;<br>                connection.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="4-2-菜单"><a href="#4-2-菜单" class="headerlink" title="4.2 菜单"></a>4.2 菜单</h2><h3 id="4-2-1-登录界面"><a href="#4-2-1-登录界面" class="headerlink" title="4.2.1 登录界面"></a>4.2.1 登录界面</h3><p>显示主菜单、二级菜单以及退出系统的功能, 先实现初级效果，后续再进行添加</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bluebird.foodservice.view;<br><br><span class="hljs-keyword">import</span> com.bluebird.foodservice.dao.EmployeeDAO;<br><span class="hljs-keyword">import</span> com.bluebird.foodservice.domain.Employee;<br><span class="hljs-keyword">import</span> com.bluebird.foodservice.service.EmployeeService;<br><span class="hljs-keyword">import</span> com.bluebird.foodservice.utils.Utility;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/4/23 12:26</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceView</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//控制是否退出菜单</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//用于接收用户选择</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmployeeService</span> <span class="hljs-variable">employeeService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmployeeService</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceView</span>().mainMenu();<br>    &#125;<br><br>    <span class="hljs-comment">//显示主菜单</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mainMenu</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(loop)&#123;<br>            System.out.println(<span class="hljs-string">&quot;==========餐饮管理系统===========&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t 1 登录满汉楼&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t 2 退出满汉楼&quot;</span>);<br>            System.out.print(<span class="hljs-string">&quot;请输入你的选择：&quot;</span>);<br>            key = Utility.readString(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">switch</span> (key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;输入员工号:&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">empId</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>                    System.out.print(<span class="hljs-string">&quot;输入密  码:&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">empPwd</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>                    <span class="hljs-comment">//到数据库去判断</span><br>                    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employeeService.getEmployeeByIdAndPwd(empId, empPwd);<br><br>                    <span class="hljs-keyword">if</span>(employee != <span class="hljs-literal">null</span>)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;=============[&quot;</span> + employee.getName() + <span class="hljs-string">&quot;]登录成功===========\n&quot;</span>);<br>                        <span class="hljs-comment">//显示二级菜单</span><br>                        <span class="hljs-keyword">while</span>(loop)&#123;<br>                            System.out.println(<span class="hljs-string">&quot;\n\n=============餐饮管理系统===========&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 1 显示餐桌状态&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 2 预 定 餐 桌&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 3 显示所有菜品&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 4 点 餐 服 务&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 5 查 看 账 单&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 6 结       账&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 9 退       出&quot;</span>);<br>                            System.out.print(<span class="hljs-string">&quot;\n请输入你的选择:&quot;</span>);<br>                            key = Utility.readString(<span class="hljs-number">1</span>);<br>                            <span class="hljs-keyword">switch</span>(key)&#123;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;\t\t 1 显示餐桌状态&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;\t\t 2 预 定 餐 桌&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;\t\t 3 显示所有菜品&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;\t\t 4 点 餐 服 务&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;5&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;\t\t 5 查 看 账 单&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;6&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;\t\t 6 结       账&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;\t\t 6 退       出&quot;</span>);<br>                                    loop = <span class="hljs-literal">false</span>;<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">default</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;输入有误&quot;</span>);<br>                            &#125;<br>                        &#125;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;=====账户或密码错误=====&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                    loop = <span class="hljs-literal">false</span>;<br>                    System.out.println(<span class="hljs-string">&quot;退出&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入有误！&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></div></td></tr></table></figure><p>数据库中employee表</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table employee(<br>id int primary key auto_increment,<br>empId varchar(50) not null default &#x27;&#x27;,<br>pwd   char(32) not null default &#x27;&#x27;,<br>`name` varchar(50) not null default &#x27;&#x27;,<br>job varchar(32) not null default &#x27;&#x27;)charset=utf8;<br><br>insert into employee values(null, &#x27;100&#x27;, md5(&#x27;1234&#x27;),&#x27;张三&#x27;,&#x27;经理&#x27;);<br>insert into employee values(null, &#x27;200&#x27;, md5(&#x27;1234&#x27;),&#x27;李四&#x27;,&#x27;服务员&#x27;);<br>insert into employee values(null, &#x27;300&#x27;, md5(&#x27;1234&#x27;),&#x27;王五&#x27;,&#x27;收银员&#x27;);<br>insert into employee values(null, &#x27;400&#x27;, md5(&#x27;1234&#x27;),&#x27;赵六&#x27;,&#x27;保安&#x27;);<br><br></code></pre></div></td></tr></table></figure><p>其中，数据库查询方式  界面层&#x3D;&#x3D;&gt; 业务层 &#x3D;&#x3D;&gt; ClassDAO &#x3D;&#x3D;&gt; 数据库</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getEmployeeByIdAndPwd</span><span class="hljs-params">(String empId,String empPwd)</span>&#123;<br>        <span class="hljs-keyword">return</span> employeeDAO.querySingle(<span class="hljs-string">&quot;select * from employee where empId = ? and pwd = md5(?)&quot;</span>,Employee.class,empId,empPwd);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-2-显示餐桌状态"><a href="#4-2-2-显示餐桌状态" class="headerlink" title="4.2.2 显示餐桌状态"></a>4.2.2 显示餐桌状态</h3><p>显示目前各个餐桌的编号，状态等信息</p><p>首先创建diningTable表，用于记录餐桌状态。并创建与之对应的DiningTable（domain），DiningTableDAO（DAO），DinningTableService（业务层）。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table diningTable(<br>id int primary key auto_increment,<br>state varchar(20) not null default &#x27;&#x27;,<br>orderName varchar(50) not null default &#x27;&#x27;,<br>orserTel varchar(20) not null default &#x27;&#x27;)charset=utf8;<br><br>insert into diningTable values(null,&#x27;空&#x27;,&#x27;&#x27;,&#x27;&#x27;);<br>insert into diningTable values(null,&#x27;空&#x27;,&#x27;&#x27;,&#x27;&#x27;);<br>insert into diningTable values(null,&#x27;空&#x27;,&#x27;&#x27;,&#x27;&#x27;);<br>insert into diningTable values(null,&#x27;空&#x27;,&#x27;&#x27;,&#x27;&#x27;);<br><br>select * from diningtable;<br></code></pre></div></td></tr></table></figure><p>创建DiningTable类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bluebird.foodservice.domain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/4/23 15:06</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DiningTable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String state;<br>    <span class="hljs-keyword">private</span> String orderName;<br>    <span class="hljs-keyword">private</span> String orderTel;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DiningTable</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(String state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOrderName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> orderName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOrderName</span><span class="hljs-params">(String orderName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.orderName = orderName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOrderTel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> orderTel;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOrderTel</span><span class="hljs-params">(String orderTel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.orderTel = orderTel;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DiningTable</span><span class="hljs-params">(Integer id, String state, String orderName, String orderTel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.state = state;<br>        <span class="hljs-built_in">this</span>.orderName = orderName;<br>        <span class="hljs-built_in">this</span>.orderTel = orderTel;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id + <span class="hljs-string">&quot;\t\t&quot;</span> + state;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>创建DiningtableService类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DiningTableService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">DiningTableDAO</span> <span class="hljs-variable">diningTableDAO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DiningTableDAO</span>();<br><br>    <span class="hljs-keyword">public</span> List&lt;DiningTable&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> diningTableDAO.queryMulti(<span class="hljs-string">&quot;select id,state from diningtable&quot;</span>,DiningTable.class);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>构建显示餐桌状态方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listDiningTable</span><span class="hljs-params">()</span>&#123;<br>        List&lt;DiningTable&gt; diningTables = diningTableService.list();<br>        System.out.println(<span class="hljs-string">&quot;餐桌编号\t\t餐桌状态&quot;</span>);<br>        <span class="hljs-keyword">for</span> (DiningTable diningTable : diningTables) &#123;<br>            System.out.println(diningTable);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;===========显示完毕===========&quot;</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-3-预定餐桌"><a href="#4-2-3-预定餐桌" class="headerlink" title="4.2.3 预定餐桌"></a>4.2.3 预定餐桌</h3><ol><li>先检测餐桌是否存在</li><li>检查餐桌的状态</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 完成订座</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">orderDiningTable</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;===========预定餐桌===========&quot;</span>);<br>    System.out.print(<span class="hljs-string">&quot;请选择要预定餐桌的编号(-1退出)：&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> Utility.readInt();<br>    <span class="hljs-keyword">if</span>(orderId == -<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;===========取消预定===========&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Utility.readConfirmSelection();<br>    <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;Y&#x27;</span>)&#123;<br>        <span class="hljs-type">DiningTable</span> <span class="hljs-variable">diningTable</span> <span class="hljs-operator">=</span> diningTableService.getDiningTableById(orderId);<br>        <span class="hljs-keyword">if</span>(diningTable == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;===========餐桌不存在===========&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!diningTable.getState().equals(<span class="hljs-string">&quot;空&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;===========餐桌已预定或在就餐中===========&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <br>        System.out.print(<span class="hljs-string">&quot;预定人姓名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">orderName</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>        System.out.print(<span class="hljs-string">&quot;预定人电话：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">orderTel</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>        <span class="hljs-keyword">if</span>(diningTableService.orderDiningTable(orderId,orderName,orderTel))&#123;<br>            System.out.println(<span class="hljs-string">&quot;===========预定成功===========&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;===========预定失败===========&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;===========取消预定===========&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-4-显示菜品"><a href="#4-2-4-显示菜品" class="headerlink" title="4.2.4 显示菜品"></a>4.2.4 显示菜品</h3><p>首先创建menu表</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE menu(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>NAME VARCHAR(50) NOT NULL DEFAULT &#x27;&#x27;,<br>TYPE VARCHAR(50) NOT NULL DEFAULT &#x27;&#x27;,<br>price DOUBLE NOT NULL DEFAULT 0)CHARSET=utf8;<br><br>INSERT INTO menu VALUES(NULL,&#x27;八宝饭&#x27;,&#x27;主食&#x27;,13);<br>INSERT INTO menu VALUES(NULL,&#x27;叉烧包&#x27;,&#x27;主食&#x27;,8);<br>INSERT INTO menu VALUES(NULL,&#x27;宫保鸡丁&#x27;,&#x27;热菜&#x27;,10);<br>INSERT INTO menu VALUES(NULL,&#x27;尖椒肉丝&#x27;,&#x27;热菜&#x27;,11);<br>INSERT INTO menu VALUES(NULL,&#x27;水煮鱼&#x27;,&#x27;汤类&#x27;,19);<br>INSERT INTO menu VALUES(NULL,&#x27;红烧狮子头&#x27;,&#x27;热菜&#x27;,16);<br>INSERT INTO menu VALUES(NULL,&#x27;万州烤鱼&#x27;,&#x27;汤类&#x27;,15);<br><br>SELECT * FROM menu;<br><br></code></pre></div></td></tr></table></figure><p>依次创建Menu类，MenuDAO类，MenuService类</p><p>编写方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listMenu</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Menu&gt; menus = menuService.list();<br>    System.out.println(<span class="hljs-string">&quot;=====================菜    单====================&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;菜品编号&quot;</span> + <span class="hljs-string">&quot;\t\t&quot;</span>+ <span class="hljs-string">&quot;菜品名&quot;</span>+ <span class="hljs-string">&quot;\t\t&quot;</span>+ <span class="hljs-string">&quot;类别&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;价格&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Menu menu : menus) &#123;<br>        System.out.println(menu);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;=====================显示完毕====================&quot;</span>);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-5-点餐服务"><a href="#4-2-5-点餐服务" class="headerlink" title="4.2.5 点餐服务"></a>4.2.5 点餐服务</h3><p>先对餐桌号，菜品进行合理性校验，如果点餐成功修改餐桌状态并生成账单</p><p>创建账单表bill</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE bill(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>billId VARCHAR(50) NOT NULL DEFAULT &#x27;&#x27;,<br>menuName VARCHAR(50) NOT NULL DEFAULT &#x27;&#x27;,<br>nums INT NOT NULL DEFAULT 0,<br>money DOUBLE NOT NULL DEFAULT 0,<br>diningTableId INT NOT NOT DEFAULT &#x27;&#x27;,<br>billDate DATETIME NOT NULL,<br>state VARCHAR(50) NOT NULL DEFAULT &#x27;&#x27;)CHARSET=utf-8;<br><br></code></pre></div></td></tr></table></figure><p>编写点餐方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">orderMenu</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================点餐服务====================&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;请选择点餐的桌号(-1退出):&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">orderDiningTableId</span> <span class="hljs-operator">=</span> Utility.readInt();<br>        <span class="hljs-keyword">if</span>(orderDiningTableId == -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;=====================取消点餐====================&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;请选择菜品编号(-1退出):&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">orderMenuId</span> <span class="hljs-operator">=</span> Utility.readInt();<br>        <span class="hljs-keyword">if</span>(orderMenuId == -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;=====================取消点餐====================&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;请选择菜品数量(-1退出):&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">orderNums</span> <span class="hljs-operator">=</span> Utility.readInt();<br>        <span class="hljs-keyword">if</span>(orderNums == -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;=====================取消点餐====================&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">DiningTable</span> <span class="hljs-variable">diningTable</span> <span class="hljs-operator">=</span> diningTableService.getDiningTableById(orderDiningTableId);<br>        <span class="hljs-keyword">if</span>(diningTable == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;餐桌号不存在！！！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Menu</span> <span class="hljs-variable">menuId</span> <span class="hljs-operator">=</span> menuService.getMenuById(orderMenuId);<br>        <span class="hljs-keyword">if</span>(menuId == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;菜品不存在！！！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(billService.orderMenu(orderMenuId,orderNums,orderDiningTableId))&#123;<br>            System.out.println(<span class="hljs-string">&quot;=====================点餐成功====================&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;=====================点餐失败====================&quot;</span>);<br>        &#125;<br><br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-6-显示账单"><a href="#4-2-6-显示账单" class="headerlink" title="4.2.6  显示账单"></a>4.2.6  显示账单</h3><p>不用创建新的表和相关类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listMenu</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Menu&gt; menus = menuService.list();<br>    System.out.println(<span class="hljs-string">&quot;=====================菜    单====================&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;菜品编号&quot;</span> + <span class="hljs-string">&quot;\t\t&quot;</span>+ <span class="hljs-string">&quot;菜品名&quot;</span>+ <span class="hljs-string">&quot;\t\t&quot;</span>+ <span class="hljs-string">&quot;类别&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;价格&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Menu menu : menus) &#123;<br>        System.out.println(menu);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;=====================显示完毕====================&quot;</span>);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Menu&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> menuDAO.queryMulti(<span class="hljs-string">&quot;select * from menu&quot;</span>, Menu.class);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-7-结账"><a href="#4-2-7-结账" class="headerlink" title="4.2.7 结账"></a>4.2.7 结账</h3><p>首先对结账编号进行校验，并且将bill表中结账项的状态，结完账后餐桌状态需要修改。不需要添加新的表和新类，只需增加一些业务方法。</p> <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">payBill</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====================结账服务====================&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;请选择要结账的餐桌编号(-1表示退出):&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">diningTableId</span> <span class="hljs-operator">=</span> Utility.readInt();<br>        <span class="hljs-keyword">if</span>(diningTableId == -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;已取消结账&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">DiningTable</span> <span class="hljs-variable">diningTableById</span> <span class="hljs-operator">=</span> diningTableService.getDiningTableById(diningTableId);<br>        <span class="hljs-keyword">if</span>(diningTableById == <span class="hljs-literal">null</span> ) &#123;<br>            System.out.println(<span class="hljs-string">&quot;餐桌号不存在&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!billService.hasPayBillByDiningTableId(diningTableId))&#123;<br>            System.out.println(<span class="hljs-string">&quot;餐桌号已结账&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;请选择结账方式(现金/支付宝/微信):&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payMode</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;&quot;</span>.equals(payMode))&#123;<br>            System.out.println(<span class="hljs-string">&quot;已取消结账&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;确认是否结账(Y/N):&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">confirm</span> <span class="hljs-operator">=</span> Utility.readConfirmSelection();<br>        <span class="hljs-keyword">if</span>(confirm == <span class="hljs-string">&#x27;Y&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(billService.payBill(diningTableId,payMode))&#123;<br>                System.out.println(<span class="hljs-string">&quot;=====================完成结账====================&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;=====================结账失败====================&quot;</span>);<br>        &#125;<br><br><br><br>    &#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPayBillByDiningTableId</span><span class="hljs-params">(<span class="hljs-type">int</span> diningTableId)</span>&#123;<br>    <span class="hljs-type">Bill</span> <span class="hljs-variable">bill</span> <span class="hljs-operator">=</span> billDAO.querySingle(<span class="hljs-string">&quot;select * from bill where diningTableId = ? and !(state = &#x27;现金&#x27; or state = &#x27;微信&#x27; or state = &#x27;支付宝&#x27; ) limit 0,1&quot;</span>, Bill.class, diningTableId);<br>    <span class="hljs-keyword">return</span> bill != <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">payBill</span><span class="hljs-params">(<span class="hljs-type">int</span> diningTableId, String payMode)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> billDAO.update(<span class="hljs-string">&quot;update bill set state = ? where diningTableId = ?&quot;</span>,payMode, diningTableId);<br>    <span class="hljs-keyword">if</span>(update &lt;= <span class="hljs-number">0</span> ) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//修改DiningTable表</span><br>    <span class="hljs-keyword">return</span> diningTableService.updateDiningTableToFree(diningTableId);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java项目 </tag>
            
            <tag> 餐饮管理系统系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2022/03/21/Spring/"/>
      <url>/2022/03/21/Spring/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="一-Spring-基本介绍"><a href="#一-Spring-基本介绍" class="headerlink" title="一 Spring 基本介绍"></a>一 Spring 基本介绍</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><ol><li><p>Spring是轻量级的开源的JavaEE 框架, 可以解决企业应用开发的复杂性. 有两个核心的部分: IOC 和 Aop.</p><ul><li><p>IOC : 控制反转, 将创建对象的过程交给Spring进行管理</p></li><li><p>Aop: 面向切面, 不修改源代码的情况下进行功能的改进和增强</p></li></ul></li><li><p>Spring特点:</p><ul><li>方便解耦, 简化开发</li><li>Aop编程的支持</li><li>方便程序的测试</li><li>方便集成各种优秀的框架</li><li>降低Java EE　API使用难度</li></ul></li></ol><p>Spring模块</p><p><img src="/2022/03/21/Spring/image-20220321210036160.png" alt="image-20220321210036160"></p><p>本笔记基于Spring５.2.6</p><h2 id="1-2-入门案例"><a href="#1-2-入门案例" class="headerlink" title="1.2 入门案例"></a>1.2 入门案例</h2><ol><li>下载Spring5 <a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">下载地址repo.spring.io</a></li><li>打开idea工具, 创建普通Java工程</li><li>导入Spring5 的jar包</li><li>创建一个类, 并在其内部创建一个方法</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;add...............&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ol start="5"><li>创建Spring配置文件, 然后在配置文件中配置创建的对象<ol><li>Spring配置文件使用xml格式</li></ol></li></ol><p><img src="/2022/03/21/Spring/image-20220321214600233.png" alt="image-20220321214600233"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br>    &lt;!--以上自带相关约束--&gt;<br><br><br>&lt;!--    配置user对象创建, 使用&lt;bean&gt;&lt;/bean&gt;   id 是类别名, 路径是class--&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;user&quot;</span> class=<span class="hljs-string">&quot;com.company.Spring5.User&quot;</span>&gt;&lt;/bean&gt;<br><br><br>&lt;/beans&gt;<br><br></code></pre></div></td></tr></table></figure><ol start="6"><li>测试代码编写</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//1. 加载Spring的配置文件</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span>       <span class="hljs-comment">//加载配置文件, 自动定位在src文件夹下</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>    <span class="hljs-comment">//2. 获取配置创建的对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br><br>    <span class="hljs-comment">//3. 输出</span><br>    System.out.println(user);  <span class="hljs-comment">// 对象地址+ 哈希</span><br>    user.add();  <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-3-IOC容器"><a href="#1-3-IOC容器" class="headerlink" title="1.3 IOC容器"></a>1.3 IOC容器</h2><ol><li>IOC底层原理</li></ol><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/254878">面向对象编程</a>中的一种设计原则，可以用来减低计算机<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81/86048">代码</a>之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>。其中最常见的方式叫做**<a href="https://baike.baidu.com/item/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/5177233">依赖注入</a><strong>（Dependency Injection，简称</strong>DI**），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p><ul><li><p>底层原理</p><p>xml解析, 工厂设计模式, 反射     </p><p><img src="/2022/03/21/Spring/image-20220321221250625.png" alt="image-20220321221250625"></p><p><img src="/2022/03/21/Spring/image-20220321221353911.png" alt="image-20220321221353911"></p><p><img src="/2022/03/21/Spring/image-20220321221859165.png" alt="image-20220321221859165"></p></li></ul><ol start="2"><li>IOC接口(BeanFactory)</li></ol><p>IOC 思想基于IOC容器完成, IOC容器底层就是对象工厂</p><p>Spring提供IOC容器的两种方式: (两个接口)</p><ul><li>BeanFactory: IOC容器基本实现方式, 是Spring内部使用的接口, 不提供开发人员使用</li></ul><p>​      加载配置文件的时候不会创建对象, 在获取对象(使用对象)才去创建对象</p><ul><li><p>ApplicationContex : BeanFactory接口的子接口, 提供了更多的更强大的功能, 一般由开发人员使用</p><p>加载配置文件的时候就会创建配置文件中的对象</p></li><li><p>ApplicationContex接口有实现类</p></li></ul><p><img src="/2022/03/21/Spring/image-20220322164408747.png" alt="image-20220322164408747"></p><ol start="3"><li>IOC操作 Bean管理</li></ol><ul><li>Bean管理指的是两个操作</li><li>Spring创建对象</li><li>Spring注入属性</li></ul><ol start="4"><li>IOC操作 Bean管理(基于xml文件)</li></ol><ul><li>基于xml创建对象</li></ul><p>​    在spring配置文件中,使用bean标签, 标签里面添加对应属性, 就可以实现对象创建</p><p><img src="/2022/03/21/Spring/image-20220322165902605.png" alt="image-20220322165902605"></p><p>​    id属性: 唯一标识 </p><p>​    class属性: 类全路径(包类路径) </p><p>​    创建过程中默认执行无参构造完成对象的创建</p><ul><li>基于xml方式注入属性</li></ul><p>DI: 依赖注入, 就是注入属性</p><div class="hljs code-wrapper"><pre><code class="hljs">      1. 使用set方法进行注入</code></pre></div><p>创建set方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company.Spring5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String bname;<br>    <span class="hljs-keyword">private</span> String athour;<br><br>    <span class="hljs-comment">//set方式注入</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBname</span><span class="hljs-params">(String bname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bname = bname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAthour</span><span class="hljs-params">(String athour)</span> &#123;<br>        <span class="hljs-built_in">this</span>.athour = athour;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDemo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(bname + <span class="hljs-string">&quot;::&quot;</span> + athour);<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><p>在配置文件中配置对象注入, 配置属性注入</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--set方法注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.company.Spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使用property标签完成属性的注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;深入理解Java语言&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;athour&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;高司令&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>测试案例</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-comment">//1. 加载Spring的配置文件</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span>       <span class="hljs-comment">//加载配置文件, 自动定位在src文件夹下</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<span class="hljs-comment">//对象创建 + 属性注入</span><br>    <span class="hljs-comment">//2. 获取配置创建的对象</span><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br><br>    <span class="hljs-comment">//3. 输出</span><br>    System.out.println(book);  <span class="hljs-comment">// 对象地址+ 哈希</span><br>    book.testDemo();<span class="hljs-comment">// 结果: name + value  </span><br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>​    2. 有参构造注入</p><p>创建有参构造的类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String oname;<br><span class="hljs-keyword">private</span> String address;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Orders</span><span class="hljs-params">(String oname, String address)</span> &#123;<br>    <span class="hljs-built_in">this</span>.oname = oname;<br>    <span class="hljs-built_in">this</span>.address = address;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在spring文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用有参构造注入属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.company.Spring5.Orders&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;China&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--index指有参构造参数索引--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;fdsa&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span> <span class="hljs-comment">&lt;!--表示第一个参数--&gt;</span><br></code></pre></div></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOrder</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(oname + <span class="hljs-string">&quot;   &quot;</span> + address);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>p名称空间注入</p><p>使用p名称空间注入, 可以简化基于xml配置方式</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--修改前--&gt;</span><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--以上自带相关约束--&gt;</span><br>    <br><span class="hljs-comment">&lt;!--修改后--&gt;</span><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <br>   <br></code></pre></div></td></tr></table></figure><p><code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code>是添加了一个p名称空间在配置文件中</p><p>进行属性注入, 在bean标签里操作.  从而简化配置</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.company.Spring5.Book&quot;</span> <span class="hljs-attr">p:bname</span>=<span class="hljs-string">&quot;深入理解Java语言&quot;</span> <span class="hljs-attr">p:athour</span>=<span class="hljs-string">&quot;高司令&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>xml注入其他类型的属性</p><p>1. </p><ol><li>字面量(属性的初始值)<ol><li>空值 null</li></ol></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;adress&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code class="hljs">2. 包含一些特殊符号   方式一: 使用转移符号 &amp;lt 或者 &amp;gt   方式二: 使用CDATE   <figure class="highlight xml"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;adress&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt; <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure>   * 注入属性 - 外部bean   创建两个类service类和dao类   在service调用dao里面的方法   在spring配置文件中配置</code></pre>   <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--创建service和dao对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.company.Spring5.service.Userservice&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-comment">&lt;!--完成对象的注入--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.company.Spring5.dao.UserDaoImp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>  <span class="hljs-comment">&lt;!--先创建需要被注入的对象--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="5"><li>IOC操作 Bean管理(基于注解)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/03/18/JavaScript/"/>
      <url>/2022/03/18/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p><strong>JavaScript是一门跨平台语言，面向对象的脚本语言</strong>，而Java语言也是跨平台的、面向对象的语言，只不过Java是编译语言，是需要编译成字节码文件才能运行的。javaScript是脚本语言，不需要编译，由浏览器直接解析并执行</p><p>JavaScript是用来控制网页行为的，它能使网页可交互。</p><h1 id="二、JavaScript的引入方式"><a href="#二、JavaScript的引入方式" class="headerlink" title="二、JavaScript的引入方式"></a>二、JavaScript的引入方式</h1><ul><li>内部脚本：将JS代码定义在HTML页面中</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello javaScript&quot;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>外部脚本：将JS代码定义在外部的JS文件中，然后引入到HTML页面中</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/demo.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="三、JavaScript基础语法"><a href="#三、JavaScript基础语法" class="headerlink" title="三、JavaScript基础语法"></a>三、JavaScript基础语法</h1><h2 id="3-1书写语法"><a href="#3-1书写语法" class="headerlink" title="3.1书写语法"></a>3.1书写语法</h2><ul><li>区分大小写</li><li>每行结尾分号可有可无</li><li>注释<ul><li>单行&#x2F;&#x2F;</li><li>多行&#x2F;*    *&#x2F;</li></ul></li><li>大括号代表代码块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(count == <span class="hljs-number">3</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(count)<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-2-输出语句"><a href="#3-2-输出语句" class="headerlink" title="3.2 输出语句"></a>3.2 输出语句</h2><ul><li>window.alert(): 警告框</li><li>document。write(): 写入HTML输出</li><li>console.log(): 写入浏览器控制台</li></ul><h2 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h2><ul><li>任何字母，数字，下划线，美元符</li><li>数字不能开头</li><li>建议驼峰命名</li></ul><p>var全局变量， let 局部变量</p><p>const定义常量，一旦声明就不可更改</p><h2 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h2><ul><li>number：数字（整数，小数，NaN）</li><li>string：字符，字符串（单双引号都可以）</li><li>boolean：布尔值</li><li>null：对象为空</li><li>undefined：当声明变量没有初始化时，默认是undefined</li></ul><h2 id="3-5-运算符"><a href="#3-5-运算符" class="headerlink" title="3.5 运算符"></a>3.5 运算符</h2><ul><li>&#x3D;&#x3D;：判断类型是否一样，不一样则进行类型转换，然后进行值的比较</li><li>&#x3D;&#x3D;&#x3D;：判断类型是否一样，不一样直接返回false，一样才进行值的比较</li></ul><blockquote><p>可以用parseInt() 函数进行类型转换</p></blockquote><h2 id="3-6-流程控制语句"><a href="#3-6-流程控制语句" class="headerlink" title="3.6 流程控制语句"></a>3.6 流程控制语句</h2><p>if，switch，for，while，dowhile…</p><h2 id="3-7-函数"><a href="#3-7-函数" class="headerlink" title="3.7 函数"></a>3.7 函数</h2><ul><li>定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数名(参数<span class="hljs-number">1</span>，参数<span class="hljs-number">2</span>，...)&#123;<br>    要执行的代码<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 函数名 = <span class="hljs-keyword">function</span> (<span class="hljs-params">参数<span class="hljs-number">1</span>，参数<span class="hljs-number">2</span> ...</span>)&#123;<br>    要执行的代码<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="四、JavaScript常用对象"><a href="#四、JavaScript常用对象" class="headerlink" title="四、JavaScript常用对象"></a>四、JavaScript常用对象</h1><ul><li>基本对象<ul><li>Array</li><li>Boolean</li><li>Date</li><li>Math</li><li>Number</li><li>String</li><li>RegExp</li><li>Global</li></ul></li><li>BOM对象（browser）<ul><li>Window</li><li>Navigator</li><li>Screen</li><li>History</li><li>Location</li></ul></li><li>DOM对象<ul><li>Document</li><li>Anchor</li><li>Area</li><li>…</li></ul></li></ul><h2 id="4-1-Array对象"><a href="#4-1-Array对象" class="headerlink" title="4.1 Array对象"></a>4.1 Array对象</h2><p>用于定义数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javaScript"><span class="hljs-comment">//方式1</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3.</span>..);<br><br><span class="hljs-comment">//方式2</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3.</span>..]<br></code></pre></div></td></tr></table></figure><p>访问数组中元素和Java语言一样</p><p>arr[i] ;</p><p><strong>特点：</strong></p><p>JavaScript中的数组相当于Java中的集合，数组的长度是可以变化的，而JavaScript是弱类型，所以可以存储任意的类型数据</p><h2 id="4-2-String对象"><a href="#4-2-String对象" class="headerlink" title="4.2 String对象"></a>4.2 String对象</h2><p><strong>创建：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//方式1</span><br><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(s)<br><br><span class="hljs-comment">//方式2</span><br><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-string">&quot;数组&quot;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-3-自定义对象"><a href="#4-3-自定义对象" class="headerlink" title="4.3 自定义对象"></a>4.3 自定义对象</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 对象名称 = &#123;<br>    属性名称<span class="hljs-number">1</span>：属性值，<br>    ....<br>    函数名称：<span class="hljs-keyword">function</span>(<span class="hljs-params">..</span>)&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>调用属性：对象名.属性</p><p>调用函数：对象名.函数名(…)</p><h1 id="五、BOM"><a href="#五、BOM" class="headerlink" title="五、BOM"></a>五、BOM</h1><p>BOM：Browser Object Model 浏览器对象模型。也就是JavaScript将浏览器的各个组成部分封装为对象</p><p>BOM中包含以下对象：</p><ul><li>Window：浏览器窗口对象</li><li>Navigator: 浏览器对象</li><li>Screen：屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul><h2 id="5-1-Window对象"><a href="#5-1-Window对象" class="headerlink" title="5.1 Window对象"></a>5.1 Window对象</h2><p>window对象是JavaScript对浏览器的窗口进行封装的对象</p><ul><li><p>Window对象函数</p><ul><li>alert（）</li><li>confirm（）</li><li>setInterver（）：以指定周期来调用函数或计算表达式</li></ul><p>setInterver(function, 毫秒数)</p><ul><li>setTimeout（）：在指定的毫秒数后调用函数或计算表达式</li></ul></li></ul><h2 id="5-2-History对象"><a href="#5-2-History对象" class="headerlink" title="5.2 History对象"></a>5.2 History对象</h2><p><strong>获取</strong></p><p>使用window.history获取，其中window.可以省略</p><p>History对象的函数</p><ul><li>back（）：加载history列表中的前一个URL</li><li>forward（）：加载history列表中的后一个URL</li></ul><h2 id="5-3-Location对象"><a href="#5-3-Location对象" class="headerlink" title="5.3 Location对象"></a>5.3 Location对象</h2><p>Locatioin对象是JavaScript对地址栏封装的对象，可以通过操作该对象，跳转到任意页面</p><p>获取：window.location，其中window.可以省略</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;即将跳转&quot;</span>)<br>location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>;<br>&#125;,<span class="hljs-number">3000</span>)<br></code></pre></div></td></tr></table></figure><h1 id="六、DOM"><a href="#六、DOM" class="headerlink" title="六、DOM"></a>六、DOM</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><p>DOM：Document Object Model 文档对象模型。也就是JavaScript将html文档的各个组成部分封装为对象</p><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul><h2 id="6-2-获取Element对象"><a href="#6-2-获取Element对象" class="headerlink" title="6.2 获取Element对象"></a>6.2 获取Element对象</h2><ul><li>getElementById（）：根据Id属性值获取，返回单个Element对象</li><li>getElementByTagName(): 根据标签名称获取，返回Element对象数组</li><li>getElemtntByName():根据name属性值获取，返回Element对象数组</li><li>getElementByClassName：根据class属性值获取，返沪Element对象数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light&quot;</span>);<br><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByTagName</span>(<span class="hljs-string">&quot;div&quot;</span>);<br></code></pre></div></td></tr></table></figure><h2 id="6-3-HTML-Element对象使用"><a href="#6-3-HTML-Element对象使用" class="headerlink" title="6.3 HTML Element对象使用"></a>6.3 HTML Element对象使用</h2><ol><li>点亮灯泡</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light&quot;</span>);<br>img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;../imgs/on.gif&quot;</span>;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>将所有的div标签的标签体内容替换为呵呵</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i &lt; divs.<span class="hljs-property">length</span>;i++)&#123;<br>    divs[i].<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;呵呵&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>使用所有的复选框呈现被选中的状态</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> hobbys = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;hobby&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; hobbys.<span class="hljs-property">length</span>;i++)&#123;<br>    hobby[i].<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="七、事件监听"><a href="#七、事件监听" class="headerlink" title="七、事件监听"></a>七、事件监听</h1><p>HTML事件是发生在HTML元素上的“事情”，比如：页面上的按钮被点击、鼠标移动到元素之上、按下键盘按键等都是事件。</p><p>事件监听是JavaScript可以在事件被侦听到时执行一段逻辑代码。</p><h2 id="7-1-事件绑定"><a href="#7-1-事件绑定" class="headerlink" title="7.1 事件绑定"></a>7.1 事件绑定</h2><ul><li>方式一：通过HTML标签中的事件属性进行绑定</li></ul><p>如下面代码，有一个按钮元素，我们是在该标签上定义事件属性，在事件属性中绑定函数。onclick就是单击事件的事件属性。onclick&#x3D;”on()”, 表示该点击事件绑定了一个名为on（） 的函数</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;被点击了&quot;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>方式二：通过DOM元素属性绑定</li></ul><p>如下面代码是按钮标签，在该标签上我们并没有使用事件属性，绑定事件的操作需要在js代码中实现。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>下面js代码是获取了id&#x3D;‘btn’ 的元素对象，然后将onclick作为该对象的属性，并且绑定匿名函数。该函数是在事件触发之后自动执行的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;被点击&quot;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="7-2-常见事件"><a href="#7-2-常见事件" class="headerlink" title="7.2 常见事件"></a>7.2 常见事件</h2><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标移动到某个元素上</td></tr><tr><td>onmouseout</td><td>鼠标从某个元素上移开</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//bug<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;num1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sub&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;num1&quot;</span>).<span class="hljs-property">onfocus</span> = fun;</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;safetied&quot;</span>);</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//修改<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;num1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sub&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;num1&quot;</span>).<span class="hljs-property">onfocus</span>=col;</span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">col</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;点击&quot;</span>)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS入门</title>
      <link href="/2022/03/18/CSS%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/18/CSS%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>css是一门语言，用于控制网页的表现。W3C标准规定了网页是由以下组成：</p><ul><li>结构：HTML</li><li>表现：CSS</li><li>行为：JavaScript</li></ul><p>CSS也要有一个专业的名词：Cascading Style Sheet（层叠样式表）</p><p>例如下面的代码，style标签中定义的就是CSS代码。该代码描述了将div标签的内容的字体颜色设置为红色</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">titile</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">titile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        你好css<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="二、CSS导入方式"><a href="#二、CSS导入方式" class="headerlink" title="二、CSS导入方式"></a>二、CSS导入方式</h1><h2 id="2-1-内联样式"><a href="#2-1-内联样式" class="headerlink" title="2.1 内联样式"></a>2.1 内联样式</h2><p>在标签中使用style属性，属性值就是css属性键值对</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span><br>    你好css<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-2-内部样式"><a href="#2-2-内部样式" class="headerlink" title="2.2 内部样式"></a>2.2 内部样式</h2><p>在head标签中定义style标签</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">titile</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">titile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        你好css<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>2.3 外部样式</p><p>在html文件的head标签中定义link标签，引入外部的css文件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--这是html文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;demo.css&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*这是CSS文件*/</span><br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-3-css-选择器"><a href="#2-3-css-选择器" class="headerlink" title="2.3  css 选择器"></a>2.3  css 选择器</h2><p>css 选择器就是选取需设置样式的元素（标签），比如如下css代码：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br><span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如上代码中的 <code>div</code> 就是 css 中的选择器。我们只讲下面三种选择器：</p><ul><li><p><strong>元素选择器</strong></p><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">元素名称&#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></div></td></tr></table></figure><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<span class="hljs-attribute">color</span>:red&#125;  <span class="hljs-comment">/*该代码表示将页面中所有的div标签的内容的颜色设置为红色*/</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>id选择器</strong></p><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#id</span>属性值&#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></div></td></tr></table></figure><p>例子：</p><p>html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>hello css2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>css代码如下：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#name</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<span class="hljs-comment">/*该代码表示将页面中所有的id属性值是 name 的标签的内容的颜色设置为红色*/</span><br></code></pre></div></td></tr></table></figure></li><li><p>类选择器</p><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.class</span>属性值&#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></div></td></tr></table></figure><p>例子：</p><p>html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>hello css3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>css代码如下：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.cls</span>&#123;<span class="hljs-attribute">color</span>: red;&#125; <span class="hljs-comment">/*该代码表示将页面中所有的class属性值是 cls 的标签的内容的颜色设置为红色*/</span><br></code></pre></div></td></tr></table></figure></li></ul><p><strong>代码演示：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#name</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.cls</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>div2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>div3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML标签的使用</title>
      <link href="/2022/03/18/HTML%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/18/HTML%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="一、快速入门"><a href="#一、快速入门" class="headerlink" title="一、快速入门"></a>一、快速入门</h1><h2 id="1-1-结构"><a href="#1-1-结构" class="headerlink" title="1.1 结构"></a>1.1 结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs htm">&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;标签&lt;/title&gt;<br>&lt;head&gt;<br><br>&lt;body&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>注：标签的定义不区分大小写</p><h1 id="二、基础标签"><a href="#二、基础标签" class="headerlink" title="二、基础标签"></a>二、基础标签</h1><table><thead><tr><th align="center">标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><h1> ~ &lt; h6&gt;</h1></td><td align="center">定义标题，h1最大，h6最小</td></tr><tr><td align="center"><font></font></td><td align="center">定义文本字体、尺寸、颜色</td></tr><tr><td align="center"><b></b></td><td align="center">粗体</td></tr><tr><td align="center"><i></i></td><td align="center">斜体</td></tr><tr><td align="center"><u></u></td><td align="center">下划线</td></tr><tr><td align="center"><center></center></td><td align="center">文本居中</td></tr><tr><td align="center"><p></p></td><td align="center">定义段落</td></tr><tr><td align="center"><br></td><td align="center">定义换行</td></tr><tr><td align="center"><hr></td><td align="center">定义水平线</td></tr></tbody></table><center>    居中</center><h1 id="三、图片、音频、视频标签"><a href="#三、图片、音频、视频标签" class="headerlink" title="三、图片、音频、视频标签"></a>三、图片、音频、视频标签</h1><table><thead><tr><th align="center">标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><img></td><td align="center">定义图片</td></tr><tr><td align="center"><audio></audio></td><td align="center">定义音频</td></tr><tr><td align="center"><video></video></td><td align="center">定义视频</td></tr></tbody></table><h1 id="四、超链接标签"><a href="#四、超链接标签" class="headerlink" title="四、超链接标签"></a>四、超链接标签</h1><p><a> 定义超链接，用于链接到另一个资源</a></p><p>href: 资源url</p><p>target：打开方式</p><p>​        _self: 默认值，当前页面打开</p><p>​        _blank: 在新的空白页面中打开</p><p><a href="www.baidu.com" target="_self">百度</a></p><h1 id="五、列表标签"><a href="#五、列表标签" class="headerlink" title="五、列表标签"></a>五、列表标签</h1><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><ol></ol></td><td>定义有序列表</td></tr><tr><td><ul></ul></td><td>定义无序列表</td></tr><tr><td><li></li></td><td>定义列表项</td></tr></tbody></table><ol>    <li>你好</li>    <li>中国</li></ol><ul>    <li>你好</li>    <li>中国</li></ul><h1 id="六、表格标签"><a href="#六、表格标签" class="headerlink" title="六、表格标签"></a>六、表格标签</h1><ul><li>table：定义表格<ul><li>border：边框宽度</li><li>width：规定表格的宽度</li><li>cellspaceing：单元格之间的空白距离</li></ul></li><li>tr：定义行<ul><li>align：定义表格行的内容对其方式</li></ul></li><li>td：定义单元格</li><li>th：定义表头单元格</li></ul><h1 id="七、布局标签"><a href="#七、布局标签" class="headerlink" title="七、布局标签"></a>七、布局标签</h1><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><div></div></td><td>定义HTML文档中一个区域部分，常与css一起使用，用于布局网页</td></tr><tr><td><span></span></td><td>用组合行内元素（即没有换行效果）</td></tr></tbody></table><h1 id="八、表单标签"><a href="#八、表单标签" class="headerlink" title="八、表单标签"></a>八、表单标签</h1><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><form></form></td><td>定义表单</td></tr><tr><td><input></td><td>定义表单项，通过type属性控制输入属性</td></tr><tr><td><lable></lable></td><td>为表单定义标注</td></tr><tr><td><select></select></td><td>定义下拉列表</td></tr><tr><td><option></option></td><td>定义下拉列表的列表项</td></tr><tr><td><textare></textare></td><td>定义文本域</td></tr></tbody></table><h2 id="8-1-form-标签属性"><a href="#8-1-form-标签属性" class="headerlink" title="8.1 form 标签属性"></a>8.1 form 标签属性</h2><ul><li>action：规定提交表单时向何处发送表单数据，该属性值就是URL</li><li>method：规定用于发送表单数据的方式    get（默认，参数加到url后边）和post（参数放到http请求消息体中）</li></ul><form>    <input type="text">    <input type="submit"></form><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="8-2-表单项标签"><a href="#8-2-表单项标签" class="headerlink" title="8.2 表单项标签"></a>8.2 表单项标签</h2><ul><li><input>: 表单项，通过type属性控制输入方式</li></ul><table><thead><tr><th align="center">type 取值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">text</td><td align="center">默认值。定义单行的输入字段 <form><input type="text"></form></td></tr><tr><td align="center">password</td><td align="center">定义密码字段</td></tr><tr><td align="center">radio</td><td align="center">定义单选按钮（男女）</td></tr><tr><td align="center">checkbox</td><td align="center">定义复选框</td></tr><tr><td align="center">file</td><td align="center">定义文件上传按钮</td></tr><tr><td align="center">hidden</td><td align="center">定义隐藏字段</td></tr><tr><td align="center">submit</td><td align="center">定义提交按钮</td></tr><tr><td align="center">reset</td><td align="center">定义重置按钮</td></tr><tr><td align="center">button</td><td align="center">定义可点击按钮</td></tr></tbody></table><ul><li>select：定义下拉列表，<option>定义列表项</option></li></ul><select>    <option>成都</option>    <option>北京</option>    <option>重庆</option></select> <figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>成都<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>重庆<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>textarea: 文本域</li></ul><textarea>这是一片文本域<figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><br>这是一片文本域<br></code></pre></div></td></tr></table></figure></textarea>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/03/13/Linux/"/>
      <url>/2022/03/13/Linux/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="一-Vi-和Vim编辑器"><a href="#一-Vi-和Vim编辑器" class="headerlink" title="一 Vi 和Vim编辑器"></a>一 Vi 和Vim编辑器</h1><p>Vi : Linux的内置文本编辑器, 相当于是Windows的记事本</p><p>Vim : Vi 的增强版本</p><h2 id="1-1-常用的三种模式"><a href="#1-1-常用的三种模式" class="headerlink" title="1.1 常用的三种模式"></a>1.1 常用的三种模式</h2><ul><li>正常模式: 直接进入时,  </li><li>插入模式: 按下i, I, o, O , a, A, r, R 进入插入模式</li><li>命令行模式:</li></ul><p>案例: 用vim 编辑一个Java文件</p><ol><li>建立文件, 直接进入了正常模式</li></ol><p><img src="/2022/03/13/Linux/image-20220313222410561.png" alt="image-20220313222410561"></p><ol start="2"><li>按下 i 进入插入模式</li></ol><p><img src="/2022/03/13/Linux/image-20220313222730426.png" alt="image-20220313222730426"></p><ol start="3"><li>按下<code>ESC </code>后输入  <code> :</code> 进入命令行模式 <code>wq</code>表示写入并退出</li></ol><p><img src="/2022/03/13/Linux/image-20220313223133660.png" alt="image-20220313223133660"></p><h2 id="1-2-vi-和-vim-快捷键"><a href="#1-2-vi-和-vim-快捷键" class="headerlink" title="1.2 vi 和 vim 快捷键"></a>1.2 vi 和 vim 快捷键</h2><ol><li>拷贝当前行: yy    拷贝当前行向下五行: 5yy                           &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;正常模式</li><li>删除当前行: dd   删除当前行向下五行 5dd                          &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;正常模式</li><li>查找:  &#x2F;关键字     n—&gt;下一个                                                      &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;正常模式—–在进入—-&gt;命令行模式</li><li>设置文件行号: set nu   取消行号: set nonu                           &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;命令行模式</li><li>命令行  : wq, :q,  :q!                                                                  &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;命令行模式</li><li>大写G末尾行, 小写gg首行                                                        &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一般模式</li><li>撤销 :           输入u                                                                       &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一般模式</li><li>定位某一行:          数字(行号) + shift  + g                                    &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一般模式</li></ol><p><img src="/2022/03/13/Linux/image-20220317131715632.png" alt="image-20220317131715632"></p><h2 id="快速截图笔记"><a href="#快速截图笔记" class="headerlink" title="快速截图笔记"></a>快速截图笔记</h2><p><img src="/2022/03/13/Linux/image-20220317131853749.png" alt="image-20220317131853749"></p><p><img src="/2022/03/13/Linux/image-20220317131931827.png" alt="image-20220317131931827"></p><h1 id="Linux-实操篇-—-开机-重启-用户登录注销"><a href="#Linux-实操篇-—-开机-重启-用户登录注销" class="headerlink" title="Linux 实操篇 —-   开机 重启  用户登录注销"></a>Linux 实操篇 —-   开机 重启  用户登录注销</h1><p><img src="/2022/03/13/Linux/image-20220317132127588.png" alt="image-20220317132127588"></p><p><img src="/2022/03/13/Linux/image-20220317132834324.png" alt="image-20220317132834324"></p><p><img src="/2022/03/13/Linux/image-20220317133949173.png" alt="image-20220317133949173"></p><p><img src="/2022/03/13/Linux/image-20220317134145997.png" alt="image-20220317134145997"></p><p><img src="/2022/03/13/Linux/image-20220317134220832.png" alt="image-20220317134220832"></p><p><img src="/2022/03/13/Linux/image-20220317134629182.png" alt="image-20220317134629182"></p><p>创建文件夹test, 用户名为king</p><p><img src="/2022/03/13/Linux/image-20220317134856887.png" alt="image-20220317134856887"></p><p><img src="/2022/03/13/Linux/image-20220317135115760.png" alt="image-20220317135115760"></p><p><img src="/2022/03/13/Linux/image-20220317135141339.png" alt="image-20220317135141339"></p><p><img src="/2022/03/13/Linux/image-20220317141702389.png" alt="image-20220317141702389"></p><p><img src="/2022/03/13/Linux/image-20220317141923585.png" alt="image-20220317141923585"></p><p><img src="/2022/03/13/Linux/image-20220317142221605.png" alt="image-20220317142221605"></p><p><img src="/2022/03/13/Linux/image-20220317142733840.png" alt="image-20220317142733840"></p><p><img src="/2022/03/13/Linux/image-20220317142924962.png" alt="image-20220317142924962"></p><h1 id="Linux实操篇-—-实用指令"><a href="#Linux实操篇-—-实用指令" class="headerlink" title="Linux实操篇 —- 实用指令"></a>Linux实操篇 —- 实用指令</h1><p><img src="/2022/03/13/Linux/image-20220317144742243.png" alt="image-20220317144742243"></p><p><img src="/2022/03/13/Linux/image-20220317144936865.png" alt="image-20220317144936865"></p><p><img src="/2022/03/13/Linux/image-20220317145023377.png" alt="image-20220317145023377"></p><p><img src="/2022/03/13/Linux/image-20220317145401450.png" alt="image-20220317145401450"></p><p><img src="/2022/03/13/Linux/image-20220317145552623.png" alt="image-20220317145552623"></p><p><img src="/2022/03/13/Linux/image-20220317150802379.png" alt="image-20220317150802379"></p><p><img src="/2022/03/13/Linux/image-20220317151002156.png" alt="image-20220317151002156"></p><p>输入完毕后, 按下CTRL + X</p><p><img src="/2022/03/13/Linux/image-20220317151143122.png" alt="image-20220317151143122"></p><p><img src="/2022/03/13/Linux/image-20220317151451651.png" alt="image-20220317151451651"></p><p><img src="/2022/03/13/Linux/image-20220317155528118.png" alt="image-20220317155528118"></p><p><img src="/2022/03/13/Linux/image-20220317155616751.png" alt="image-20220317155616751"></p><p><img src="/2022/03/13/Linux/image-20220317155756444.png" alt="image-20220317155756444"></p><p><img src="/2022/03/13/Linux/image-20220317160527283.png" alt="image-20220317160527283"><img src="/2022/03/13/Linux/image-20220317160641841.png" alt="image-20220317160641841"></p><p><img src="/2022/03/13/Linux/image-20220317161141723.png" alt="image-20220317161141723"></p><p><img src="/2022/03/13/Linux/image-20220317161642490.png" alt="image-20220317161642490"></p><p><img src="/2022/03/13/Linux/image-20220317165055749.png" alt="image-20220317165055749"></p><p><img src="/2022/03/13/Linux/image-20220317165232901.png" alt="image-20220317165232901"></p><p><img src="/2022/03/13/Linux/image-20220317170214213.png" alt="image-20220317170214213"></p><p><img src="/2022/03/13/Linux/image-20220317170255873.png" alt="image-20220317170255873"></p><p><img src="/2022/03/13/Linux/image-20220317170630976.png" alt="image-20220317170630976"><img src="/2022/03/13/Linux/image-20220317172409464.png" alt="image-20220317172409464"></p><p><img src="/2022/03/13/Linux/image-20220317174029144.png" alt="image-20220317174029144"></p><p><img src="/2022/03/13/Linux/image-20220317174101098.png" alt="image-20220317174101098"></p><p><img src="/2022/03/13/Linux/image-20220317175001673.png" alt="111111111">\</p><p><img src="/2022/03/13/Linux/image-20220317175902000.png" alt="image-20220317175902000"></p><p><img src="/2022/03/13/Linux/image-20220317181315267.png" alt="image-20220317181315267"></p><p>cal: 显示日历</p><p><img src="/2022/03/13/Linux/image-20220317183501898.png" alt="image-20220317183501898"></p><p><img src="/2022/03/13/Linux/image-20220317184340472.png" alt="image-20220317184340472"></p><h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><p><img src="/2022/03/13/Linux/image-20220318160206754.png" alt="image-20220318160206754"></p><p><img src="/2022/03/13/Linux/image-20220318160440700.png" alt="image-20220318160440700"></p><p>cal 2020: 显示2020年所有月份的日历 </p><h1 id="搜索查找"><a href="#搜索查找" class="headerlink" title="搜索查找"></a>搜索查找</h1><p><img src="/2022/03/13/Linux/image-20220318160852574.png" alt="image-20220318160852574"></p><p><img src="/2022/03/13/Linux/image-20220318163817992.png" alt="image-20220318163817992"></p><p><img src="/2022/03/13/Linux/image-20220318164439618.png" alt="image-20220318164439618"></p><p><img src="/2022/03/13/Linux/image-20220318164817688.png" alt="image-20220318164817688"></p><p><img src="/2022/03/13/Linux/image-20220318165028365.png" alt="image-20220318165028365"><img src="/2022/03/13/Linux/image-20220318165438695.png" alt="image-20220318165438695"></p><h1 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h1><div class="hljs code-wrapper"><pre><code class="hljs"> ![image-20220318165522090](Linux/image-20220318165522090.png)</code></pre></div><p><img src="/2022/03/13/Linux/image-20220318165918622.png" alt="image-20220318165918622"></p><p><img src="/2022/03/13/Linux/image-20220318171645516.png" alt="image-20220318171645516"></p><p><img src="/2022/03/13/Linux/image-20220318180842927.png" alt="image-20220318180842927"></p><h1 id="第十章-组管理和权限管理"><a href="#第十章-组管理和权限管理" class="headerlink" title="第十章 组管理和权限管理"></a>第十章 组管理和权限管理</h1><h2 id="10-1-Linux-组管理"><a href="#10-1-Linux-组管理" class="headerlink" title="10.1 Linux 组管理"></a>10.1 Linux 组管理</h2><p><img src="/2022/03/13/Linux/image-20220318204730884.png" alt="image-20220318204730884"></p><p><img src="/2022/03/13/Linux/image-20220318205523879.png" alt="image-20220318205523879"></p><p><img src="/2022/03/13/Linux/image-20220318205921248.png" alt="image-20220318205921248"></p><p><img src="/2022/03/13/Linux/image-20220318211225035.png" alt="image-20220318211225035"></p><p><img src="/2022/03/13/Linux/image-20220318211323190.png" alt="image-20220318211323190"></p><p><img src="/2022/03/13/Linux/image-20220318211824205.png" alt="image-20220318211824205"></p><h2 id="10-2-权限管理"><a href="#10-2-权限管理" class="headerlink" title="10.2 权限管理"></a>10.2 权限管理</h2><p><code>ll</code>或<code>ls -l</code> 第一部分为权限, 共十位</p><p><strong>0 - 9</strong>位说明:</p><ol><li><p>第0位确定文档类型(d, -, l, c, b):</p><p><code>l</code> 是链接, 相当于快捷方式</p><p><code>d</code>是目录, 相当于文件夹</p><p><code>c</code>是字符设备文件, 如鼠标, 键盘</p><p><code>b</code>是块设备, 如硬盘</p><p><code>-</code> 普通文件, 如reademe.txt</p></li><li><p>第1-3位确定该文件所有者拥有的权限**(<code>r</code>: read - 4 <code>w</code>: write - 2<code>x</code>: execute(可执行) - 1)**</p></li><li><p>第4-6位确定该文件所有组拥有的权限(rwx)</p></li><li><p>第7-9位确定其他组拥有该文件的权限</p></li></ol><p>注意点:</p><p>​    对某个文件有**<code>写</code>**的权限, 并不代表可以删除该文件或对其重命名, 只能对该文件所在目录有写的权限才可以删除该文件或重命名.</p><p><strong><code>rwx</code>作用到目录上时:</strong></p><p> r 表示可查看目录内容</p><p>w 表示可对目录内文件进行创建, 删除, 重命名</p><p>x 表示可以进入该目录</p><p>权限后的数字含义:  文件: 直接是1, 目录: 子目录数+文件数</p><p>所有组后面的数字含义: 代表该文件大小 – 所占字节数</p><p>最后表示修改日期</p><p><strong>修改权限</strong></p><p>第一种方式: + , - , &#x3D; </p><p>u: 所有者 g: 所有组  o: 其他人 a: 所有人(u, g, o的总和)</p><ol><li>chmod u&#x3D;rwx, g&#x3D;rx, o&#x3D; x, 文件名&#x2F;目录名   <strong>多个对象权限修改时使用逗号分隔</strong></li><li>chmod o+w 文件名&#x2F;目录名</li><li>chmod a-x</li></ol><p>第二种方式: 通过数字变更权限 1, 2, 3, 4, 5 , 6, 7</p><p>r &#x3D; 4, w &#x3D; 2, x &#x3D; 1</p><p>1: –x</p><p>2: -w-</p><p>3: -wx</p><p>4: r–</p><p>5: r-x</p><p>6: rw-</p><p>7: rwx</p><p>例:</p><p>​    chmod 751文件目录名  &#x3D;&#x3D;&gt; chmod u&#x3D;rwx,g&#x3D;rx, o&#x3D;x 文件目录名</p><p>修改文件所有者 - chown</p><p><code>chown newowner 文件/目录</code> : 改变所有者   :  chown tom abc.txt</p><p><code>chown newowner:newgroup 文件/目录</code> 改变所有者和所在组</p><p><code>chown -R newowner 文件/目录</code> 如果是目录 则使其下所有子文件或目录递归生效</p><p>修改文件所在组 - chgrp</p><p><code>chgrp newgroup 文件/目录</code></p><p><code>chgrp -R newgroup 文件/目录</code></p><p>将Linux设置成图形界面或者命令行界面</p><p><code>systemctl set-default graphical.target</code>由命令行模式更改为图形界面模式</p><p><code>systemctl set-default multi-user.target</code>由图形界面模式更改为命令行模式</p><h1 id="第十一章-定时任务调度"><a href="#第十一章-定时任务调度" class="headerlink" title="第十一章 定时任务调度"></a>第十一章 定时任务调度</h1><ul><li><p>概述</p><p>任务调度: 是指系统在某个时间执行的特定的命令或程序</p><p>任务调度分类: 1. 系统工作  2. 个别用户工作</p></li></ul><h2 id="10-1-crond任务调度机制"><a href="#10-1-crond任务调度机制" class="headerlink" title="10.1 crond任务调度机制"></a>10.1 crond任务调度机制</h2><ul><li><p>基本语法</p><p><code>crontab [选项]</code></p></li><li><p>常用选项</p><ul><li><code>-e</code>: 编辑crontab定时任务</li><li><code>-l</code>: 查询crontab任务</li><li><code>-r</code>: 删除当前用户所有的crontab任务</li></ul></li><li><p>快速入门</p><p>设置任务调度文件: <code>/etc/crontab</code></p><p>设置个人任务调度: 执行<code>crontab -e </code>命令</p><p>接着输入任务到调度文件, 如: <code>*/1**** ls -l /etc/ &gt; /tmp/to.txt</code> 表示每个小时的每分钟执行一次</p></li><li><p>参数细节说明:</p><table><thead><tr><th align="center">项目</th><th align="center">含义</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">第一个<code>*</code></td><td align="center">分钟</td><td align="center">0-59</td></tr><tr><td align="center">第二个<code>*</code></td><td align="center">小时</td><td align="center">0-23</td></tr><tr><td align="center">第三个<code>*</code></td><td align="center">几号</td><td align="center">1-31</td></tr><tr><td align="center">第四个<code>*</code></td><td align="center">月份</td><td align="center">1-12</td></tr><tr><td align="center">第五个<code>*</code></td><td align="center">星期</td><td align="center">0-7(0和7都代表星期日)</td></tr></tbody></table></li><li><p>特殊符号说明:</p><table><thead><tr><th align="center">特殊符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>*</code></td><td align="center">代表任何时间. 比如第一个<code>*</code>代表一小时每分钟都执行一次</td></tr><tr><td align="center"><code>,</code></td><td align="center">代表不连续的时间. 例如 <code>0 8,12,16*** </code>  就代表在每天的8点0分,12点0分, 16点0分都执行一次命令</td></tr><tr><td align="center"><code>-</code></td><td align="center">代表连续的时间范围. 比如 <code>0 5 * * 1-6</code> 代表周一到周六的凌晨五点0分执行命令</td></tr><tr><td align="center"><code>*/n</code></td><td align="center">代表每隔多久执行一次, 比如<code>*/10****</code>代表每隔10分钟执行一次命令</td></tr></tbody></table></li><li><p>crond相关命令</p><p><code>crontab -e</code> : 设定任务</p><p><code>crontab -r</code> : 终止任务调度</p><p><code>crontab -l</code> : 列出当前有哪些任务调度</p><p><code>service crond restart</code> : 重启任务调度</p><p>注意: 写shell脚本后记得给它赋予执行的权限</p></li></ul><h2 id="10-2-at任务调度机制"><a href="#10-2-at任务调度机制" class="headerlink" title="10.2 at任务调度机制"></a>10.2 at任务调度机制</h2><ul><li><p>基本介绍</p><ul><li>at命令是一次性定时计划任务, at的守护进程atd会以后台模式运行, 检查作业队列来运行</li><li>默认情况下, atd守护进程每60秒检查作业队列, 有作业时, 会检查作业运行时间, 如果时间与当前时间匹配, 则运行此作业.</li><li>at命令是一次性定时计划任务, 执行完一个任务后不再执行此任务</li><li>在使用at命令的时候, 一定要保证atd进程的启动, 可以使用相关指令来查看</li></ul><p><code>ps -ef | grep atd </code> 检查atd是否在运行</p></li><li><p>at命令格式:</p><p><code>at [选项] [时间]</code></p><p><code>Ctrl + D 两次</code> 结束at命令的输入</p></li><li><p>at 命令选项( 一般使用的频率较小)</p></li></ul><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>-m</code></td><td align="center">当指定的任务被完成后, 将给用户发送邮件, 即使没有标准输出</td></tr><tr><td align="center"><code>-I</code></td><td align="center">atq的别名</td></tr><tr><td align="center"><code>-d</code></td><td align="center">atrm的别名</td></tr><tr><td align="center"><code>-v</code></td><td align="center">显示任务将被执行的时间</td></tr><tr><td align="center"><code>-c</code></td><td align="center">打印任务的内容到标准输出</td></tr><tr><td align="center"><code>-V</code></td><td align="center">显示版本信息</td></tr><tr><td align="center"><code>-q &lt;队列&gt;</code></td><td align="center">使用指定的队列</td></tr><tr><td align="center"><code>-f &lt;文件&gt;</code></td><td align="center">从指定文件读入任务而不是从标准输入读入</td></tr><tr><td align="center"><code>-t &lt;时间参数&gt;</code></td><td align="center">以时间参数的形式提交要运行的任务</td></tr></tbody></table><ul><li>at指定时间的方式<ul><li><code>hh:mm</code>(小时:分钟). 加入该时间已经过去, 那么就放在第二天执行. </li><li>使用midnight(深夜), noon(中午) , teatime(下午4点)等比较模糊的词语来指定时间</li><li>采用12小时计时制, 即在时间之后加<code>am</code>或<code>pm</code>, 例如12pm指定具体日期, 指定格式为month day 或 mm&#x2F;dd&#x2F;yy 或dd.mm.yy, <strong>指定日期必须跟在指定时间的后边</strong>. 例如 <code>4:00 2021-03-01</code></li><li>使用相对计时法. 指定格式为: <code>now + count time-units</code> now就是当前时间, time-units是时间单位, 这里可以是minutes, hours, days, weeks. count是时间数量.    例: <code>now + 5 minutes</code></li><li>直接使用today, tomorrow来指定完成任务的时间</li></ul></li><li>应用实例<ul><li>案例1: 2天后下午五点执行<code>/bin/ls /home</code>  : <code>at 17:00 + 2 days      /bin/ls /home</code></li><li>案例2: <code>atq</code>查看系统中没有执行的工作任务: <code>atq</code></li><li>案例3: 明天17点钟, 输出时间到指定文件内: <code>at 5pm tomorrow          date &gt;&gt; /home/mydate.txt</code></li><li>案例4: 2分钟后, 输出时间到指定文件内: <code>at now + 2 minutes      date &gt;&gt; /home/mydate.txt</code></li><li>案例5: 删除已经设置的任务: <code>atrm [编号]</code></li></ul></li></ul><p>注意: 也可以直接执行脚本: </p><div class="note note-success">            <p>vim shname.sh    创建shell脚本文件</p><p>.&#x2F;shname.sh     执行shell脚本软件</p>          </div><h1 id="第十二章-Linux磁盘分区-挂载"><a href="#第十二章-Linux磁盘分区-挂载" class="headerlink" title="第十二章 Linux磁盘分区|挂载"></a>第十二章 Linux磁盘分区|挂载</h1><ul><li>原理介绍<ul><li>对Linux来说, 无论有几个分区, 分给哪一目录使用, 它归根结底只有一个目录, 一个独立且唯一的文件结构, Linux中每个分区都是用来组成整个文件系统的一部分.</li><li>Linux采用了一种叫”载入”的处理方法, 它的整个文件系统中包含了一整套的文件和目录, 且将一个分区和一个目录联系起来. 这时要载入的一个分区将使它的存储空间在一个目录下获得.</li><li>示意图</li></ul></li></ul><p><img src="/2022/03/13/Linux/image-20220702162550397.png" alt="image-20220702162550397"></p><h2 id="12-1-挂载经典案例"><a href="#12-1-挂载经典案例" class="headerlink" title="12.1 挂载经典案例"></a>12.1 挂载经典案例</h2><p>通过案例来熟悉磁盘的相关指令和深入理解磁盘分区, 挂载, 卸载的概念</p><ul><li>如何增加一块磁盘</li></ul><ol><li><p>虚拟机添加硬盘:  点击虚拟机菜单<code>设置</code>&#x3D;&#x3D;&gt;选择<code>硬盘</code>&#x3D;&#x3D;&gt;点击<code>添加</code>&#x3D;&#x3D;&gt;点击<code>下一步</code>&#x3D;&#x3D;&gt;选择<code>SCSI</code>并点击两次<code>下一步</code>&#x3D;&#x3D;&gt;设置硬盘大小&#x3D;&#x3D;&gt;点击下一步完成&#x3D;&#x3D;&gt;点击确定后重启完成磁盘添加.</p><p> <img src="/2022/03/13/Linux/image-20220703162017103.png" alt="image-20220703162017103"><img src="/2022/03/13/Linux/image-20220703162516661.png" alt="image-20220703162516661"></p></li><li><p>分区:  </p><p>分区命令: fdisk &#x2F;dev&#x2F;sdb(设备文件夹下的sdb文件夹–&gt;硬盘sdb的映射)</p><p>开始对sdb分区</p><p>m    显示命令列表</p><p>p     显示磁盘分区, 同 <code>fdisk -l</code></p><p>n     新增分区</p><p>d     删除分区</p><p>w    写入并退出</p><p>说明:  开始分区后输入n, 新增分区, 然后选择p, 分区类型为主分区.  两次回车默认剩余全部空间. 最后输入w写入分区并退出, 若不保存退出输入q</p><p><img src="/2022/03/13/Linux/image-20220703164204594.png" alt="image-20220703164204594"></p></li><li><p>格式化:  mkfs -t ext4 &#x2F;dev&#x2F;sdb1     – (make file system)   其中ext4是分区类型-主分区</p></li><li><p>挂载(挂载后才能使用):  首先在&#x2F;根目录创建一个&#x2F;newdisk目录,然后挂载</p><ul><li><p><code>cd /</code></p></li><li><p><code>mkdir newdisk</code></p></li><li><p><code>mount /dev/sdb1/newdisk /newdisk/</code>  – 手动挂载方式<code>mount [分区名称-绝对地址] [挂载目录]</code></p></li></ul><p><img src="/2022/03/13/Linux/image-20220703165337635.png" alt="image-20220703165337635"></p><p>卸载使用: <code>umount [分区名称-绝对地址]或[挂载目录]</code>, 然后可以重新挂载位置, 其中创建的文件不会丢失</p><p><em><strong>使用命令行挂载, 重启后会失效</strong></em></p></li><li><p>设置可以自动挂载[永久挂载]</p><p>永久挂载: 通过修改<code>/etc/fstab</code>实现挂载, 添加完成后执行<code>mount -a</code>即可生效</p></li></ol><h2 id="12-2-磁盘情况查询"><a href="#12-2-磁盘情况查询" class="headerlink" title="12.2 磁盘情况查询"></a>12.2 磁盘情况查询</h2><p>查询系统整体磁盘的情况 </p><ul><li>基本语法: <code>df -h</code>  – 查询系统整体磁盘使用情况</li></ul><p>查询指定目录的磁盘使用情况: </p><ul><li><p>基本语法:  <code>du -h /目录</code> – 查询指定目录的磁盘使用情况, 默认为当前目录</p><ul><li><code>-s</code> 指定目录占用大小总汇</li><li><code>-h</code> 带计量单位</li><li><code>-a</code> 包含文件</li><li><code>--max-depth=1</code> 子目录深度</li><li><code>-c</code> 列出明细的同时, 增加汇总值</li></ul><p><img src="/2022/03/13/Linux/image-20220703173630189.png" alt="image-20220703173630189"></p></li></ul><h2 id="12-3-磁盘情况-–-工作实用指令"><a href="#12-3-磁盘情况-–-工作实用指令" class="headerlink" title="12.3 磁盘情况 – 工作实用指令"></a>12.3 磁盘情况 – 工作实用指令</h2><ul><li>统计<code>/opt</code>文件夹下文件的个数</li></ul><p>​        <code>ls -l /opt | grep &quot;^-&quot; | wc -l</code>                                  —正则表达式以<code>-</code>开头的信息; wc统计个数</p><ul><li>统计<code>/opt</code>文件夹下目录的个数</li></ul><p>​        <code>ls -l /opt | grep &quot;^d&quot; | wc -l</code></p><ul><li>统计<code>/opt</code>文件夹下文件的个数, 包括子文件夹下的</li></ul><p>​        <code>ls -lR /opt | grep &quot;^-&quot; | wc -l</code></p><ul><li>统计<code>/opt</code>文件夹下目录的个数, 包括子文件夹下的</li></ul><p>​        <code>ls -lR /opt | grep &quot;^-&quot; | wc -l</code></p><ul><li>以树状形式显示目录结构 <em>默认情况没有安装<code>tree</code>指令</em>  &#x3D;&#x3D;&gt;  使用 <code>yum install tree</code>安装<code>tree</code>指令</li></ul><p>​        <code>tree /目录</code></p><h1 id="第十三章-网络配置"><a href="#第十三章-网络配置" class="headerlink" title="第十三章 网络配置"></a>第十三章 网络配置</h1><h2 id="13-1-配置原理"><a href="#13-1-配置原理" class="headerlink" title="13.1 配置原理"></a>13.1 配置原理</h2><p><img src="/2022/03/13/Linux/image-20220704135531556.png" alt="image-20220704135531556"></p><h2 id="13-2-查看网络IP和网关"><a href="#13-2-查看网络IP和网关" class="headerlink" title="13.2 查看网络IP和网关"></a>13.2 查看网络IP和网关</h2><ul><li>在Windows环境中查看VMnet8网络配置: <code>ipconfig</code></li><li>在Linux环境中查看VMnet8网络配置: <code>ifconfig</code></li></ul><h2 id="13-3-测试主机之间的网络联通性"><a href="#13-3-测试主机之间的网络联通性" class="headerlink" title="13.3 测试主机之间的网络联通性"></a>13.3 测试主机之间的网络联通性</h2><p><code>ping 目的主机</code>  ;  域名或ip都可以</p><h2 id="13-4-Linux网络环境配置"><a href="#13-4-Linux网络环境配置" class="headerlink" title="13.4 Linux网络环境配置"></a>13.4 Linux网络环境配置</h2><ul><li><p>第一种方式(自动获取)</p><p>登录后, 通过界面来设置自动获取IP, Linux启动后会自动获取IP, 同时避免IP冲突, 但是可能导致每次自动获取的ip地址不同</p></li><li><p><strong>第二种方式(指定IP)</strong></p><p>直接修改配置文件来指定IP, 并可以连接到外网</p><ol><li><p>编辑:   <code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p></li><li><p>要求:   要求将IP地址改为静态的</p></li></ol><p><code>ifcfg-ens33</code>文件说明: </p><p><img src="/2022/03/13/Linux/image-20220704141551367.png" alt="image-20220704141551367"></p><ol start="3"><li>重启系统或网络服务生效</li></ol><p><code>reboot</code> 或 <code>service network restart</code></p></li></ul><h2 id="13-5-设置主机名和hosts映射"><a href="#13-5-设置主机名和hosts映射" class="headerlink" title="13.5 设置主机名和hosts映射"></a>13.5 设置主机名和hosts映射</h2><ul><li><p>设置主机名</p><ul><li>为了便于记忆, 可以给Linux系统设置主机名, 也可以根据需要修改主机名</li><li>指令hostname  : 查看主机名</li><li>修改文件在 &#x2F;etc&#x2F;hostname 指定</li><li>修改后重启生效</li></ul></li><li><p>设置hosts映射 :  通过主机名能找到(ping到) 某个Linux系统</p><ul><li>Windows系统中</li></ul><p>在 <code>C:\Windows\System32\drivers\etc\hosts</code>文件指定   &#x3D;&#x3D;&gt;    <code>192.168.227.131  xf01</code></p><ul><li>Linux系统中</li></ul><p>在<code>/etc/hosts</code>指定                &#x3D;&#x3D;&gt;              <code>192.168.227.131  xf01</code></p></li></ul><h2 id="13-6-主机名解析过程分析"><a href="#13-6-主机名解析过程分析" class="headerlink" title="13.6 主机名解析过程分析"></a>13.6 主机名解析过程分析</h2><ul><li><p>Host是什么</p><p>一个文本文件, 用来记录IP和Hostname(主机名)的映射关系</p></li><li><p>DNS</p><p>Domain Name System: 域名系统 . 是互联网上作为域名和IP地址相互映射的一个分布式数据库</p></li><li><p>实例分析: 用户在浏览器上输入了 <a href="http://www.baidu.com/">www.baidu.com</a></p><ol><li><p>浏览器先检查浏览器缓存中有没有该域名解析IP地址, 有就先调用这个IP完成解析; 如果没有检查操作系统DNS解析器缓存, 如果有直接返回IP完成解析. 这两个缓存, 可以理解为本地解析器缓存.</p></li><li><p>一般来说, 当电脑第一次成功访问某一网站后, 在一定时间内, 浏览器或操作系统会缓存他的IP地址(DNS解析记录). 在cmd窗口输入</p><p><code>ipconfig /displaynds </code>  : DNS域名解析缓存</p><p><code>ipconfig /flushdns</code>    :  手动清理dns缓存</p></li><li><p>如果本地解析器缓存没有找到对应的映射, 检查系统中<code>hosts</code>文件中有没有配置对应的域名IP映射, 如果有, 则完成解析并返回.</p></li><li><p>如果本地DNS解析器缓存 和 <code>hosts</code>文件中都没有对应的IP, 则到域名服务DNS进行解析域</p></li></ol><p><code>浏览器缓存(浏览器)</code> &#x3D;&#x3D;&gt; <code>DNS解析器缓存(操作系统)</code> &#x3D;&#x3D;&gt;<code>hosts文件(文件)</code>&#x3D;&#x3D;&gt; <code>域名服务DNS(服务器)</code> &#x3D;&#x3D;&gt;<code>域名不存在</code></p><p><em>注意: ping的话就经过浏览器缓存</em></p></li></ul><h1 id="第十四章-进程管理"><a href="#第十四章-进程管理" class="headerlink" title="第十四章 进程管理"></a>第十四章 进程管理</h1><h2 id="14-1-基本介绍"><a href="#14-1-基本介绍" class="headerlink" title="14.1 基本介绍"></a>14.1 基本介绍</h2><ol><li>在Linux中, 每个执行的程序都称为一个进程. 每一个进程都分配一个ID号. (pid, 进程号)</li><li>每个进程都可能以两种方式存在着. <strong>前台</strong>和<strong>后台</strong>, 所谓前台进程就是屏幕上可以操作的, 后台就是屏幕没有显示, 但是在运行</li><li>一般系统的服务都是以后台的方式运行的, 且常驻在系统中, 直到关机才结束</li></ol><h2 id="14-2-显示系统执行的程序"><a href="#14-2-显示系统执行的程序" class="headerlink" title="14.2 显示系统执行的程序"></a>14.2 显示系统执行的程序</h2><p><code>PID</code> : 进程识别号 </p><p><code>TTY</code> : 终端机号</p><p><code>TIME</code> : 此进程所消耗CPU时间</p><p><code>CMD</code> : 正在执行的命令或进程名</p><p><code>VSZ</code> : 进程占用虚拟内存的大小</p><p><code>RSS</code> : 进程占用物理内存大小    </p><p><code>STAT</code> : 进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等</p><p><code>STARTED</code> : 进程的启动时间</p><ul><li><p>基本介绍</p><p><code>ps</code>命令是用来查看目前系统中, 有哪些正在执行, 以及他们执行的情况. 可以不加任何参数</p><ul><li><p><code>ps -a</code> : 显示当前终端的所有进程信息</p></li><li><p><code>ps -u</code> : 以用户的格式显示进程信息</p></li><li><p><code>ps - x</code> : 显示后台进程运行的参数</p></li><li><p><em><strong>一般上述三个组合使用</strong></em>  <code>ps -aux</code></p></li></ul></li><li><p>应用实例: 以全格式显示当前的进程, 查看进程的<strong>父进程</strong></p><ul><li><p><code>ps -ef</code> : 以全格式显示当前进程, <code>e</code>所有进程, <code>f</code>全格式</p></li><li><p>BSD风格</p><ul><li><code>C</code> : 优先级, 越小越先</li><li><code>PPID</code> : 父进程PID</li><li><code>STIME</code> : 进程启动的时间</li></ul></li></ul></li></ul><h2 id="14-3-终止进程kill-和-killall"><a href="#14-3-终止进程kill-和-killall" class="headerlink" title="14.3 终止进程kill 和 killall"></a>14.3 终止进程<code>kill</code> 和 <code>killall</code></h2><ul><li><p>介绍</p><p>若是某个进程执行到一半时就需要停止时, 或是已消耗了很大的系统资源时, 此时可以考虑停止该进程. 使用kill命令来完成此项任务.</p></li><li><p>基本语法</p><ul><li><code>kill [选项] [进程PID]</code></li><li><code>killall [进程名称]</code>   : 子进程会被干掉</li></ul></li><li><p>常用选项</p><ul><li><code>-9</code> : 表示强迫进程立即停止</li></ul></li><li><p>实践案例</p><ul><li>终止远程登录进程: <code>kill  [进程sshd -D编号]</code>   &#x3D;&#x3D;&gt; 恢复: <code>/bin/systemctl start sshd.service</code></li><li>终止多个<code>gedit</code> (文本编辑器):  <code>kill gedit</code></li><li>终止终端: <code>kill -9 11320</code></li></ul></li></ul><h2 id="14-4-查看进程树pstree"><a href="#14-4-查看进程树pstree" class="headerlink" title="14.4 查看进程树pstree"></a>14.4 查看进程树pstree</h2><ul><li>基本语法<ul><li><code>pstree [选项]</code> :  可以更加直观地查看进程</li></ul></li><li>常用选项<ul><li><code>-p</code> : 显示进程的PID</li><li><code>-u</code> : 显示进程的所属用户</li></ul></li><li>应用实例:<ul><li>用树状形式显示进程的PID: <code>pstree -p</code></li><li>用树状形式显示进程的用户: <code>pstree -u</code></li></ul></li></ul><h2 id="14-5-服务管理"><a href="#14-5-服务管理" class="headerlink" title="14.5 服务管理"></a>14.5 服务管理</h2><ul><li><p>介绍</p><p>服务本质就是进程, 但是是运行在后台的, 通常都会监听某个端口, 等待其他程序的请求, 比如<code>mysql</code>, <code>sshd</code>, <code>防火墙</code>. 因此我们又称之为<strong>守护进程</strong>.</p></li><li><p>service管理指令</p><ul><li><code>service [服务名] [start | stop | restart | reload | status]</code></li><li>在<code>CentOS7.0</code>之后, 很多服务不再使用<code>service</code>, 而是使用<code>systemctl</code></li><li><code>service</code>指令管理的服务在<code>/etc/init.d</code>查看</li></ul></li><li><p><code>service</code>管理指令案例</p><ul><li>使用<code>service</code>指令, 查看, 关闭, 启动 network  : <code>service network stop</code>  <code>service network start</code></li></ul></li><li><p>查看服务名</p><ul><li>方式一: 使用<code>setup</code>  &#x3D;&#x3D;&gt; 系统服务就可以看见全部</li><li>方式二: <code>/etc/init.d/ </code>看到service指令管理的服务 <code>ls -l /etc/init.d</code></li></ul></li><li><p>服务运行级别<code>runlevel</code></p><ol><li>运行级别0 : 系统停机状态, 系统默认运行级别不能设置为0, 否则不能正常启动</li><li>运行级别1 : 单用户工作状态, root权限, 用于系统维护, 禁止远程登录</li><li>运行级别2 : 多用户状态(没有NFS), 不支持网络</li><li><strong>运行级别3</strong> : 完全的多用户状态(有NFS), 登录后进入控制台命令行模式</li><li>运行级别4 : 系统未使用, 保留</li><li><strong>运行级别5</strong> : X11控制台, 登陆后进入图形GUI模式</li><li>运行级别6 : 系统正常关闭并重启, 默认运行级别不能设置为6, 否则不能正常工作.</li></ol></li><li><p>开启启动流程说明: </p><ul><li><em><strong>①开机 &#x3D;&#x3D;&gt; ②BIOS &#x3D;&#x3D;&gt; ③&#x2F;boot &#x3D;&#x3D;&gt; ④systemd进程1 &#x3D;&#x3D;&gt; ⑤运行级别 &#x3D;&#x3D;&gt; ⑥运行级别对应的服务</strong></em></li></ul></li><li><p>CentOS7后运行级别说明</p><ul><li><p>在<code>/etc/initab</code></p><p>可以简化命令: <code>multi-user.target : analogous to runlevel3</code></p><p>​                         <code>graphical.target : analogous to runlevel 5</code></p></li><li><p>查看当前运行级别:  <code>systemctl get-default</code></p></li><li><p>设置运行默认运行级别: <code>systemctl set-default TARGET.target</code></p></li></ul></li><li><p>chkconfig指令</p><ul><li>介绍<ul><li>通过<code>chkconfig</code>命令可以给服务的各个运行级别设置自动启动或关闭</li><li><code>chkconfig</code>指令管理的服务在<code>/etc/init.d</code>查看</li><li>注意: 在CentOS7以后, 很多服务用<code>systemctl</code>管理</li></ul></li><li>基本语法<ul><li>查看服务 : <code>chkconfig --list [| grep xxx]</code></li><li><code>chkconfig 服务名 --list</code></li><li>自启动&#x2F;自关闭 : <code>chkconfig --level 5 服务名 on/off</code></li></ul></li></ul></li><li><p>systemctl指令</p><ul><li>基本语法 : &#96;systemctl [start | stop | restart | status] 服务名</li><li><code>systemctl</code>指令管理的服务在<code>/usr/lib/systemd/system</code>查看</li><li><code>systemctl</code>设置服务自启动状态<ul><li><code>systemctl list-unit-files</code> [| grep xxx] &#96;查看服务开机启动状态</li><li><code>systemctl enable 服务名</code> 设置服务开机启动</li><li><code>systemctl disable 服务名</code>关闭服务开机启动</li><li><code>systemctl is-enabled 服务名</code>查询某个服务是否是自启动</li></ul></li><li>细节讨论<ul><li>关闭或启动防火墙后, 立即生效(用telnet测试)</li><li>指令临时生效, 重启后恢复. 要永久生效需使用<code>enable</code>或者<code>disable</code>代替stop和start</li></ul></li></ul></li><li><p><strong>firewall指令  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;   (<code>netstat -anp | more</code> 查看端口或协议)</strong></p><ul><li>打开端口: <code>firewall-cmd --permanent --add-port=端口号/协议</code></li><li>关闭端口: <code>firewall-cmd --permanent --remove-port=端口号/协议</code></li><li>重新载入, 才能生效: <code>firewall-cmd --reload</code></li><li>查询端口是否开放: <code>firewall-cmd --query-port=端口/协议</code></li></ul></li></ul><h2 id="14-6-动态监控进程"><a href="#14-6-动态监控进程" class="headerlink" title="14.6 动态监控进程"></a>14.6 动态监控进程</h2><ul><li><p>介绍</p><p>top与ps命令很相似, 他们都用来显示正在执行的进程, top与ps最大的区别就是top执行时间内可以更新运行的进程(即动态监控)</p></li><li><p>基本语法</p><p><code>top [选项]</code></p></li><li><p>选项说明</p><ul><li><code>-d 秒数</code> : 指定top每隔几秒跟新, 默认3秒</li><li><code>-i</code> : 让top不显示闲置或者僵死进程</li><li><code>-p 进程ID</code> : 通过指定监控进程id来仅仅监控某个进程的状态</li></ul></li><li><p>交互操作说明(查到后的操作):</p><ul><li><code>P</code> : 按照cpu使用率进行排序, 默认此项</li><li><code>M</code> : 以内存的使用率排序</li><li><code>N</code> : 以PID排序</li><li><code>q</code> : 退出</li><li><code>u</code> : 监控特定用户 </li><li><code>k</code> : 通过PID终止某个进程</li></ul></li><li><p>监控网络状态</p><ul><li>基本语法 : <code>netstat [选项]</code></li><li>选项说明: <ul><li><code>-an</code> : 按一定顺序排列输出</li><li><code>-p</code> : 显示哪个进程在调用</li></ul></li></ul></li><li><p>检测主机连接的命令: <code>ping 对方ip地址</code></p><ul><li>作为一种网络检测工具, 它主要是用检测远程主机是否正常, 或是两部主机间的网线或网卡故障</li></ul></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/2022/03/10/IO%E6%B5%81/"/>
      <url>/2022/03/10/IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="一-文件"><a href="#一-文件" class="headerlink" title="一  文件"></a>一  文件</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p><strong>文件是保存数据的地方</strong>, 如word文档, txt文件…. 它既可以是图片,也可以是视频, 音频,,,,,,</p><p>文件流: </p><ol><li>文件在程序中是以流的形式来操作:</li></ol><p>​        Java 程序(内存)  &lt;&lt;&#x3D;&#x3D;&#x3D;输入流&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;文件(磁盘)</p><p>​        Java 程序 ( 内存 )  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;输出流  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt; 磁盘</p><ol start="2"><li><p><strong>流:</strong> 数据在数据源(文件) 和程序(内存) 之经历的路径</p></li><li><p><strong>输入流:</strong> 数据从数据源(文件) 到程序(内存) 的路径</p></li><li><p><strong>输出流:</strong> 数据从程序(内存) 到数据源(文件)的路径</p></li></ol><h2 id="1-2-常用的文件操作"><a href="#1-2-常用的文件操作" class="headerlink" title="1.2 常用的文件操作"></a>1.2 常用的文件操作</h2><p><strong>创建文件对象相关的构造器和方法</strong></p><p>相关方法:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(String pathname); <span class="hljs-comment">// 根据路劲构建一个File对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(File parent, String child); <span class="hljs-comment">//根据父目录文件 + 子路径构建</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(String parent, String child); <span class="hljs-comment">// 根据父目录 + 子路径构建</span><br>createNewFile  ; <span class="hljs-comment">//创建新文件</span><br></code></pre></div></td></tr></table></figure><p><img src="/2022/03/10/IO%E6%B5%81/image-20220310212123216.png" alt="File结构"></p><ul><li>应用案例演示</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//在e盘下, 创建文件 news1.txt, news2.txt, news3.txt ; 用三种不同的方式创建</span><br><br>    <span class="hljs-comment">//方式一:</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\news1.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <br>        <br>        <br>        <br>        <br>        <br>        <br>        <br>        <br><span class="hljs-comment">//        file.createNewFile();</span><br><span class="hljs-comment">//        File file1 = new File(&quot;e:/news2.txt&quot;);</span><br><span class="hljs-comment">//        file1.createNewFile();</span><br><span class="hljs-comment">//        File file3 = new File(&quot;e://news3.txt&quot;);</span><br><span class="hljs-comment">//        file3.createNewFile();</span><br>    &#125;<br><br><br>    <span class="hljs-comment">//方式二</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">parentFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news2.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentFile, fileName);<span class="hljs-comment">//内存中创建news2.txt</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<span class="hljs-comment">//输出到磁盘中</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">//方式三:</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news3.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentPath, filePath);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><ul><li>获取文件相关信息<ol><li>getName</li><li>getAbsolutePath</li><li>getParent</li><li>length : </li><li>exists: 是否存在</li><li>isFile</li><li>isDirectory</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//获取文件信息</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\new1.txt&quot;</span>);<br>    file.createNewFile();<br><br>    System.out.println(file.getName());<span class="hljs-comment">//文件名: new1.txt</span><br>    System.out.println(file.getAbsolutePath());<span class="hljs-comment">// 绝对路径 e:\new1.txt</span><br>    System.out.println(file.getParent());<span class="hljs-comment">// 父级目录   e:\</span><br>    System.out.println(file.length());<span class="hljs-comment">//文件大小(字节大小) 0    utf8 : 英文1字节, 汉字3字节</span><br>    System.out.println(file.exists());<span class="hljs-comment">//是否存在, true</span><br>    System.out.println(file.isFile());<span class="hljs-comment">// 是不是一个文件 true</span><br>    System.out.println(file.isDirectory());<span class="hljs-comment">//是不是一个目录 false</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>目录的操作和文件的删除</li></ul><p>mkdir 创建一级目录, mkdirs创建多级目录, delete删除空目录或文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//目录的操作</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Directory</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\news.txt&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>    <span class="hljs-keyword">if</span>(file.exists())&#123;<br>        <span class="hljs-keyword">if</span>(file.delete()) &#123; <span class="hljs-comment">// 返回布尔值</span><br>            System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\new&quot;</span>);<br>    file1.mkdir();<span class="hljs-comment">//创建一级目录   目录 = 文件夹</span><br><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\n\\e\\w&quot;</span>);<br>    file2.mkdirs(); <span class="hljs-comment">// 创建多级目录</span><br><br>    file2.delete(); <span class="hljs-comment">// 不能将所有目录删除</span><br>    file1.delete();<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="二-IO流原理及流的分类"><a href="#二-IO流原理及流的分类" class="headerlink" title="二  IO流原理及流的分类"></a>二  IO流原理及流的分类</h1><h2 id="2-1-Java-IO-流的原理"><a href="#2-1-Java-IO-流的原理" class="headerlink" title="2.1 Java IO 流的原理"></a>2.1 Java IO 流的原理</h2><ol><li>I&#x2F;O是输入与输出, I&#x2F;O技术是非常实用的技术, 用于处理数据传输. 如读写文件, 网络通讯等</li><li>Java程序中, 对于数据的输入输出操作以”流” 的方式进行</li><li>Java.io 包下提供各种” 流 “ 类和接口, 用以获取不同类型的数据, 并通过方法输入或输出数据</li><li>输入流: 读取外部数据到内存</li><li>输出: 将程序数据从内存输出到磁盘,光盘等存储设备中</li></ol><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><p>以上四个类都是抽象类, 使用时需要创建其子类</p><p><img src="/2022/03/10/IO%E6%B5%81/image-20220311130038020.png" alt="image-20220311130038020"></p><h2 id="2-2-IO流体系-常用的类"><a href="#2-2-IO流体系-常用的类" class="headerlink" title="2.2 IO流体系 - 常用的类"></a>2.2 IO流体系 - 常用的类</h2><ul><li><p>InputStream : 字节输入流</p><p>InputStream抽象类是所有类字节输入流的超类</p></li></ul><p>InputStream 常用的子类</p><ol><li>FileInputStream: 文件输入流</li><li>BufferedInputStream: 缓冲字节输入流</li><li>ObjectInputStream: 对象字节输入流</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//演示 FileInputStream 的使用 ( 字节输入流:  文件 ==&gt; 程序 )</span><br><span class="hljs-comment">//这个字节流, 对于utf8编码只能正常读取英文字符, 汉字不行</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile01</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">readDate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;e:\\hello.txt&quot;</span>);<br>        <span class="hljs-keyword">while</span> ((readDate = fileInputStream.read()) != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//返回 -1 表示读取完毕</span><br>            System.out.print((<span class="hljs-type">char</span>)readDate);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭文件流, 释放资源</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>&#125;<span class="hljs-comment">//readFile01()</span><br><br><br><span class="hljs-comment">// 使用 read(byte[] b) 以字节流 读取字符, 每次b个字节</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile02</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">readDate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">3</span>];<span class="hljs-comment">// 一次读取3个字节</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;e:\\hello.txt&quot;</span>);<br>        <span class="hljs-keyword">while</span> ((readDate = fileInputStream.read(buff)) != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//返回 -1 表示读取完毕</span><br>            System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buff,<span class="hljs-number">0</span>,readDate));<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭文件流, 释放资源</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>&#125;<span class="hljs-comment">//readFile02()</span><br></code></pre></div></td></tr></table></figure><p>FileOutputStream 在文件中写入数据, 如果文件不存在则会创建文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.testng.annotations.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;e:\\123.jpg&quot;</span>);<br>        fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;e:\\789.jpg&quot;</span>);<br>        <span class="hljs-type">byte</span>[] buffer =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readlen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((readlen = fileInputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            fileOutputStream.write(buffer,<span class="hljs-number">0</span>,readlen);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream.close();<br>            fileOutputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<span class="hljs-comment">//catch-try-finally</span><br>&#125;<span class="hljs-comment">//test</span><br></code></pre></div></td></tr></table></figure><ul><li><strong>FileReader和FileWriter 介绍</strong></li></ul><p>FileReader 和 FileWriter 字符流, 即按照字符来操作IO</p><p>FileReader相关方法:</p><ol><li>new FileReader(File&#x2F;String)</li><li>read( ): 每次读取单个字符, 返回该字符, 如果到文件末尾就返回 -1</li><li>read(char[ ] ) : 批量读取多个字符到数组, 返回读取到的字符, 如果到文件末尾返回 -1</li></ol><p><img src="/2022/03/10/IO%E6%B5%81/image-20220311143506491.png" alt="image-20220311143506491"></p><p>FileWriter相关方法: </p><ol><li>new FileWriter(File&#x2F;String): 覆盖模式</li><li>new FileWriter(File&#x2F;String, true) : 追加模式</li><li>write( int ) : 写入单个字符</li><li>write( char[ ]) : 写入指定数组</li><li>write( char[ ], from, len) : 写入字符串的指定部分</li><li>write( String )</li><li>wirte( String , from , to )</li></ol><p><img src="/2022/03/10/IO%E6%B5%81/image-20220311144333872.png" alt="image-20220311144333872"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.testng.annotations.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">RW</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;e:\\storyy.txt&quot;</span>);<br>        fileWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;e:\\copy_story.txt&quot;</span>);<br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">32</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> chars.length;<br>        <span class="hljs-keyword">while</span>((length = fileReader.read(chars)) != -<span class="hljs-number">1</span>)&#123;<br>            fileWriter.write(chars,<span class="hljs-number">0</span>,length);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fileReader.close();  <span class="hljs-comment">// == flash + close</span><br>            fileWriter.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="三-节点流和处理流"><a href="#三-节点流和处理流" class="headerlink" title="三  节点流和处理流"></a>三  节点流和处理流</h1><h2 id="3-1-基本介绍"><a href="#3-1-基本介绍" class="headerlink" title="3.1 基本介绍"></a>3.1 基本介绍</h2><p><strong>节点流</strong>可以从一个<strong>特定的数据源</strong>读写数据, 如FileReader , FileWriter </p><p><strong>处理流</strong>(也叫包装流) 是” 连接 “ 在已存在的流( 节点流或处理流 ) 之上 , 为程序提供更为强大的读写功能, 也更加灵活 , 如 BufferedReader, BufferedWriter</p><p>BfferedReader 类中, 有属性Reader , 即可以封装一个节点流, 该节点流可以是任意的, 只要是Reader子类即可  (  修饰器模式  )</p><h2 id="3-2-节点流与处理流的区别和联系"><a href="#3-2-节点流与处理流的区别和联系" class="headerlink" title="3.2 节点流与处理流的区别和联系"></a>3.2 节点流与处理流的区别和联系</h2><ol><li>节点流是底层流&#x2F;低级流, 直接跟数据源相接</li><li>处理流包装节点流, 既可以消除不同节点流的实现差异, 也可以提供更方便的方法来完成输入输出</li><li>处理流(也叫包装流) 对节点进行包装, 使用了修饰器设计模式, 不会直接与数据源相连</li></ol><ul><li>处理流的功能主要体现在以下两个方面:<ol><li>性能的提高: 主要以增加缓冲的方式来提高输入输出的效率</li><li>操作的便捷: 处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据,使用更加灵活方便</li></ol></li></ul><h2 id="3-3-处理流-–-BufferedReader和BufferedWriter"><a href="#3-3-处理流-–-BufferedReader和BufferedWriter" class="headerlink" title="3.3 处理流 – BufferedReader和BufferedWriter"></a>3.3 处理流 – BufferedReader和BufferedWriter</h2><ul><li>BufferedReader 和 BufferedWriter 属于字节流, 是按照字符来读取数据的</li><li>关闭时, 只需要关闭外层流即可 &#x3D;&#x3D;&#x3D;&gt; 关闭包装流其内部的节点流会自动关闭( in.close( )  )</li></ul><p><img src="/2022/03/10/IO%E6%B5%81/image-20220311193120306.png" alt="image-20220311193120306"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// BufferedReader </span><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\a.java&quot;</span>;<br>        <span class="hljs-comment">//创建BufferedRreader</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(path));<br>        String line;<br>         <span class="hljs-keyword">while</span>((line = bufferedReader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(line);<br>        &#125;;<span class="hljs-comment">//按行读取,返回字符串 效率高, 返回为空时表示读取结束</span><br><br>        bufferedReader.close();<span class="hljs-comment">//只需要关闭外部包装流(处理流). 底层自动关闭节点流(in.close())</span><br><br>    &#125;<br><br><span class="hljs-comment">// 读写组合</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">readPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\story.txt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">writePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\wS.txt&quot;</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(readPath));<br>            bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(writePath));<br>            <span class="hljs-keyword">while</span>((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                bw.write(line);<br>                bw.newLine();<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                br.close();<br>                bw.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br><br><br><br><span class="hljs-comment">// 两者是按照字符流读取, 不能对二进制文件进行操作, 否则会读写失败(乱码)</span><br><br><br><br></code></pre></div></td></tr></table></figure><h2 id="3-4-BufferedInputStream-和-BufferedOutputStream"><a href="#3-4-BufferedInputStream-和-BufferedOutputStream" class="headerlink" title="3.4 BufferedInputStream 和 BufferedOutputStream"></a>3.4 BufferedInputStream 和 BufferedOutputStream</h2><p><img src="/2022/03/10/IO%E6%B5%81/image-20220315122040634.png" alt="image-20220315122040634"></p><p>其数组都是字节数组byte val[ ]</p><h2 id="对象流-ObjectInputStream-和-ObjectOutPutStream"><a href="#对象流-ObjectInputStream-和-ObjectOutPutStream" class="headerlink" title="对象流 - ObjectInputStream 和 ObjectOutPutStream"></a>对象流 - ObjectInputStream 和 ObjectOutPutStream</h2><p><img src="/2022/03/10/IO%E6%B5%81/image-20220315132324198.png" alt="image-20220315132324198"></p><p>序列化: 保存(写入)  数据的值和数据类型 的过程</p><p>反序列化: 恢复(读取)  数据的值和数据类型 的过程</p><p>让某个对象支持序列化, 首先必须实现以下两个接口:</p><ol><li>.Serializable   标记接口　（ 推荐使用 )</li><li>Externalizable  有需要实现的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-comment">// 序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\data&quot;</span>;<span class="hljs-comment">// 序列化后保存的文件格式,不是纯文本, 而是按照它的格式保存</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath));<br>        <span class="hljs-comment">//序列化到文件中</span><br>        oos.write(<span class="hljs-number">100</span>); <span class="hljs-comment">// 自动装箱为Integer, 其实现了Serializable接口</span><br>        oos.writeByte(<span class="hljs-number">1</span>);<span class="hljs-comment">//自动装箱</span><br>        oos.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">// 自动装箱</span><br>        oos.writeObject(<span class="hljs-string">&quot;fds&quot;</span>);<span class="hljs-comment">//</span><br>        oos.writeUTF(<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">// 保存String</span><br><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        oos.writeObject(dog);<br><br>        oos.close();<br>        System.out.println(<span class="hljs-string">&quot;保存完毕&quot;</span>);<br>        <br>    &#125;<br><br><span class="hljs-comment">//Dog 类中不一定要有数据 但必须实现Serializable接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;   <br><br>&#125;<br><br><span class="hljs-comment">// 反序列化</span><br><br>        <span class="hljs-comment">//指定反序列化文件</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\data&quot;</span>;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath));<br><br>        <span class="hljs-comment">//读取 - 反序列化</span><br>        <span class="hljs-comment">//反序列化顺序 必须和 序列化顺序 一致</span><br>        System.out.println(ois.read());<br>        System.out.println(ois.read());<br>        System.out.println(ois.readBoolean());<br>        System.out.println(ois.readObject());<br>        System.out.println(ois.readUTF());<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<span class="hljs-comment">// 底层会转型为Dog类型</span><br>        System.out.println(o.getClass());<br>        ois.close();<br><br><br><br>    &#125;<br></code></pre></div></td></tr></table></figure><p>注意事项: </p><ol><li>需要序列化的类中常添加 序列化的版本号 <code>private static final long serialVersionUID = 1L;</code></li><li>不会序列化 <code>static</code> 和 <code>transient</code> 修饰的属性, 序列化不会保存其属性</li><li>父类实现了序列化, 那么其子类也实现了序列化</li></ol><p><img src="/2022/03/10/IO%E6%B5%81/image-20220317192011000.png" alt="image-20220317192011000"></p><h2 id="3-5-标准输入输出流"><a href="#3-5-标准输入输出流" class="headerlink" title="3.5 标准输入输出流"></a>3.5 标准输入输出流</h2><p><img src="/2022/03/10/IO%E6%B5%81/image-20220317210855388.png" alt="image-20220317210855388"></p><p><img src="/2022/03/10/IO%E6%B5%81/image-20220317200108311.png" alt="image-20220317200108311"></p><p><img src="/2022/03/10/IO%E6%B5%81/image-20220317200155559.png" alt="image-20220317200155559"></p><table><thead><tr><th></th><th>类型</th><th>默认设备</th></tr></thead><tbody><tr><td>标准输入流 :  System.in</td><td>InputStream</td><td>键盘</td></tr><tr><td>标准输出流 :  System.out</td><td>PrintStream</td><td>显示器</td></tr></tbody></table><h2 id="3-6-转换流-InputStreamReader-和-OutputStreamWriter"><a href="#3-6-转换流-InputStreamReader-和-OutputStreamWriter" class="headerlink" title="3.6 转换流 - InputStreamReader 和 OutputStreamWriter"></a>3.6 转换流 - InputStreamReader 和 OutputStreamWriter</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath), <span class="hljs-string">&quot;gbk&quot;</span>);<span class="hljs-comment">//指定编码方式   </span><br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br></code></pre></div></td></tr></table></figure><p> <img src="/2022/03/10/IO%E6%B5%81/image-20220317203755281.png" alt="image-20220317203755281"></p><p><img src="/2022/03/10/IO%E6%B5%81/image-20220320174100537.png" alt="image-20220320174100537"></p><p><img src="/2022/03/10/IO%E6%B5%81/image-20220320174557698.png" alt="image-20220320174557698"></p><h2 id><a href="#" class="headerlink" title></a></h2><h1 id="六-Properties-类"><a href="#六-Properties-类" class="headerlink" title="六  Properties 类"></a>六  Properties 类</h1><p><img src="/2022/03/10/IO%E6%B5%81/image-20220320182510521.png" alt="image-20220320182510521"></p><p><img src="/2022/03/10/IO%E6%B5%81/image-20220320183934129.png" alt="image-20220320183934129"></p><p><img src="/2022/03/10/IO%E6%B5%81/image-20220320184915546.png" alt="image-20220320184915546"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统</title>
      <link href="/2022/03/08/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/03/08/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="一-JavaWeb-项目环境搭建"><a href="#一-JavaWeb-项目环境搭建" class="headerlink" title="一 JavaWeb 项目环境搭建"></a>一 JavaWeb 项目环境搭建</h2><h2 id="1-1-开发环境和工具"><a href="#1-1-开发环境和工具" class="headerlink" title="1.1 开发环境和工具"></a>1.1 开发环境和工具</h2><p>操作系统: win10</p><p>内存: 4G以上</p><p>JDK: 8.0</p><p>开发工具: Intellij IDEA2021.3.2</p><p>服务器: Tomcat8.0</p><p>数据库工具: mysql5.7.37 + Navicat 15 for Mysql</p><h2 id="1-2-项目技术"><a href="#1-2-项目技术" class="headerlink" title="1.2 项目技术"></a>1.2 项目技术</h2><p>基于B&#x2F;S结构</p><p>前端: HTML + CSS + JS + JQueryZ</p><p>后端: Servlet + JSP + MysqlV</p><h2 id="1-3-数据库的创建"><a href="#1-3-数据库的创建" class="headerlink" title="1.3 数据库的创建"></a>1.3 数据库的创建</h2><p>数据库名: bookdb</p><p>字符集: utf8</p><p>排序规则:  utf8_general_ci 不区分大小写</p>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
          <category> 学生管理系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图书管理系统 </tag>
            
            <tag> Java项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器推送新闻</title>
      <link href="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81%E6%96%B0%E9%97%BB)/"/>
      <url>/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81%E6%96%B0%E9%97%BB)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="一、功能说明"><a href="#一、功能说明" class="headerlink" title="一、功能说明"></a>一、功能说明</h1><p><img src="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81%E6%96%B0%E9%97%BB)/image-20220403175645510.png" alt="image-20220403175645510"></p><p>服务器可以向各个在线用户推送消息</p><h1 id="二、思路分析-amp-程序框架图"><a href="#二、思路分析-amp-程序框架图" class="headerlink" title="二、思路分析 &amp; 程序框架图"></a>二、思路分析 &amp; 程序框架图</h1><p>服务器端启动一条独立的线程，让这条线程能够向各个在线用户推送消息。本质类似于群发消息</p><p><img src="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81%E6%96%B0%E9%97%BB)/image-20220403183237047.png" alt="image-20220403183237047"></p><h1 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h1><p>在服务端编写一个专门推送消息的线程类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.server.service;<br><br><span class="hljs-keyword">import</span> com.hspedu.common.Message;<br><span class="hljs-keyword">import</span> com.hspedu.common.MessageType;<br><span class="hljs-keyword">import</span> com.hspedu.utils.Utility;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendNewsToAll</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入新闻：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">news</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">1000</span>);<br>            <span class="hljs-comment">//构建一个消息类型</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>            message.setSender(<span class="hljs-string">&quot;服务器&quot;</span>);<br>            message.setContent(news);<br>            <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>            message.setSendTime(dateTimeFormatter.format(LocalDateTime.now()));<br>            message.setMesType(MessageType.MESSAGE_TO_ALL_MES);<br><br>            <span class="hljs-comment">//遍历当前所有的通讯线程，得到其socket，并发送message对象</span><br>            HashMap&lt;String, ServerConnectClientThread&gt; hm = ManageClientThreads.getHm();<br>            Iterator&lt;String&gt; iterator = hm.keySet().iterator();<br>            <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(hm.get(iterator.next().toString()).getSocket().getOutputStream());<br>                    oos.writeObject(message);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br><br>                &#125;<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>服务端在Server启动推送新闻的线程</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//启动推送新闻的线程</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SendNewsToAll</span>()).start();<br></code></pre></div></td></tr></table></figure><h1 id="四、效果"><a href="#四、效果" class="headerlink" title="四、效果"></a>四、效果</h1><p><img src="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E9%80%81%E6%96%B0%E9%97%BB)/image-20220403182510340.png" alt="image-20220403182510340"></p><blockquote><p>项目地址：<a href="https://gitee.com/bluebirdlearncode/communicate-system">Java_Project: 使用Java语言实现的简单通讯系统 (gitee.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
          <category> 多用户通讯系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java项目 </tag>
            
            <tag> 多用户通讯系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2022/03/07/JVM/"/>
      <url>/2022/03/07/JVM/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM-探究"><a href="#JVM-探究" class="headerlink" title="JVM 探究"></a>JVM 探究</h1><ul><li>请你谈谈jvm的理解?  java8虚拟机和之前的变化?  什么是OOM , 什么是 StackOverflowError?</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2022/03/07/%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/03/07/%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>  [TOC]</p><h1 id="一-线程相关概念"><a href="#一-线程相关概念" class="headerlink" title="一 线程相关概念"></a>一 线程相关概念</h1><ol><li>单线程: 同一时刻, 只允许执行一个线程</li><li>多线程: 同一个时刻, 可以执行多个线程</li><li>并发: 同一个时刻, 多个任务交替执行</li><li>并行: 同一个时刻, 多个任务同时执行</li></ol><h1 id="二-线程的基本使用"><a href="#二-线程的基本使用" class="headerlink" title="二 线程的基本使用"></a>二 线程的基本使用</h1><p>在Java中线程使用有两种方式</p><ol><li>继承Thread类, 重写run方法</li><li>实现Runnable 接口, 重写run方法</li></ol><h2 id="2-1-应用案例1-—-继承Thread类"><a href="#2-1-应用案例1-—-继承Thread类" class="headerlink" title="2.1 应用案例1 —  继承Thread类"></a>2.1 应用案例1 —  继承Thread类</h2><blockquote><ol><li>请编写程序, 开启一个线程, 该线程每隔一秒 , 在控制台输出” 喵喵喵 “</li><li>对上题改进: 当输出80次 喵喵喵 , 结束该进程</li><li>使用 <code>JConsole</code> 监控线程执行情况, 并画出程序示意图</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 通过演示继承Thread类,创建线程</span><br><span class="hljs-comment"> *终端Terminal输入 jconsole</span><br><span class="hljs-comment"> * run --开启--&gt; 进程 --启动--&gt; main线程 --(cat.start() )启动---&gt; Thread-0线程</span><br><span class="hljs-comment"> * main线程结束 ----&gt; Thread-0线程结束  ---&gt; 没有线程了, 进程结束</span><br><span class="hljs-comment"> * 主线程main结束, 其子线程Thread-0并不会因此而结束</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//创建一个Cat对象, 可以当作线程使用</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        cat.start();<span class="hljs-comment">//启动线程, 如果直接使用cat.run() 那么这就会阻塞在这里.因为这样实际上没有创建新的线程</span><br>        <span class="hljs-comment">//说明: 当main线程启动一个子线程 Thread-0, 主线程不会阻塞,会继续执行</span><br>        <span class="hljs-comment">//1. start() --&gt; start0()---JVM调用(是一个本地方法native). 底层C/C++实现</span><br>        <span class="hljs-comment">//正真实现多线程的效果是start0()方法. start0 使用多线程方法调用run()方法</span><br>        <span class="hljs-comment">//最终的具体实现跟操作系统有关, 不同的操作系统调度run()方法的方式不同</span><br>        <span class="hljs-comment">//总之 start0才是真正实现多线程的方法</span><br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">90</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程在执行 i&quot;</span> + i + <span class="hljs-string">&quot;主线程名&quot;</span> + Thread.currentThread().getName());<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//当继承了 Thread 类, 该类就可以当作线程使用</span><br><span class="hljs-comment">// Thread 的 run 方法 是Thread 类实现了 Runable类的 run 方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//重写run方法, 写上自己的业务逻辑</span><br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;喵喵 ,我是小猫咪&quot;</span>+ ++time + <span class="hljs-string">&quot;线程名称&quot;</span> + Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(time == <span class="hljs-number">800</span>)&#123;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">//time = 80, 线程退出</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-2-应用案例2-—-实现Runnable接口"><a href="#2-2-应用案例2-—-实现Runnable接口" class="headerlink" title="2.2 应用案例2 —- 实现Runnable接口"></a>2.2 应用案例2 —- 实现Runnable接口</h2><blockquote><p>说明:</p><ol><li>java是单继承, 在某些情况下一个类可能已经继承了某个父类, 这时在用继承Thread类方法来创建线程显然不可能了</li><li>Java设计者们提供了另外一个方式创建线程, 就是通过实现Runnable接口来创建线程</li></ol><p>应用案例:</p><p>请编写程序, 该程序可以每隔一秒, 在控制台输出”hi “ ,当输出10次后,自动退出. 请使用实现Runnable 接口的方式实现. 这里是静态代理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.threaduse;<br><br><span class="hljs-keyword">import</span> com.sun.xml.internal.bind.v2.model.annotation.RuntimeAnnotationReader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 通过实现接口Runnable 来开发线程</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        <span class="hljs-comment">//dog没有start()方法</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(dog);<br>        <span class="hljs-comment">//创建了一个 Thread 对象, 把对象dog放入Thread</span><br>        thread.start();<br>        <span class="hljs-comment">//这里底层使用了一个设计模式: 代理模式: 静态代理模式</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<span class="hljs-comment">//通过实现Runnable接口 开发线程</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;小狗汪汪叫~~~ hi&quot;</span> + (++count) + Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span>)<br>                <span class="hljs-keyword">break</span>;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//模拟一个简单的 Thread 类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-comment">//可以把ThreadProxy当作 Thread类</span><br>    <span class="hljs-comment">// Proxy 翻译--&gt; 代理</span><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">// 属性, Runnable类型</span><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(target != <span class="hljs-literal">null</span>)&#123;<br>            target.run();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadProxy</span><span class="hljs-params">(Runnable target)</span> &#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        start0();<span class="hljs-comment">//真正实现多线程方法的是Thread里的start0</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start0</span><span class="hljs-params">()</span>&#123;<br>        run();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-3-线程使用案例-–-多线程执行"><a href="#2-3-线程使用案例-–-多线程执行" class="headerlink" title="2.3 线程使用案例  – 多线程执行"></a>2.3 线程使用案例  – 多线程执行</h2><blockquote><p>请编写一个程序, 创建两个线程, 一个线程每隔一秒输出”Hello world”, 输出10次, 退出</p><p>一个线程每个一秒输出”hi”, 输出5次退出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.threaduse;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        Robot0 robot0 = new Robot0();</span><br><span class="hljs-comment">//        robot0.start();</span><br><span class="hljs-comment">//        Robot1 robot1 = new Robot1();</span><br><span class="hljs-comment">//        robot1.start();</span><br><span class="hljs-comment">//        Robot2 robot2 = new Robot2();</span><br><span class="hljs-comment">//        Thread thread = new Thread(robot2);</span><br><span class="hljs-comment">//        thread.start();</span><br><span class="hljs-comment">//        Robot3 robot3 = new Robot3();</span><br><span class="hljs-comment">//        Thread thread1 = new Thread(robot3);</span><br><span class="hljs-comment">//        thread1.start();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Robot2 robot2 = new Robot2();</span><br><span class="hljs-comment">//        robot2.run();</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot0</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;hello, world&quot;</span>+<span class="hljs-string">&quot;  次数: &quot;</span> + ++count + <span class="hljs-string">&quot; 线程0名 &quot;</span>+ Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span> )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;hi&quot;</span>+<span class="hljs-string">&quot;  次数: &quot;</span>+ ++count + <span class="hljs-string">&quot; 线程1名 &quot;</span>+ Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span> )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;hello, world&quot;</span>+<span class="hljs-string">&quot;  次数: &quot;</span>+ ++count + <span class="hljs-string">&quot; 线程2名 &quot;</span>+ Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span> )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;hi&quot;</span>+<span class="hljs-string">&quot;  次数: &quot;</span>+ ++count + <span class="hljs-string">&quot; 线程3名 &quot;</span>+ Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span> )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-4-Thread-和Runnable的区别"><a href="#2-4-Thread-和Runnable的区别" class="headerlink" title="2.4 Thread 和Runnable的区别"></a>2.4 Thread 和Runnable的区别</h2><ol><li>从Java的设计来看, 通过继承Thread 或者实现 Runnable 接口来创建线程本质上没有区别, 从JDK帮助文档我们可以看到类Thread类本身就实现了Runnable接口</li><li>实现Runnable 接口方式更加适合多个线程共享一个资源的情况, 并且避免了单继承的限制</li><li>建议使用Runnable接口</li></ol><h2 id="2-5-使用多线程模拟三个窗口售票"><a href="#2-5-使用多线程模拟三个窗口售票" class="headerlink" title="2.5 使用多线程模拟三个窗口售票"></a>2.5 使用多线程模拟三个窗口售票</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.threaduse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 使用多线程, 模拟三个窗口同时售票100张</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        SellTicket01 sellTicket01 = new SellTicket01();</span><br><span class="hljs-comment">//        SellTicket01 sellTicket02 = new SellTicket01();</span><br><span class="hljs-comment">//        SellTicket01 sellTicket03 = new SellTicket01();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        sellTicket01.start();</span><br><span class="hljs-comment">//        sellTicket02.start();</span><br><span class="hljs-comment">//        sellTicket03.start();</span><br><br><br>        <span class="hljs-comment">//创建的三个进程, 使用的一个对象, 还是会超卖</span><br>        <span class="hljs-type">SellTicket02</span> <span class="hljs-variable">sellTicket02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTicket02</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sellTicket02);<br>        thread.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//使用Thread方式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span>   <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//让多个线程共享ticketnum</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(ticketNum &lt;=<span class="hljs-number">0</span> )&#123;<br>                System.out.println(<span class="hljs-string">&quot;售票结束...&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;窗口 &quot;</span> + Thread.currentThread().getName()<br>                    + <span class="hljs-string">&quot; 售出一张票 剩余票数&quot;</span> + (--ticketNum) );<br><br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span>   <span class="hljs-type">int</span> <span class="hljs-variable">ticketNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//让多个线程共享ticketnum</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(ticketNum &lt;=<span class="hljs-number">0</span> )&#123;<br>                System.out.println(<span class="hljs-string">&quot;售票结束...&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;窗口 &quot;</span> + Thread.currentThread().getName()<br>                    + <span class="hljs-string">&quot; 售出一张票 剩余票数&quot;</span> + (--ticketNum) );<br><br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-6-线程终止"><a href="#2-6-线程终止" class="headerlink" title="2.6 线程终止"></a>2.6 线程终止</h2><blockquote><p>基本说明: </p><ol><li>当线程完成任务后, 会自动退出</li><li>还可以通过使用变量来控制run方法退出的方式停止线程, 即通知方式</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//需求: 启动一个线程t, 要求在main线程中去停止线程t, 编程实现</span><br><span class="hljs-keyword">package</span> com.hspedu.threadexit_;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadExit</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        t.start();<br><br>        <span class="hljs-comment">//如果希望main线程去控制t线程终止, 必须可以修改 t 的 loop</span><br>        <span class="hljs-comment">//让 t 退出 run方法, 从而终止t1 线程 ===&gt; 通知方式</span><br><br>        System.out.println(<span class="hljs-string">&quot;主线程休眠10秒&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">10000</span>);<br>        t.setLoop(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//设置一个控制变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(loop)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;T 运行中...&quot;</span>+ ++count);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoop</span><span class="hljs-params">(<span class="hljs-type">boolean</span> loop)</span> &#123;<br>        <span class="hljs-built_in">this</span>.loop = loop;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-7-线程常用方法"><a href="#2-7-线程常用方法" class="headerlink" title="2.7 线程常用方法"></a>2.7 线程常用方法</h2><ol><li>setName: 设置线程的名字, 使之与参数name相同</li><li>getName: 返回该线程的名称</li><li>start: 使该线程开始执行, Java虚拟机底层调用该线程的start0方法</li><li>run, 调用线程对象run方法</li><li>setPriority: 更改线程优先级; </li><li>getPiority:</li><li>sleep: 休眠</li><li>interrupt: 中断线程, 但没有真正的结束线程, 所以一般用于中断正在休眠线程</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//测试相关方法</span><br>        <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        t.setName(<span class="hljs-string">&quot;老韩&quot;</span>);<br>        t.setPriority(Thread.MIN_PRIORITY);<br>        t.start();<br><br><br>        <span class="hljs-comment">//System.out.println(t.getName());</span><br><br>        <span class="hljs-comment">//主线程打印5个 hi, 然后中断子线程的休眠</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;hi&quot;</span> + i);<br>        &#125;<br>        System.out.println(t.getName() + <span class="hljs-string">&quot; 的优先级为: &quot;</span> +t.getPriority() );<br>        t.interrupt();<span class="hljs-comment">//中断t线程的休眠. 注意是中断而不是终止</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;吃包子~~~~~&quot;</span> + i);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 休眠中~~~~~~~~~~~~~&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">20000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-comment">//e.printStackTrace();</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;被 interrup了&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ol start="9"><li>yeild : (静态方法) 线程的礼让. 让出cpu, 让其他线程执行, 但礼让时间不确定, 所以也不一定礼让成功</li><li>join: 线程的插队, 插队的线程一旦插队成功, 则肯定先执行完插入的线程所有的任务</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">T2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T2</span>();<br>        t2.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;主线程: &quot;</span> + i);<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot; 让给子线程&quot;</span>);<br><span class="hljs-comment">//                t2.join();//让子线程t2线程插队---一定成功</span><br><span class="hljs-comment">//                System.out.println(&quot;子线程结束&quot;);</span><br>                Thread.yield();<span class="hljs-comment">//主线程礼让  -- -不一定成功</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 休眠中~~~~~~~~~~~~~&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br><br>            &#125;<br>                System.out.println(<span class="hljs-string">&quot;JoinThread~~~~~~~~~~~~~~吃了&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//课堂练习</span><br><span class="hljs-keyword">package</span> com.hspedu.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethodExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(son);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;主线程 hi &quot;</span> + i);<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;让子线程插队&quot;</span>);<br>                thread.start();<br>                thread.join();<br>                System.out.println(<span class="hljs-string">&quot;子线程结束&quot;</span>);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;hello  &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-8-用户线程和守护线程"><a href="#2-8-用户线程和守护线程" class="headerlink" title="2.8 用户线程和守护线程"></a>2.8 用户线程和守护线程</h2><ol><li>用户线程: 也叫工作线程, 当线程的任务执行完成或通知方式结束    [主线程结束, 子线程不结束]</li><li>守护线程: 一般是为工作线程服务的, 当所有的用户线程结束, 守护线程自动结束     [主线程结束其子线程也自动结束]</li><li>常见的守护线程 : 垃圾回收机制</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">MyDaemonThread</span> <span class="hljs-variable">myDaemonThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDaemonThread</span>();<br>        <span class="hljs-comment">//如果希望主线程结束后子线程也结束,</span><br>        <span class="hljs-comment">//只需将子线程设置为守护线程, 再启动</span><br>        myDaemonThread.setDaemon(<span class="hljs-literal">true</span>);<br><br><br>        myDaemonThread.start();<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span> ; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;宝强辛苦工作&quot;</span> + i);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDaemonThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<span class="hljs-comment">// Deamon : 守护进程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;马蓉和宋喆快乐聊天&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h1 id="三-线程的生命周期"><a href="#三-线程的生命周期" class="headerlink" title="三 线程的生命周期"></a>三 线程的生命周期</h1><p>JDK 中用Thread.State 枚举表示了线程的几种状态 [官方文档六种:   NEW, RUNNABLE(ready, Running) , BLOCKED, WAITING, TIMED_WAITING, TERMINATED]</p><p><img src="https://jimsunjing.github.io/images/java/javaThread.png" alt="javaThread.png (1204×906) (jimsunjing.github.io)"></p><h1 id="四-synchronized-🚑🚒🚚🚑"><a href="#四-synchronized-🚑🚒🚚🚑" class="headerlink" title="四 synchronized 🚑🚒🚚🚑"></a>四 synchronized 🚑🚒🚚🚑</h1><h2 id="4-1-线程同步机制"><a href="#4-1-线程同步机制" class="headerlink" title="4.1 线程同步机制"></a>4.1 线程同步机制</h2><p>在多线程编程, 一些敏感数据不允许被多个线程同时访问, 此时就使用同步访问技术, 保证数据在任何时刻,, 最多有一个线程访问, 以保证数据的完整性</p><p>线程同步, 即当有一个线程在对内存进行操作时,  <strong>其他线程都不可以对这个内存地址进行操作</strong>, 直到该线程完成操作, 其他线程才能对内存地址进行操作</p><h2 id="4-2-具体同步方法"><a href="#4-2-具体同步方法" class="headerlink" title="4.2 具体同步方法"></a>4.2 具体同步方法</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1. 同步代码块</span><br><br>synchoronized(对象) &#123; <span class="hljs-comment">//得到对象的锁,才能操作同步代码</span><br><span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br><br><span class="hljs-comment">//2. synchronized 还可以放在方法声明中, 表示整个方法为同步方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">(String name)</span>&#123;<br>    <span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="五-互斥锁-🚗🚓🚕🚚🚛🚒🚑"><a href="#五-互斥锁-🚗🚓🚕🚚🚛🚒🚑" class="headerlink" title="五 互斥锁 🚗🚓🚕🚚🚛🚒🚑"></a>五 互斥锁 🚗🚓🚕🚚🚛🚒🚑</h1><h2 id="5-1-基本介绍"><a href="#5-1-基本介绍" class="headerlink" title="5.1 基本介绍"></a>5.1 基本介绍</h2><ol><li>Java语言中,引入了对象互斥锁的概念, 来保证共享数据操作的完整性</li><li>每个对象都对应于一个可称为”互斥锁” 的标记, 这个标记用来保证在任意时刻, 只能有一个线程访问该对象</li><li>关键字synchronized来与对象的互斥锁联系, 当某个对象用synchronized修饰时, 表明该对象在任意时刻只能由一个线程访问</li><li>同步的局限性: 导致程序的执行效率要降低</li><li>同步方法(非静态的) 的锁可以是this , 也可以是其他对象(要求是同一个对象)</li><li>同步方法(静态的) 的锁为当前类本身</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//实现接口方式, 使用sychronized实现线程同步</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket03</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span>   <span class="hljs-type">int</span> <span class="hljs-variable">ticketNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//让多个线程共享ticketnum</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <br>    <br>    <span class="hljs-comment">//1. public synchronized void sell()&#123;&#125;就是一个同步方法</span><br>    <span class="hljs-comment">//2. 这时锁在this对象</span><br>    <span class="hljs-comment">//3. 也可以在代码块上写 synchronized , 同步代码块, </span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    synchronized (this)&#123;//这是锁还是在this对象. 可以把this 换成obj , 这样三个线程仍然用的同一个对象锁, 仍然可以实现同步</span><br><span class="hljs-comment">    //如果静态方法使用synchronized 那么锁就加在SellTicket03.class上  synchronized(SellTicket03.class)&#123;&#125;</span><br><span class="hljs-comment">        if&#123;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        ...</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span>&#123;  <span class="hljs-comment">// 同步方法, 在同一个时刻, 只能有一个线程可以来执行sell()方法</span><br>        <span class="hljs-keyword">if</span>(ticketNum &lt;=<span class="hljs-number">0</span> )&#123;<br>            System.out.println(<span class="hljs-string">&quot;售票结束...&quot;</span>);<br>            loop = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">50</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;窗口 &quot;</span> + Thread.currentThread().getName()<br>                + <span class="hljs-string">&quot; 售出一张票 剩余票数&quot;</span> + (--ticketNum) );<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(loop)&#123;<br><br>            sell();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-2-注意事项"><a href="#5-2-注意事项" class="headerlink" title="5.2 注意事项"></a>5.2 注意事项</h2><ol><li>同步方法如果没有使用static修饰: 默认锁对象是this</li><li>如果方法使用static修饰, 默认对象: 当前类.class</li><li>实现的落地步骤:<ul><li>需要先分析上锁代码</li><li>选择同步代码块或同步方法</li><li>要求<strong>多个线程的锁对象为同一个即可</strong></li></ul></li></ol><h1 id="六-死锁"><a href="#六-死锁" class="headerlink" title="六 死锁"></a>六 死锁</h1><h2 id="6-1-基本介绍"><a href="#6-1-基本介绍" class="headerlink" title="6.1 基本介绍"></a>6.1 基本介绍</h2><p>多个线程都占用了对方的锁资源, 但不肯让, 导致了死锁, 在编程是一定要避免死锁的发生</p><h2 id="6-2-释放锁"><a href="#6-2-释放锁" class="headerlink" title="6.2 释放锁"></a>6.2 释放锁</h2><p>以下操作会释放锁: </p><ol><li>当前线程的同步方法, 同步代码块执行结束</li><li>当前线程在同步代码块, 同步方法中遇到break, return</li><li>当前线程在同步代码块, 同步方法中出现了未处理的Error 或Exception , 导致异常结束</li><li>当前线程在同步代码块, 同步方法中执行了线程对象的wait() 方法, 当前线程暂停, 并释放锁</li></ol><p>以下的操作不会释放锁:</p><ol><li>线程执行同步代码块或同步方法时, 程序调用Thread.sleep(), Thread.yield() 方法暂停当前线程的执行, 不会释放锁</li><li>线程执行同步代码块时, 其他线程调用了该线程的suspend() 方法将该线程挂起, 该线程不会释放锁</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发送文件</title>
      <link href="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6)/"/>
      <url>/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="一、功能说明"><a href="#一、功能说明" class="headerlink" title="一、功能说明"></a>一、功能说明</h1><p><img src="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6)/Users\Administrator.DESKTOP-VVE6ROJ\AppData\Roaming\Typora\typora-user-images\image-20220403153829526.png" alt="image-20220403153829526"></p><h1 id="二、思路分析-amp-程序框架图"><a href="#二、思路分析-amp-程序框架图" class="headerlink" title="二、思路分析 &amp; 程序框架图"></a>二、思路分析 &amp; 程序框架图</h1><p><img src="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6)/Users\Administrator.DESKTOP-VVE6ROJ\AppData\Roaming\Typora\typora-user-images\image-20220403155034870.png" alt="image-20220403155034870"></p><h1 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h1><p>MessageType消息类型增加</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_FILE_MES</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;8&quot;</span>;<span class="hljs-comment">//文件消息类型</span><br></code></pre></div></td></tr></table></figure><p>Message扩展</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] fileBytes;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">fileLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> String dest;<span class="hljs-comment">// 将文件传输到哪里</span><br><span class="hljs-keyword">private</span> String src;<span class="hljs-comment">// 源文件路径</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getFileBytes() &#123;<br>        <span class="hljs-keyword">return</span> fileBytes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFileBytes</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] fileBytes)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fileBytes = fileBytes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getFileLen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fileLen;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFileLen</span><span class="hljs-params">(<span class="hljs-type">int</span> fileLen)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fileLen = fileLen;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dest;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDest</span><span class="hljs-params">(String dest)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dest = dest;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSrc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> src;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSrc</span><span class="hljs-params">(String src)</span> &#123;<br>        <span class="hljs-built_in">this</span>.src = src;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>客户端新建一个文件传输服务类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.client.service;<br><br><span class="hljs-keyword">import</span> com.hspedu.common.Message;<br><span class="hljs-keyword">import</span> com.hspedu.common.MessageType;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022</span><br><span class="hljs-comment"> * 该类完成文件传输服务</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileClientService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 一对一传送</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> src 源文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dest 目标路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> senderId 发送人</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> getterId 接收人</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendFileToOne</span><span class="hljs-params">(String src,String dest ,String senderId, String getterId)</span>&#123;<br>        <span class="hljs-comment">//读取src文件 --&gt; message</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setMesType(MessageType.MESSAGE_FILE_MES);<br>        message.setSender(senderId);<br>        message.setGetter(getterId);<br>        message.setSrc(src);<br>        message.setDest(dest);<br><br>        <span class="hljs-comment">//读取文件</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">byte</span>[] fileBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(src).length()];<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(src);<br>            fileInputStream.read(fileBytes);<br>            <span class="hljs-comment">//将文件对应的字节数组设置到message对象</span><br>            message.setFileBytes(fileBytes);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(fileInputStream != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileInputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//提示信息</span><br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + senderId + <span class="hljs-string">&quot; 给 &quot;</span> + getterId + <span class="hljs-string">&quot; 发送文件：&quot;</span> + src + <span class="hljs-string">&quot; 到对方的目录：&quot;</span>+ dest);<br><br>        <span class="hljs-comment">//发送</span><br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        message.setSendTime(dateTimeFormatter.format(LocalDateTime.now()));<span class="hljs-comment">//发送时间</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ManageClientConnectionServerThread.getClientConnectServerThread(senderId).getSocket().getOutputStream());<br>            oos.writeObject(message);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>服务端对文件流进行转发</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(message.getMesType().equals(MessageType.MESSAGE_FILE_MES))&#123;<br>                    <span class="hljs-comment">//文件消息</span><br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ManageClientThreads.getServereConnectClientThread(message.getGetter()).getSocket().getOutputStream());<br>                    oos.writeObject(message);<br>                &#125;<br></code></pre></div></td></tr></table></figure><p>另一个客户端接收</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(message.getMesType().equals(MessageType.MESSAGE_FILE_MES))&#123;<br>    <span class="hljs-comment">//文件消息</span><br>    System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + message.getSender() + <span class="hljs-string">&quot; : &quot;</span> + message.getSrc() + <span class="hljs-string">&quot;==&gt;&quot;</span> + message.getDest() + <span class="hljs-string">&quot;\t&quot;</span>+ message.getSendTime());<br>    <span class="hljs-type">byte</span>[] fileBytes = message.getFileBytes();<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(message.getDest());<br>    fileOutputStream.write(fileBytes);<br>    fileOutputStream.close();<br>    System.out.println(<span class="hljs-string">&quot;成功保存文件~&quot;</span>);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="四、效果"><a href="#四、效果" class="headerlink" title="四、效果"></a>四、效果</h1><p><img src="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6)/image-20220403174014197.png" alt="image-20220403174014197"></p><p><img src="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6)/image-20220403174035433.png" alt="image-20220403174035433"></p><blockquote><p>项目地址：<a href="https://gitee.com/bluebirdlearncode/communicate-system">Java_Project: 使用Java语言实现的简单通讯系统 (gitee.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
          <category> 多用户通讯系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java项目 </tag>
            
            <tag> 多用户通讯系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离线发送</title>
      <link href="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%A6%BB%E7%BA%BF%E5%8F%91%E9%80%81)/"/>
      <url>/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%A6%BB%E7%BA%BF%E5%8F%91%E9%80%81)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="一、功能说明"><a href="#一、功能说明" class="headerlink" title="一、功能说明"></a>一、功能说明</h1><p>1、实现离线留言：如果某个用户没有在线，当登录之后，可以接收留言信息</p><p>2、实现离线发送文件：如果某个用户没有在线，当登录后，可以接收发送方发送的文件</p><h1 id="二、思路分析-amp-程序框架图"><a href="#二、思路分析-amp-程序框架图" class="headerlink" title="二、思路分析 &amp; 程序框架图"></a>二、思路分析 &amp; 程序框架图</h1><p>当客户端发送的对象不在线时，服务器将其信息存放在一个集合，key：getterId，value：ArrayList<Message>;这样目标用户可以接收多条留言信息，当接收方上线后，服务端会直接将集合中的留言信息发出，并将服务器中集合的信息删除</Message></p><p><img src="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%A6%BB%E7%BA%BF%E5%8F%91%E9%80%81)/Users\Administrator.DESKTOP-VVE6ROJ\AppData\Roaming\Typora\typora-user-images\image-20220403184952757.png" alt="image-20220403184952757"></p><h1 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h1><p>在服务端Server添加集合</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String, ArrayList&lt;Message&gt;&gt; offLineDb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br></code></pre></div></td></tr></table></figure><p>服务端离线发送消息的方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向刚上线用户发送离线消息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendOffLineMessage</span><span class="hljs-params">(String userId)</span>&#123;<br>    ArrayList&lt;Message&gt; messages = offLineDb.get(userId);<br><span class="hljs-keyword">if</span>(messages.isEmpty()) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">for</span> (Message message : messages) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ManageClientThreads.getServereConnectClientThread(userId).getSocket().getOutputStream());<br>            oos.writeObject(message);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    messages.clear();<span class="hljs-comment">//发送之后清空</span><br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>服务端存储离线消息</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(message.getMesType().equals(MessageType.MESSAFE_COMM_MES))&#123;<br>                    <span class="hljs-comment">//私聊消息</span><br>                    <span class="hljs-comment">//根据message获取getterid，再获取其对应的socket，根据socket发送给getter</span><br>                    <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">servereConnectClientThread</span> <span class="hljs-operator">=</span> ManageClientThreads.getServereConnectClientThread(message.getGetter());<br>                    <span class="hljs-comment">//得到对应的socket</span><br>                    <span class="hljs-keyword">if</span>(servereConnectClientThread != <span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//在线用户则直接发送</span><br>                        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(servereConnectClientThread.getSocket().getOutputStream());<br>                        oos.writeObject(message);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//离线用户存入集合//如果客户不在线，可以保存到数据库，实现离线留言</span><br>                        Server.addOffLineMessage(message.getGetter(),message);<br>                    &#125;<br></code></pre></div></td></tr></table></figure><p>存储方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 将发送给离线用户的消息存放到集合中</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOffLineMessage</span><span class="hljs-params">(String userId,Message message)</span>&#123;<br>    ArrayList&lt;Message&gt; messages = offLineDb.get(userId);<br>    messages.add(message);<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="四、效果"><a href="#四、效果" class="headerlink" title="四、效果"></a>四、效果</h1><p><img src="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%A6%BB%E7%BA%BF%E5%8F%91%E9%80%81)/image-20220403205048905.png" alt="image-20220403205048905"></p><p><img src="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%A6%BB%E7%BA%BF%E5%8F%91%E9%80%81)/image-20220403205056771.png" alt="image-20220403205056771"></p><h1 id="五、改进"><a href="#五、改进" class="headerlink" title="五、改进"></a>五、改进</h1><p>存放消息集合中应将ArrayList换成Vector，避免线程安全问题。</p><blockquote><p>项目地址：<a href="https://gitee.com/bluebirdlearncode/communicate-system">Java_Project: 使用Java语言实现的简单通讯系统 (gitee.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
          <category> 多用户通讯系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java项目 </tag>
            
            <tag> 多用户通讯系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群聊</title>
      <link href="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%BE%A4%E8%81%8A)/"/>
      <url>/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%BE%A4%E8%81%8A)/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="一、功能说明"><a href="#一、功能说明" class="headerlink" title="一、功能说明"></a>一、功能说明</h1><p>当一个用户选择使用群发消息功能的时候，它可以将要发送的内容发送到当前在线的每一个用户，当接收方收到群发消息，会在控制台显示收到的消息。</p><h1 id="二、思路分析"><a href="#二、思路分析" class="headerlink" title="二、思路分析"></a>二、思路分析</h1><p>此功能的思路和私聊的很类似，也是发送方先向服务端发送消息，服务端接收到后判断是群聊消息，然后遍历目前在线的线程，将消息发送出去</p><h1 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h1><p>客户端View</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>    System.out.print(<span class="hljs-string">&quot;群发消息：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">contentToAll</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">100</span>);<br>    <span class="hljs-comment">//调用一个方法，将消息封装成message对象，发送给服务端</span><br><span class="hljs-keyword">break</span>;<br></code></pre></div></td></tr></table></figure><p>客户端消息管理类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 群发消息方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> contentToAll 内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> senderId 发送者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessageToAll</span><span class="hljs-params">(String contentToAll, String senderId)</span>&#123;<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setContent(contentToAll);<br>        message.setSender(senderId);<br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        message.setSendTime(dateTimeFormatter.format(LocalDateTime.now()));<br>        System.out.println(senderId + <span class="hljs-string">&quot; : &quot;</span> + contentToAll );<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ManageClientConnectionServerThread.getClientConnectServerThread(senderId).getSocket().getOutputStream());<br>            oos.writeObject(message);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br></code></pre></div></td></tr></table></figure><p>服务端遍历群发</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(message.getMesType().equals(MessageType.MESSAGE_TO_ALL_MES))&#123;<br>    <span class="hljs-comment">//群发消息，遍历hm，取出所有线程，打入其数据通道</span><br>    HashMap&lt;String, ServerConnectClientThread&gt; hm = ManageClientThreads.getHm();<br>    Iterator&lt;String&gt; iterator = hm.keySet().iterator();<br>    <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> iterator.next();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ManageClientThreads.getServereConnectClientThread(userId).getSocket().getOutputStream());<br>        oos.writeObject(message);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>客户端方接收群发消息</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(message.getMesType().equals(MessageType.MESSAGE_TO_ALL_MES))&#123;<br>    System.out.println(message.getSender() + <span class="hljs-string">&quot;:&quot;</span> +message.getContent() +<span class="hljs-string">&quot;\t&quot;</span> + message.getSendTime());<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="四、实际效果"><a href="#四、实际效果" class="headerlink" title="四、实际效果"></a>四、实际效果</h1><p><img src="/2022/03/07/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%BE%A4%E8%81%8A)/image-20220403153720057.png" alt="image-20220403153720057"></p>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
          <category> 多用户通讯系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java项目 </tag>
            
            <tag> 多用户通讯系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私聊</title>
      <link href="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%A7%81%E8%81%8A)/"/>
      <url>/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%A7%81%E8%81%8A)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="一、功能说明"><a href="#一、功能说明" class="headerlink" title="一、功能说明"></a>一、功能说明</h1><p>用户与用户之间能够实现私聊的功能。如用户100给用户200发送消息，用户200可以收到消息，用户200也可以给用户100发送信息。</p><h1 id="二、思路分析-amp-程序框架图"><a href="#二、思路分析-amp-程序框架图" class="headerlink" title="二、思路分析 &amp; 程序框架图"></a>二、思路分析 &amp; 程序框架图</h1><p><img src="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%A7%81%E8%81%8A)/image-20220403093252210.png" alt="image-20220403093252210"></p><h1 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h1><p>客户端的view</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>    System.out.println(<span class="hljs-string">&quot;请输入想聊天的在线用户id：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">getterId</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>    System.out.println(<span class="hljs-string">&quot;请输入聊天内容&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">100</span>);<br>    <span class="hljs-comment">//编写一个私聊方法, 将信息发送到服务端</span><br>    MessageClientService.sendMessageToOne(content,userId,getterId);<br>    <span class="hljs-keyword">break</span>;<br></code></pre></div></td></tr></table></figure><p>在客户端编写一个消息处理的类，里面设置一个发送消息的静态方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.client.service;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">import</span> com.hspedu.common.Message;<br><span class="hljs-keyword">import</span> com.hspedu.common.MessageType;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022</span><br><span class="hljs-comment"> * 该类/对象， 提供和消息服务相关的服务方法</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageClientService</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> senderId 发送信息者</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> getterId 接收信息者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessageToOne</span><span class="hljs-params">(String content,String senderId,String getterId)</span>&#123;<br>        <span class="hljs-comment">//构建message对象</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setMesType(MessageType.MESSAFE_COMM_MES);<br>        message.setSender(senderId);<br>        message.setGetter(getterId);<br>        message.setContent(content);<br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        message.setSendTime(dateTimeFormatter.format(LocalDateTime.now()));<span class="hljs-comment">//发送时间</span><br><br><br>        System.out.println(senderId + <span class="hljs-string">&quot; 发送给 &quot;</span> + getterId +<span class="hljs-string">&quot; : &quot;</span> + content);<br>        <span class="hljs-comment">//发送给服务端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ManageClientConnectionServerThread.getClientConnectServerThread(senderId).getSocket().getOutputStream());<br>            oos.writeObject(message);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="四、实现效果"><a href="#四、实现效果" class="headerlink" title="四、实现效果"></a>四、实现效果</h1><p><img src="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%A7%81%E8%81%8A)/image-20220403105304066.png" alt="image-20220403105304066"></p><p><img src="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%A7%81%E8%81%8A)/image-20220403105323957.png" alt="image-20220403105323957"></p><blockquote><p>项目地址：<a href="https://gitee.com/bluebirdlearncode/communicate-system">Java_Project: 使用Java语言实现的简单通讯系统 (gitee.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
          <category> 多用户通讯系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java项目 </tag>
            
            <tag> 多用户通讯系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无异常退出</title>
      <link href="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%97%A0%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA)/"/>
      <url>/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%97%A0%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="一、功能说明"><a href="#一、功能说明" class="headerlink" title="一、功能说明"></a>一、功能说明</h1><p>由于主线程选择退出，他的子线程还没有结束，因此会导致程序不会真正退出，如下</p><p><img src="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%97%A0%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA)/image-20220402210309519.png" alt="image-20220402210309519"></p><p>程序便卡在这里没有退出。</p><h1 id="二、思路分析-amp-程序框架图"><a href="#二、思路分析-amp-程序框架图" class="headerlink" title="二、思路分析 &amp; 程序框架图"></a>二、思路分析 &amp; 程序框架图</h1><p><img src="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%97%A0%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA)/image-20220402211006147.png" alt="image-20220402211006147"></p><p><img src="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%97%A0%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA)/image-20220402211112985.png" alt="image-20220402211112985"></p><p><img src="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%97%A0%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA)/image-20220402211626774.png" alt="image-20220402211626774"></p><p><img src="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%97%A0%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA)/image-20220402211656269.png" alt="image-20220402211656269"></p><h1 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h1><p>客户端界面</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>    <span class="hljs-comment">//调用一个方法，给服务器发送一个退出系统的消息message</span><br>    userClientService.logout();<br>    loop = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br></code></pre></div></td></tr></table></figure><p>断开连接服务的方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> 编写方法：退出客户端，并且给服务端发送退出系统的Message对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logout</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>    message.setMesType(MessageType.MESSAGE_CLIENT_EXIT);<br>    message.setSender(user.getUserId());<span class="hljs-comment">//一定要指定是哪个客户端来向服务端申请退出</span><br><br>    <span class="hljs-comment">//发送message</span><br>    <span class="hljs-keyword">try</span> &#123;<br><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ManageClientConnectionServerThread.getClientConnectServerThread(user.getUserId()).getSocket().getOutputStream());<br>        oos.writeObject(message);<br>        System.out.println(<span class="hljs-string">&quot;用户&quot;</span>+ user.getUserId() + <span class="hljs-string">&quot;退出了系统&quot;</span>);<br>        System.exit(<span class="hljs-number">0</span>);<span class="hljs-comment">// 这里直接退出，主程序直接退出，完成正常的退出</span><br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="四、实际效果"><a href="#四、实际效果" class="headerlink" title="四、实际效果"></a>四、实际效果</h1><p><img src="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E6%97%A0%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA)/image-20220402215858623.png" alt="image-20220402215858623"></p><blockquote><p>项目地址：<a href="https://gitee.com/bluebirdlearncode/communicate-system">Java_Project: 使用Java语言实现的简单通讯系统 (gitee.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
          <category> 多用户通讯系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java项目 </tag>
            
            <tag> 多用户通讯系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拉取在线用户</title>
      <link href="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F(%E6%8B%89%E5%8F%96%E5%9C%A8%E7%BA%BF%E7%94%A8%E6%88%B7)/"/>
      <url>/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F(%E6%8B%89%E5%8F%96%E5%9C%A8%E7%BA%BF%E7%94%A8%E6%88%B7)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="一、功能说明"><a href="#一、功能说明" class="headerlink" title="一、功能说明"></a>一、功能说明</h1><p>在用户登录以后，可以在列表里选择别的在线聊天用户进行私聊，或者进行群聊。因此这里首先要实现显示在线用户的功能</p><h1 id="二、思路分析-amp-程序框架图"><a href="#二、思路分析-amp-程序框架图" class="headerlink" title="二、思路分析 &amp; 程序框架图"></a>二、思路分析 &amp; 程序框架图</h1><p>首先对消息对象的类型进行扩充，增加用户获取在线用户列表的消息类型，服务器也可以根据此消息类型进行判断，是否给用户返回用户列表。</p><p><img src="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F(%E6%8B%89%E5%8F%96%E5%9C%A8%E7%BA%BF%E7%94%A8%E6%88%B7)/image-20220402175608541.png" alt="image-20220402175608541"></p><h1 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h1><p>在Message中新增消息类型</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.common;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 消息类型</span><br><span class="hljs-comment"> * 接口中定义一些常量，用来表示不同的消息类型</span><br><span class="hljs-comment"> * 登录状态信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>; <span class="hljs-comment">//表示登录成功</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span>; <span class="hljs-comment">//表示登录失败</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAFE_COMM_MES</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span>;<span class="hljs-comment">//普通信息包</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_GET_ONLINE_FRIEND</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4&quot;</span>;<span class="hljs-comment">//要返回在线用户列表</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_RETURN_ONLINE_FRIEND</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5&quot;</span>;<span class="hljs-comment">//返回在线用户列表</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_CLIENT_EXIT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;6&quot;</span>;<span class="hljs-comment">//客户端请求退出</span><br><br><br><br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>客户端向服务端发送获取在线列表信息的请求</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     *向服务器端请求在线用户列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onlineFriendList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//发送一个Message，类型是get_online_friend</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setMesType(MessageType.MESSAGE_GET_ONLINE_FRIEND);<br>        <span class="hljs-type">ClientConnectServerThread</span> <span class="hljs-variable">clientConnectServerThread</span> <span class="hljs-operator">=</span> ManageClientConnectionServerThread.getClientConnectServerThread(user.getUserId());<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> clientConnectServerThread.getSocket();<br><br>        <span class="hljs-comment">//发送给服务器</span><br>        <span class="hljs-comment">//应该得到当前线程的Socket 对应的ObjectOutputStream</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<br>                    socket.getOutputStream());<br>            oos.writeObject(message);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br></code></pre></div></td></tr></table></figure><p>客户端的网络通讯线程读取服务端发送的在线列表</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//正常情况，不停读socket的输入流，保证随时能收到消息</span><br>           <span class="hljs-keyword">try</span> &#123;<br>               System.out.println(<span class="hljs-string">&quot;客户端等待服务器端的数据&quot;</span>);<br>               <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>               <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message)ois.readObject();<span class="hljs-comment">//如果服务器没有发送Message对象，则会阻塞在这里</span><br>               <span class="hljs-comment">//判断这个message的类型，然后做相应的业务处理</span><br>               <span class="hljs-keyword">if</span>(message.getMesType().equals(MessageType.MESSAGE_RETURN_ONLINE_FRIEND))&#123;<br>                   <span class="hljs-comment">//如果读到服务端返回的在线用户列表</span><br>                   <span class="hljs-comment">//取出在线列表信息</span><br>                   <span class="hljs-comment">//规定： 如果服务器返回所有用户id，则多个id之间用空格分开</span><br>                   String[] onlinesUsers = message.getContent().split(<span class="hljs-string">&quot; &quot;</span>);<br>                   System.out.println(<span class="hljs-string">&quot;========当前在线用户列表========&quot;</span>);<br>                   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; onlinesUsers.length; i++) &#123;<br>                       System.out.println(<span class="hljs-string">&quot;用户：&quot;</span> + onlinesUsers[i]);<br>                   &#125;<br><br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                   <span class="hljs-comment">//其他类型暂不处理</span><br>                   System.out.println(<span class="hljs-string">&quot;是其他类型的message，暂时不处理&quot;</span>);<br>               &#125;<br><br>           &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>               e.printStackTrace();<br>           &#125;<br><br>       &#125;<br>   &#125;<br></code></pre></div></td></tr></table></figure><h1 id="四、实现效果"><a href="#四、实现效果" class="headerlink" title="四、实现效果"></a>四、实现效果</h1><p><img src="/2022/03/06/%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F(%E6%8B%89%E5%8F%96%E5%9C%A8%E7%BA%BF%E7%94%A8%E6%88%B7)/image-20220402205559352.png" alt="image-20220402205559352"></p><blockquote><p>项目地址：<a href="https://gitee.com/bluebirdlearncode/communicate-system">Java_Project: 使用Java语言实现的简单通讯系统 (gitee.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
          <category> 多用户通讯系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java项目 </tag>
            
            <tag> 多用户通讯系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哔哩哔哩2019秋招技术岗（前端、运维、后端、移动端）第一套</title>
      <link href="/2022/03/05/%E7%AC%94%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2022/03/05/%E7%AC%94%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="哔哩哔哩2019秋招技术岗（前端、运维、后端、移动端）第一套笔试题"><a href="#哔哩哔哩2019秋招技术岗（前端、运维、后端、移动端）第一套笔试题" class="headerlink" title="哔哩哔哩2019秋招技术岗（前端、运维、后端、移动端）第一套笔试题"></a>哔哩哔哩2019秋招技术岗（前端、运维、后端、移动端）第一套笔试题</h1><p>在公司局域网上ping <a href="http://www.bilibili.com/">www.bilibili.com</a> 没有涉及到的网络协议是？（）</p><p>先使用应用层协议DNS将域名解析为目标主机的IP地址；之后使用网络层协议ARP，通过目标主机的IP地址映射为MAC地址，通过IP地址可以知道数据包最后发给谁，MAC地址可以知道数据包下一跳给谁，这样数据才能顺利到达；之后使用网络层协议ICMP来传递主机间的控制信息。由于主机间没有连接过程，是直接发送数据的，所以不使用TCP协议。</p><p><a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a> [1] 分为5类，其中A，B，C三类中各保留了3个区域作为私网地址，也就是局域网用的，私网地址不能在公网上出现，只能用在内部网路中，所有的路由器都不能发送目标地址为私网地址的数据报。</p><p><strong>私网地址是</strong>：</p><p><strong>A类地址：10.0.0.0～10.255.255.255</strong></p><p><strong>B类地址：172.16.0.0 ～172.31.255.255</strong></p><p><strong>C类地址：192.168.0.0～192.168.255.255</strong></p><p><img src="https://uploadfiles.nowcoder.com/images/20190511/414844110_1557545456799_50256D8AE72E7BBD6CCF652AF420B604" alt="img"></p><p>以下哪一项正则能正确的匹配网址: <a href="http://www.bilibili.com/video/av21061574">http://www.bilibili.com/video/av21061574</a> （）</p><figure class="highlight mercury"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mercury">/^(https?:<span class="hljs-built_in">\/</span><span class="hljs-built_in">\/</span>)?([a-zA-Z\d]+).bilibili.com<span class="hljs-built_in">\/</span>?video<span class="hljs-built_in">\/</span>av(\D&#123;<span class="hljs-number">1</span>,<span class="hljs-number">8</span>&#125;)<span class="hljs-built_in">\/</span>?$/<br>/^(http:<span class="hljs-built_in">\/</span><span class="hljs-built_in">\/</span>)?(\w+)\.bilibili\.com<span class="hljs-built_in">\/</span>?video<span class="hljs-built_in">\/</span>av(\d&#123;<span class="hljs-number">1</span>,<span class="hljs-number">8</span>&#125;)<span class="hljs-built_in">\/</span>?$/<br>/^(https?:<span class="hljs-built_in">\/</span><span class="hljs-built_in">\/</span>)?(\w+)\.bilibili\.com<span class="hljs-built_in">\/</span>?\w*$/<br>/^(http:<span class="hljs-built_in">\/</span><span class="hljs-built_in">\/</span>)?([a-zA-Z\d]+).bilibili.com<span class="hljs-built_in">\/</span>?video<span class="hljs-built_in">\/</span>av\w*<span class="hljs-built_in">\/</span>+$/<br></code></pre></div></td></tr></table></figure><p>用到的正则表达式的知识点： </p><p>​     首先，<strong>^表示匹配输入的开始</strong>，**$表示匹配输入的结束**       每个选项从前向后看，http都能够严格匹配       <strong>?表示匹配某元素0次或1次</strong>，这里四个选项都没有问题，能够匹配0次或1次字符s       接下来:严格匹配，//严格匹配两个&#x2F;&#x2F;       接着往下看，**[]表示字符集合，它用在正则表达式中表示匹配集合中的任一字符**       A D 选项中的 [a-zA-Z\d] 表示匹配一个小写字母 或者 大写字母 或者 数字       B C 选项中的 <strong>\w 表示匹配字母数字或下划线</strong>（注意这里比A D中能多匹配下划线类型）       <strong>+表示匹配某元素1次或多次</strong>，到这里四个选项都能够完美匹配字符www<br>​       <strong>.可以匹配除了换行符\n \r外的任何字符</strong>       接下来我们看选项A，bilibili com video av都严格匹配，而 <strong>\D 表示匹配一个非数字字符</strong>而非数字字符，av后的数字是无法匹配成功的，A错误       B选项，\d匹配数字，{m,n}表示最少匹配m次，最多匹配n次，/?能匹配末尾的0个或1个&#x2F;字符，B正确       C选项，*<strong>表示匹配某元素0次或多次</strong>，但 \w 并不能匹配字符 &#x2F;，C错误       D选项，前面都对，错在最后的/+至少要匹配一个&#x2F;，而原字符串最后并没有&#x2F;</p><p><strong>局域网技术</strong></p><p>令牌环网</p><p>光纤分布式数据接口FDDI（Fiber Distributed Data Interface）</p><p><strong>广域网技术</strong></p><p>综合业务数字网（ISDN）就是一种采用电路交换技术的广域网技术。</p><p>ATM，帧中继，SMDS以及X.25等都是采用包交换技术的广域网技术。</p><p>非静态方法使用数据保存于栈中，是线程私有的。</p><p>文字游戏，如果有人穿女装，那人是“<strong>先抛的人</strong>”概率多大。</p><p>00</p><p>01</p><p>10</p><p>11</p><p>0正1负，前3种是有人穿女装，其中<strong>先抛的人</strong>占2</p><p>逆波兰式即表达式树的后缀遍历，题中所给的a - (b + c) * d + e &#x2F; f则为中缀遍历，将中缀表达式转换为后缀表达式满足以下的规则：</p><ul><li><p>从左到右遍历中缀表达式的每一个数字和符号。</p></li><li><p>若是数字就输出，即成为后缀表达式的一部分。</p></li><li><p>如果是符号，则判断其与栈顶符号的优先级，是<strong>右括号</strong>或<strong>已有栈顶符号优先级（乘除优于加减）大于等于此符号</strong>则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。</p></li></ul><p><strong>特别注意的是：当栈顶元素是左括号时，除非当前的操作符是右括号，否则将不会弹出——*<em>可以理解为左括号的操作符非常的低*</em></strong></p><p><img src="https://uploadfiles.nowcoder.com/compress/mw1000/images/20190910/136086023_1568099122862_5DC12EA3F835355BF74D007890D7F43D" alt="136086023_1568099122862_5DC12EA3F835355BF74D007890D7F43D (1676×2165) (nowcoder.com)"></p><p>在TCP&#x2F;IP网络中，TCP协议工作在传输层1 ，FTP协议工作在 应用层</p><p>常见HTTP状态码 </p><p>200     ok 服务器成功处理请求</p><p>301&#x2F;302 重定向 请求的URL已经转移</p><p>304    未修改  客户缓存的资源是最新的 客户端使用缓存内容</p><p>403    Forbidden  禁止。服务器拒绝请求</p><p>404    NotFound   未找到资源 </p><p>405  Method Not Allowed 不允许使用的方法</p><p>实现一个HTML语法检查器。HTML语法规则简化如下：标签必须闭合，可以由开始和结束两个标签闭合，如<div></div>，也可以自闭合，如<div>标签可以嵌套如<div><a></a></div>或者 <div><a></a></div>，但是标签不能交叉：<div><a></a></div>是不允许的标签里可以有属性如<div id="a<1"></div>属性的规则是name&#x3D;”任意非引号字符”，多属性声明之间必须有空格，属性声明不符合规则时，整段HTML都算语法错误输入文本只会出现字母a-z和&lt;&gt;”&#x3D;请用任意语言实现一个HTML语法检查器函数，有语法错误返回1，没有语法错误返回0</div></p>]]></content>
      
      
      <categories>
          
          <category> 笔试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坦克大战</title>
      <link href="/2022/03/05/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/"/>
      <url>/2022/03/05/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一-绘图入门"><a href="#一-绘图入门" class="headerlink" title="一  绘图入门"></a>一  绘图入门</h1><h2 id="1-1-一个入门案例"><a href="#1-1-一个入门案例" class="headerlink" title="1.1 一个入门案例"></a>1.1 一个入门案例</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.hspedu.draw_;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.ImageObserver;<br><span class="hljs-keyword">import</span> java.text.AttributedCharacterIterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 演示画圆</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">MyPanel</span> <span class="hljs-variable">mp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//定义一个面板</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle_</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle_</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-comment">//初始化面板</span><br>        mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPanel</span>();<br><br>        <span class="hljs-built_in">this</span>.add(mp);   <span class="hljs-comment">//放入窗口</span><br><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);   <span class="hljs-comment">//设置窗口大小</span><br><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class="hljs-comment">//当点击窗口,程序完全退出</span><br><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<span class="hljs-comment">// 可以显示</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//定义一个MyPannel, 继承JPannel类</span><br><span class="hljs-comment">//画图形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    以下情况paint() 将会被调用</span><br><span class="hljs-comment">    1. 窗口最小/大化</span><br><span class="hljs-comment">    2. 窗口调整</span><br><span class="hljs-comment">    3. repaint() 被调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br><br>        <span class="hljs-built_in">super</span>.paint(g);<span class="hljs-comment">//调用父类方法, 完成初始化</span><br>        <span class="hljs-comment">//画出一个圆</span><br>        g.drawOval(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">333</span>,<span class="hljs-number">333</span>);<br>        System.out.println(<span class="hljs-string">&quot;paint调用&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-2-Graphics类-常用方法"><a href="#1-2-Graphics类-常用方法" class="headerlink" title="1.2 Graphics类 常用方法"></a>1.2 Graphics类 常用方法</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br><br>    <span class="hljs-built_in">super</span>.paint(g);<span class="hljs-comment">//调用父类方法, 完成初始化</span><br>    <span class="hljs-comment">//画出一个椭圆,圆</span><br>   <span class="hljs-comment">// g.drawOval(20,30,333,333);</span><br>   <span class="hljs-comment">// System.out.println(&quot;paint调用&quot;);</span><br><br><br>    <span class="hljs-comment">//绘制不同的图像</span><br>    <span class="hljs-comment">//1. 画直线</span><br>    <span class="hljs-comment">//g.drawLine(10,10,100,100);</span><br>    <span class="hljs-comment">//2. 矩形边框</span><br>    <span class="hljs-comment">//g.drawRect(10,10,90,90);</span><br>    <span class="hljs-comment">//3. 填充矩形</span><br>   <span class="hljs-comment">// g.setColor(Color.blue);//设置画笔颜色</span><br>    <span class="hljs-comment">//g.fillRect(110,110,200,200);//填充矩形</span><br>  <span class="hljs-comment">//  g.fillArc(10,10,100,100,0,45);</span><br>    <span class="hljs-comment">//放图片</span><br>    <span class="hljs-comment">//1. 获取图片资源   out/production/chapter16/img.png</span><br>    <span class="hljs-type">Image</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> Toolkit.getDefaultToolkit().getImage(Panel.class.getResource(<span class="hljs-string">&quot;/img.png&quot;</span>));<br>   <span class="hljs-comment">// g.drawImage(image,10,10,698,1060,this);</span><br>    <span class="hljs-comment">//写字</span><br>    g.setColor(Color.red);<br>    g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;隶书&quot;</span>,Font.BOLD,<span class="hljs-number">50</span>));<span class="hljs-comment">//颜色,粗体,大小</span><br>    g.drawString(<span class="hljs-string">&quot;四川你好&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-3-绘制坦克"><a href="#1-3-绘制坦克" class="headerlink" title="1.3 绘制坦克"></a>1.3 绘制坦克</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//坦克类</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tank</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<span class="hljs-comment">//坦克横坐标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y; <span class="hljs-comment">//坦克纵坐标</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">this</span>.y = y;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-comment">//MyPanel类</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> &#123;<br>    <span class="hljs-comment">// 定义我的坦克</span><br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyPanel</span><span class="hljs-params">()</span>&#123;<br>        hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br>        g.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">750</span>);<span class="hljs-comment">//填充矩形, 默认黑色</span><br><br>        <span class="hljs-comment">//画坦克 - 封装到方法</span><br>        drawTank(hero.getX(),hero.getY(),g,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>        drawTank(hero.getX() + <span class="hljs-number">60</span>,hero.getY(),g,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        drawTank(hero.getX() + <span class="hljs-number">120</span>,hero.getY(),g,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>        drawTank(hero.getX() + <span class="hljs-number">180</span>,hero.getY(),g,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>        drawTank(hero.getX() + <span class="hljs-number">240</span>,hero.getY(),g,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 编写方法, 画出坦克</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x  tank左上角x坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y  tank左上角y坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> g  画笔</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> direct   坦克方向 上下左右</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type    类型 (颜色 敌我)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawTank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> direct, <span class="hljs-type">int</span> type)</span>&#123;<br>        <span class="hljs-keyword">switch</span>(type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// 我方坦克</span><br>                g.setColor(Color.cyan);<span class="hljs-comment">//</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//敌方坦克1</span><br>                g.setColor(Color.yellow);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//敌方坦克2</span><br>                g.setColor(Color.red);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//敌方坦克3</span><br>                g.setColor(Color.blue);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//根据方向绘制坦克</span><br>        <span class="hljs-keyword">switch</span> (direct)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                g.fill3DRect(x,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//左边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">30</span>,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//右边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//中间方体</span><br>                g.fillOval( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//圆盖子</span><br>                g.drawLine(x+<span class="hljs-number">20</span>,y+<span class="hljs-number">30</span>,x+<span class="hljs-number">20</span>,y);<span class="hljs-comment">//炮筒</span><br><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;暂时没有处理&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br><br>&#125;<br><span class="hljs-comment">////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">//Hero类</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 自己的坦克</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Tank</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hero</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">super</span>(x, y);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">//主类</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XFTankGame01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-comment">//定义一个MyPanel</span><br>    MyPanel mp;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">XFTankGame01</span> <span class="hljs-variable">xfTankGame01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XFTankGame01</span>();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">XFTankGame01</span><span class="hljs-params">()</span>&#123;<br>        mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPanel</span>();<br>        <span class="hljs-built_in">this</span>.add(mp);<span class="hljs-comment">//把我们的面板(就是绘图区域</span><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">1000</span>,<span class="hljs-number">750</span>);<span class="hljs-comment">//设置窗口大小</span><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="二-Java事件处理"><a href="#二-Java事件处理" class="headerlink" title="二  Java事件处理"></a>二  Java事件处理</h1><p>Java事件处理是采取”委派事件模型”. 当事件发生时, 产生事件的对象, 会把此” 信息 “  传递给” 事件监听者 “ 处理, 这里所说的 “ 信息 “  实际上就是 java.awt.event 事件类库里某个类所创建的对象, 把它称为” 事件的对象 “</p><p><strong>事件源:</strong> 事件源是一个产生事件的对象, 比如按钮, 窗口等</p><p><strong>事件:</strong> 事件就是承载事件源状态改变时的对象, 比如当键盘事件, 鼠标事件, 窗口事件等等, 会产生一个事件对象, 该对象保存着当前事件很多信息, 比如KeyEvent对象有含有被按下键的Code值, java.awt.event 包 和 javax.swing.event 包中定义了各种事件类型</p><h2 id="2-1-小球移动案例"><a href="#2-1-小球移动案例" class="headerlink" title="2.1 小球移动案例"></a>2.1 小球移动案例</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 小球移动案例</span><br><span class="hljs-keyword">package</span> com.hspedu.event_;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.KeyListener;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 演示小球它通过键盘的操作上下左右移动  =====&gt; 讲解Java事件控制</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BallMove</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-type">Mypanel</span> <span class="hljs-variable">mp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BallMove</span> <span class="hljs-variable">ballMove</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BallMove</span>();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BallMove</span><span class="hljs-params">()</span>&#123;<br>        mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mypanel</span>();<br>        <span class="hljs-built_in">this</span>.add(mp);<br>        <span class="hljs-built_in">this</span>.addKeyListener(mp);<span class="hljs-comment">// 监听键盘事件</span><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">400</span>,<span class="hljs-number">300</span>);<br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//KeyListener 是监听器, 监听键盘事件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mypanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span> &#123;<br><br>    <span class="hljs-comment">//为了让小球可以移动, 把它左上角的坐标设置为变量(x, y)</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//定义面板</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span>&#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br>        g.fillOval(x,y,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<span class="hljs-comment">//有字符输出时, 该方法就会触发</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<span class="hljs-comment">//当某个键按下, 该方法会触发</span><br>        <span class="hljs-comment">//根据不同键来处理小球移动</span><br>       <span class="hljs-comment">// System.out.println((char)e.getKeyChar());</span><br><br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_DOWN)&#123;<br>            <span class="hljs-comment">//向下的箭头</span><br>            y += <span class="hljs-number">5</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_UP)&#123;<br>            y -= <span class="hljs-number">5</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_LEFT)&#123;<br>            x -= <span class="hljs-number">5</span> ;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_RIGHT)&#123;<br>            x += <span class="hljs-number">5</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//让面板重绘</span><br>        <span class="hljs-built_in">this</span>.repaint();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<span class="hljs-comment">//当某个键松开, 该方法会触发</span><br><br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="2-2-让坦克动起来"><a href="#2-2-让坦克动起来" class="headerlink" title="2.2 让坦克动起来"></a>2.2 让坦克动起来</h2><p>添加键盘监听</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span> &#123;<br>    <br>     <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_DOWN)&#123;<br>            <span class="hljs-comment">//向下的箭头</span><br>            hero.setDirect(<span class="hljs-number">2</span>);<br>            hero.moveDown();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_UP)&#123;<br>            hero.setDirect(<span class="hljs-number">0</span>);<br>            hero.moveUP();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_LEFT)&#123;<br>            hero.setDirect(<span class="hljs-number">3</span>);<br>            hero.moveLeft();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.getKeyCode() == KeyEvent.VK_RIGHT)&#123;<br>            hero.moveRight();<br>            hero.setDirect(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.repaint();<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="三-线程"><a href="#三-线程" class="headerlink" title="三 线程"></a>三 线程</h1><h2 id="3-1-我方发射子弹"><a href="#3-1-我方发射子弹" class="headerlink" title="3.1 我方发射子弹"></a>3.1 我方发射子弹</h2><p>问题: 如何实现当用户按下J键, 我们的坦克就发射一颗子弹?</p><ol><li>当发射一颗子弹后, 就相当于启动了一个线程</li><li>Hero 有子弹的对象, 当按下J键时, 我们就启动了一个发射行为(线程) , 让子弹不停地移动, 形成一个射击效果</li><li>我们的MyPanel需要不停地重绘子弹, 才能出现该效果</li><li>当子弹移动到面板上的边界时, 就应该销毁(把启动的子弹线程销毁)</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.tankgame3;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 射击子弹</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shot</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">//记录子弹坐标 方向  速度</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-type">int</span> direct;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//记录子弹是否存在</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Shot</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> direct)</span> &#123;<br>        <span class="hljs-built_in">this</span>.x = x;<br>        <span class="hljs-built_in">this</span>.y = y;<br>        <span class="hljs-built_in">this</span>.direct = direct;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//设计行为</span><br>        <span class="hljs-comment">//线程休眠</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-comment">//根据方向改变x,y</span><br>            <span class="hljs-keyword">switch</span> (direct) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    y -= speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    x += speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    y += speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    x -= speed;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;子弹 x = &quot;</span> + x + <span class="hljs-string">&quot; y = &quot;</span> + y);<br><br><br>            <span class="hljs-comment">//当子弹到边界销毁</span><br>            <span class="hljs-keyword">if</span>(!(x&gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt;= <span class="hljs-number">1000</span> &amp;&amp; y&gt;= <span class="hljs-number">0</span>&amp;&amp;y&lt;=<span class="hljs-number">750</span>))&#123;<br>                isLive = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br><br>        &#125;<br><br><br>    &#125;<span class="hljs-comment">//run</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//MyPanel</span><br><br><span class="hljs-keyword">package</span> com.hspedu.tankgame3;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.KeyListener;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span>,Runnable &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">enemyTankSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    Vector&lt;Enemy&gt; enemies = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<span class="hljs-comment">//敌人坦克集合</span><br><br><br><br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 定义我的坦克</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyPanel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; enemyTankSize; i++) &#123;<br>            enemies.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Enemy</span>(<span class="hljs-number">100</span>*(i+<span class="hljs-number">1</span>), <span class="hljs-number">0</span>));<br>        &#125;<br><br><br>        hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>        hero.setSpeed(<span class="hljs-number">30</span>);<br><br>    &#125;<br><br><br><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br>        g.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">750</span>);<span class="hljs-comment">//填充矩形, 默认黑色</span><br><br>        <span class="hljs-comment">//画坦克 - 封装到方法</span><br>        drawTank(hero.getX(),hero.getY(),g,hero.getDirect(),<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(hero.shot != <span class="hljs-literal">null</span> &amp;&amp; hero.shot.isLive == <span class="hljs-literal">true</span>)&#123;<br>            drawBullet(hero.shot.getX(),hero.shot.getY(),g);<br>        &#125;<br><br><br><br><br>        <span class="hljs-comment">//绘制敌方坦克</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; enemyTankSize; i++) &#123;<br>            <span class="hljs-type">Enemy</span> <span class="hljs-variable">enemy</span> <span class="hljs-operator">=</span> enemies.get(i);<br>            enemy.setDirect(<span class="hljs-number">2</span>);<br>            drawTank(enemy.getX(),enemy.getY(),g,enemy.getDirect(),<span class="hljs-number">0</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 编写方法, 画出坦克</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x  tank左上角x坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y  tank左上角y坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> g  画笔</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> direct   坦克方向 上下左右</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type    类型 (颜色 敌我)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawTank</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, Graphics g, <span class="hljs-type">int</span> direct, <span class="hljs-type">int</span> type)</span>&#123;<br>        <span class="hljs-keyword">switch</span>(type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">// 我方坦克</span><br><br>                g.setColor(Color.cyan);<span class="hljs-comment">//</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//敌方坦克1</span><br>                g.setColor(Color.yellow);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//敌方坦克2</span><br>                g.setColor(Color.red);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//敌方坦克3</span><br>                g.setColor(Color.blue);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//根据方向绘制坦克(0,1,2,3)</span><br>        <span class="hljs-keyword">switch</span> (direct)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//向上</span><br>                g.fill3DRect(x,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//左边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">30</span>,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//右边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//中间方体</span><br>                g.fillOval( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//圆盖子</span><br>                g.drawLine(x+<span class="hljs-number">20</span>,y+<span class="hljs-number">30</span>,x+<span class="hljs-number">20</span>,y);<span class="hljs-comment">//炮筒</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//向右</span><br>                g.fill3DRect(x,y,<span class="hljs-number">60</span>,<span class="hljs-number">10</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//上轮子</span><br>                g.fill3DRect( x ,y+ <span class="hljs-number">30</span>,<span class="hljs-number">60</span>,<span class="hljs-number">10</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//下边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">10</span>,<span class="hljs-number">40</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//中间方体</span><br>                g.fillOval( x +<span class="hljs-number">20</span> ,y + <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//圆盖子</span><br>                g.drawLine(x+<span class="hljs-number">30</span>,y+<span class="hljs-number">20</span>,x+<span class="hljs-number">60</span>,y + <span class="hljs-number">20</span>);<span class="hljs-comment">//炮筒</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//向下</span><br>                g.fill3DRect(x,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//左边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">30</span>,y,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//右边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//中间方体</span><br>                g.fillOval( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//圆盖子</span><br>                g.drawLine(x+<span class="hljs-number">20</span>,y+<span class="hljs-number">60</span>,x+<span class="hljs-number">20</span>,y+<span class="hljs-number">30</span>);<span class="hljs-comment">//炮筒</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//向左</span><br>                g.fill3DRect(x,y,<span class="hljs-number">60</span>,<span class="hljs-number">10</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//上轮子</span><br>                g.fill3DRect( x ,y+ <span class="hljs-number">30</span>,<span class="hljs-number">60</span>,<span class="hljs-number">10</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//下边轮子</span><br>                g.fill3DRect( x + <span class="hljs-number">10</span>,y + <span class="hljs-number">10</span>,<span class="hljs-number">40</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//中间方体</span><br>                g.fillOval( x +<span class="hljs-number">20</span> ,y + <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//圆盖子</span><br>                g.drawLine(x,y+<span class="hljs-number">20</span>,x+<span class="hljs-number">30</span>,y + <span class="hljs-number">20</span>);<span class="hljs-comment">//炮筒</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;暂时没有处理&quot;</span>);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawBullet</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y,Graphics g)</span>&#123;<br>        g.fillOval(x-<span class="hljs-number">2</span>,y,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br>      <span class="hljs-comment">//  this.repaint();</span><br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_DOWN || e.getKeyCode() == KeyEvent.VK_S) &#123;<br>            <span class="hljs-comment">//向下的箭头</span><br>            hero.setDirect(<span class="hljs-number">2</span>);<br>            hero.moveDown();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_W) &#123;<br>            hero.setDirect(<span class="hljs-number">0</span>);<br>            hero.moveUP();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_LEFT || e.getKeyCode() == KeyEvent.VK_A) &#123;<br>            hero.setDirect(<span class="hljs-number">3</span>);<br>            hero.moveLeft();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_RIGHT || e.getKeyCode() == KeyEvent.VK_D) &#123;<br>            hero.moveRight();<br>            hero.setDirect(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">//如果用户按下J 键 就开启射击线程</span><br>        <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_J) &#123;<br>            hero.shotEnemyTank();<br>        &#125;<br><br>     <span class="hljs-comment">//   this.repaint();</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-built_in">this</span>.repaint();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//Hero</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame3;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 自己的坦克</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Tank</span> &#123;<br>    <span class="hljs-comment">//定义一个Shot对象</span><br>    <span class="hljs-type">Shot</span> <span class="hljs-variable">shot</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hero</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-built_in">super</span>(x, y);<br>    &#125;<br><br>    <span class="hljs-comment">//设计一个射击方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shotEnemyTank</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建shot, 根据Hero 对象的当前位置创建Shot</span><br>        <span class="hljs-keyword">switch</span> (getDirect())&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                shot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shot</span>(getX()+<span class="hljs-number">20</span>,getY(),<span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                shot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shot</span>(getX() + <span class="hljs-number">60</span>,getY() +<span class="hljs-number">20</span> ,<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                shot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shot</span>(getX()+<span class="hljs-number">20</span>,getY()+<span class="hljs-number">60</span>,<span class="hljs-number">2</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                shot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shot</span>(getX(),getY() + <span class="hljs-number">20</span>,<span class="hljs-number">3</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//启动Shot线程</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(shot).start();<br>    &#125;<span class="hljs-comment">//shotEnemyTank()</span><br><br><br>&#125;<br><span class="hljs-comment">// Mian</span><br><span class="hljs-keyword">package</span> com.hspedu.tankgame3;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XFTankGame03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-comment">//定义一个MyPanel</span><br>    MyPanel mp;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">XFTankGame03</span> <span class="hljs-variable">xfTankGame01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XFTankGame03</span>();<br><br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">XFTankGame03</span><span class="hljs-params">()</span>&#123;<br>        mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPanel</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mp).start();<span class="hljs-comment">//启动 MyPanel 线程</span><br>        <span class="hljs-built_in">this</span>.add(mp);<span class="hljs-comment">//把我们的面板(就是绘图区域</span><br><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">1000</span>,<span class="hljs-number">750</span>);<span class="hljs-comment">//设置窗口大小</span><br><br>        <span class="hljs-built_in">this</span>.addKeyListener(mp);<span class="hljs-comment">//监听对象</span><br><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="3-2-多线程-坦克大战-4-0"><a href="#3-2-多线程-坦克大战-4-0" class="headerlink" title="3.2 多线程 - 坦克大战 4.0"></a>3.2 多线程 - 坦克大战 4.0</h2><p>增加功能: </p><ol><li>让敌人坦克也能够发射子弹 (可以有多个子弹)<ul><li>在敌人坦克类, 使用Vector保存多个Shot</li><li>当每创建敌人坦克时, 就给其初始化一个Shot对象, 同时启动它</li><li>当敌人坦克子弹碰到边界销毁</li></ul></li><li>当我方坦克击中敌人坦克时, 敌人坦克消失</li><li>让敌人的坦克也可以自由随机的上下左右移动</li><li>控制我方坦克和敌人坦克在规定的范围移动</li></ol><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p><img src="/2022/03/05/%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20220322200904631.png" alt="image-20220322200904631"></p>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
          <category> 坦克大战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 坦克大战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型</title>
      <link href="/2022/03/05/%E6%B3%9B%E5%9E%8B/"/>
      <url>/2022/03/05/%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-泛型引入"><a href="#1-泛型引入" class="headerlink" title="1 泛型引入"></a>1 泛型引入</h1><ul><li>先看一个需求<ol><li>请编写一个程序, 在ArrayList中, 添加3个Dog对象</li><li>Dog对象含有name 和age, 并输出 name 和 age </li><li>使用传统方法</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericIntroduction</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小黄&quot;</span>, <span class="hljs-number">3</span>));<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小白&quot;</span>, <span class="hljs-number">5</span>));<br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小黑&quot;</span>, <span class="hljs-number">4</span>));<br>        <span class="hljs-comment">//加入不小心加入了一只 Cat 类</span><br>        arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;小黑&quot;</span>, <span class="hljs-number">4</span>));<span class="hljs-comment">//后续转型会抛出异常</span><br>        <br>        <span class="hljs-keyword">for</span> (Object o :arrayList) &#123;<br>            <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog)o;<br><br>            System.out.println(dog.getName() +<span class="hljs-string">&quot;  &quot;</span>+  dog.getAge());<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>&#123;<br>    <span class="hljs-keyword">private</span> String name ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&quot;</span> + name +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>使用传统方法的问题分析</li></ul><ol><li>不能对加入到集合Array LIst 中的数据类型进行约束(不安全)</li><li>遍历的时候, 需要进行类型转换, 如果集合中的数据量较大, 对效率有影响</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">      <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; &#123;&#125;<span class="hljs-comment">//E称为泛型, 那么Dog---&gt; E</span><br>ArrayList&lt;Dog&gt; dogs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Dog&gt;();<span class="hljs-comment">// 表示这个集合只能存放Dog类及其子类</span><br>      <span class="hljs-comment">//如果添加其他类型就会报错</span><br>      <span class="hljs-comment">//遍历的时候可以直接取出Dog类, 而不是Object</span><br><br></code></pre></div></td></tr></table></figure><h2 id="泛型介绍"><a href="#泛型介绍" class="headerlink" title="泛型介绍"></a>泛型介绍</h2><p>一种广泛的类型.    表示一种数据类型的数据类型</p><ol><li>泛型又称参数化类型, 是jdk5.0出现的新特性, 解决数据类型的安全性问题</li><li>在类声明或实例化时只要指定好需要的具体的类型即可</li><li>Java泛型可以保证如果程序在编译时没有警告, 运行时就不会产生类型转换异常. 同时代码更加简洁, 健壮</li><li>泛型的作用是: 可以在类声明时通过一个标识表示类中某个属性的类型, 或者是某个方法的返回值的类型, 或者是参数类型.</li></ol><h1 id="2-泛型语法"><a href="#2-泛型语法" class="headerlink" title="2 泛型语法"></a>2 泛型语法</h1><h2 id="2-1-泛型的声明"><a href="#2-1-泛型的声明" class="headerlink" title="2.1 泛型的声明"></a>2.1 泛型的声明</h2><p><code>interface 接口&lt;T&gt; &#123;&#125;</code> 和 <code>class 类&lt;K,V&gt; &#123; &#125;</code>&#x2F;&#x2F;比如List 和 ArrayList</p><p>说明: </p><div class="hljs code-wrapper"><pre><code class="hljs">1. 其中, T, K, V 不代表值, 而是表示类型1. 任意字母都可以. 常用T表示, 是Type的缩写</code></pre></div><h2 id="2-2-泛型的实例化"><a href="#2-2-泛型的实例化" class="headerlink" title="2.2 泛型的实例化"></a>2.2 泛型的实例化</h2><p>要在类名后面指定类型参数的值(类型) 如：　</p><ol><li>List<String> strList &#x3D; new ArrayList<String>( )</String></String></li><li>Iterator<Customer> iterator &#x3D; customers.iteretor();</Customer></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">HashMap&lt;String, Student&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">3</span>));<br>map.put(<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">30</span>));<br>map.put(<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">80</span>));<br>map.put(<span class="hljs-string">&quot;诸葛亮&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;诸葛亮&quot;</span>, <span class="hljs-number">90</span>));<br><br>Set&lt;String&gt; set1 = map.keySet();<br>Set&lt;Map.Entry&lt;String, Student&gt;&gt; entries = map.entrySet();<br>Iterator&lt;String&gt; iterator1 = set1.iterator();<br><span class="hljs-keyword">while</span> (iterator1.hasNext()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span>  iterator1.next();<br>    System.out.println(<span class="hljs-string">&quot;HashMap = &quot;</span>+ next);<br>&#125;<br><span class="hljs-keyword">for</span> (String  s : set1) &#123;<br>    System.out.println(<span class="hljs-string">&quot;HashMap - I = &quot;</span> + map.get(s).age + map.get(s).name);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-3-泛型的注意事项和细节"><a href="#2-3-泛型的注意事项和细节" class="headerlink" title="2.3 泛型的注意事项和细节"></a>2.3 泛型的注意事项和细节</h2><ol><li><p>interface List<T> {} , public class HashSet<E>{ }…等</E></T></p><p>T, E 只能是引用类型.         不能是基本数据类型</p></li><li><p>在指定泛型具体类型后, 可以传入该类型或其子类类型    </p></li><li><p>如果是  List list &#x3D; new ArrayList();   则默认给其泛型为 E&#x3D; Object</p></li><li><p><strong>简化形式    编译器会自动进行类型推断         (推荐写法)</strong></p><p>List<String>  list &#x3D; new List&lt;&gt;();  &#x2F;&#x2F; 后面就不用再写String</String></p></li></ol><h1 id="3-自定义泛型💥"><a href="#3-自定义泛型💥" class="headerlink" title="3 自定义泛型💥"></a>3 自定义泛型💥</h1><p>基本语法:  interface List&lt;T, R, Y…&gt; {} , public class 类名&lt;E, T, V…&gt;{ }</p><p><strong>注意细节</strong></p><ol><li>普通成员可以使用泛型(属性, 方法)</li><li>使用泛型的数组, 不能初始化</li><li>静态方法中不能使用类的泛型</li><li>泛型的类型, 是在创建对象时确定的(因为创建对象时, 需要指定确定类型)</li><li>如果在创建对象时, 没有指定类型, 默认为Object</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//普通类中定义泛型方法 . 在泛型类中也可以这样创建</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> &lt;T, R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(T t, T r)</span>&#123;<span class="hljs-comment">//泛型方法    </span><br><br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//使用method</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>a.method(<span class="hljs-string">&quot;你好&quot;</span>, <span class="hljs-number">1234</span>);<span class="hljs-comment">/// 编译器自动识别是什么类型, 基本类型会自动装箱</span><br><br><br><span class="hljs-comment">//注意区分泛型方法 与 使用泛型的方法</span><br><span class="hljs-comment">// 泛型方法  使用了&lt;T, R...&gt; 修饰方法</span><br><span class="hljs-comment">//使用泛型方法   使用了是类声明的泛型</span><br><br></code></pre></div></td></tr></table></figure><h1 id="4-泛型继承和通配符"><a href="#4-泛型继承和通配符" class="headerlink" title="4 泛型继承和通配符"></a>4 泛型继承和通配符</h1><ol><li><p>泛型不具备继承性</p><p>LIst<Object> list &#x3D; new ArrayList<String>();&#x2F;&#x2F; 这样的写法是错误的</String></Object></p></li><li><?>: 支持任意泛型类</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Car&lt;?,?&gt; car = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>&lt;String,Integer&gt;();<br>Car&lt;?,?&gt; car1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>&lt;Object,Integer&gt;();<br></code></pre></div></td></tr></table></figure><ol start="3"><li>&lt; ? extends A&gt; : 支持A类及A类的子类, 规定了泛型的上限</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Car&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AA</span> , ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BB</span>&gt; car2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>&lt;BB, CC&gt;();<br></code></pre></div></td></tr></table></figure><ol start="4"><li>&lt; ? super A&gt; : 支持A类以及A的父类, 不限制直接父类. 规范了泛型的下限</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Car&lt;? <span class="hljs-built_in">super</span> BB, ? <span class="hljs-built_in">super</span> CC&gt; car3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>&lt;AA , CC&gt;();<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新版数据连接操作出现的bug</title>
      <link href="/2022/03/04/%E6%96%B0%E7%89%88%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E5%87%BA%E7%8E%B0%E7%9A%84bug/"/>
      <url>/2022/03/04/%E6%96%B0%E7%89%88%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E5%87%BA%E7%8E%B0%E7%9A%84bug/</url>
      
        <content type="html"><![CDATA[<h1 id="新版数据库连接操作中url需要修改的地方"><a href="#新版数据库连接操作中url需要修改的地方" class="headerlink" title="新版数据库连接操作中url需要修改的地方"></a>新版数据库连接操作中url需要修改的地方</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在学习JDBC时，根据黑马的视频教学进行操作，然鹅在进行数据库连接的时候失败了，苦苦寻求解决方案，一直未果，幸运的是得到群友的帮助，才让我这个小白免受了这个bug的蹂躏。</p><p>教学的操作代码如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 蓝鸟x</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * JDBC 快速入门</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/24 - 12:50</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbcJDBCDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1. 注册驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><br>        <span class="hljs-comment">//2. 获取连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/hsp_db03?useSSL=false&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;  <span class="hljs-comment">//</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hsp&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;connection&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br><br>        <span class="hljs-comment">//3. 定义sql语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update emp set sal = 2000 where ename = &#x27;smith&#x27;;&quot;</span>;<br><br>        <span class="hljs-comment">//4. 获取执行sql的对象Statement</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br><br>        <span class="hljs-comment">//5. 执行sql</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql); <span class="hljs-comment">// 返回影响的行数 --&gt; 一行被改变</span><br><br>        <span class="hljs-comment">//6. 结果处理</span><br>        System.out.println(<span class="hljs-string">&quot;改变的行数&quot;</span> + count);<br><br>        <span class="hljs-comment">//7. 释放资源</span><br>        stmt.close();<br>        conn.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>报错信息如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">E:\Program\hspjdk8\bin\java.exe <span class="hljs-string">&quot;-javaagent:D:\Program Files\IntelliJ IDEA 2021.3.2\lib\idea_rt.jar=55040:D:\Program Files\IntelliJ IDEA 2021.3.2\bin&quot;</span> -Dfile.encoding=UTF-<span class="hljs-number">8</span> -classpath E:\Program\hspjdk8\jre\lib\charsets.jar;E:\Program\hspjdk8\jre\lib\deploy.jar;E:\Program\hspjdk8\jre\lib\ext\access-bridge-<span class="hljs-number">64.</span>jar;E:\Program\hspjdk8\jre\lib\ext\cldrdata.jar;E:\Program\hspjdk8\jre\lib\ext\dnsns.jar;E:\Program\hspjdk8\jre\lib\ext\jaccess.jar;E:\Program\hspjdk8\jre\lib\ext\jfxrt.jar;E:\Program\hspjdk8\jre\lib\ext\localedata.jar;E:\Program\hspjdk8\jre\lib\ext\nashorn.jar;E:\Program\hspjdk8\jre\lib\ext\sunec.jar;E:\Program\hspjdk8\jre\lib\ext\sunjce_provider.jar;E:\Program\hspjdk8\jre\lib\ext\sunmscapi.jar;E:\Program\hspjdk8\jre\lib\ext\sunpkcs11.jar;E:\Program\hspjdk8\jre\lib\ext\zipfs.jar;E:\Program\hspjdk8\jre\lib\javaws.jar;E:\Program\hspjdk8\jre\lib\jce.jar;E:\Program\hspjdk8\jre\lib\jfr.jar;E:\Program\hspjdk8\jre\lib\jfxswt.jar;E:\Program\hspjdk8\jre\lib\jsse.jar;E:\Program\hspjdk8\jre\lib\management-agent.jar;E:\Program\hspjdk8\jre\lib\plugin.jar;E:\Program\hspjdk8\jre\lib\resources.jar;E:\Program\hspjdk8\jre\lib\rt.jar;F:\User\Desktop\Projects\jdbc\out\production\jdbc_demo;F:\User\Desktop\Projects\jdbc\jdbc_demo\lib\mysql-connector-java-<span class="hljs-number">5.1</span><span class="hljs-number">.48</span>.jar com.itheima.jdbcJDBCDemo<br>connection<br>Thu Mar <span class="hljs-number">24</span> <span class="hljs-number">15</span>:<span class="hljs-number">10</span>:<span class="hljs-number">27</span> CST <span class="hljs-number">2022</span> WARN: Establishing SSL connection without server<span class="hljs-string">&#x27;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#x27;</span>t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to <span class="hljs-string">&#x27;false&#x27;</span>. You need either to explicitly disable SSL by setting useSSL=<span class="hljs-literal">false</span>, or set useSSL=<span class="hljs-literal">true</span> and provide truststore <span class="hljs-keyword">for</span> server certificate verification.<br>Exception in thread <span class="hljs-string">&quot;main&quot;</span> com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure<br><br>The last packet successfully received from the server was <span class="hljs-number">945</span> milliseconds ago.  The last packet sent successfully to the server was <span class="hljs-number">937</span> milliseconds ago.<br>at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="hljs-number">62</span>)<br>at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="hljs-number">45</span>)<br>at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="hljs-number">423</span>)<br>at com.mysql.jdbc.Util.handleNewInstance(Util.java:<span class="hljs-number">425</span>)<br>at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:<span class="hljs-number">990</span>)<br>at com.mysql.jdbc.ExportControlled.transformSocketToSSLSocket(ExportControlled.java:<span class="hljs-number">201</span>)<br>at com.mysql.jdbc.MysqlIO.negotiateSSLConnection(MysqlIO.java:<span class="hljs-number">4869</span>)<br>at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:<span class="hljs-number">1656</span>)<br>at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:<span class="hljs-number">1217</span>)<br>at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:<span class="hljs-number">2189</span>)<br>at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:<span class="hljs-number">2220</span>)<br>at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:<span class="hljs-number">2015</span>)<br>at com.mysql.jdbc.ConnectionImpl.&lt;init&gt;(ConnectionImpl.java:<span class="hljs-number">768</span>)<br>at com.mysql.jdbc.JDBC4Connection.&lt;init&gt;(JDBC4Connection.java:<span class="hljs-number">47</span>)<br>at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="hljs-number">62</span>)<br>at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="hljs-number">45</span>)<br>at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="hljs-number">423</span>)<br>at com.mysql.jdbc.Util.handleNewInstance(Util.java:<span class="hljs-number">425</span>)<br>at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:<span class="hljs-number">385</span>)<br>at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:<span class="hljs-number">323</span>)<br>at java.sql.DriverManager.getConnection(DriverManager.java:<span class="hljs-number">664</span>)<br>at java.sql.DriverManager.getConnection(DriverManager.java:<span class="hljs-number">247</span>)<br>at com.itheima.jdbcJDBCDemo.main(jdbcJDBCDemo.java:<span class="hljs-number">23</span>)<br>Caused by: javax.net.ssl.SSLHandshakeException: No appropriate <span class="hljs-title function_">protocol</span> <span class="hljs-params">(protocol is disabled or cipher suites are inappropriate)</span><br>at sun.security.ssl.HandshakeContext.&lt;init&gt;(HandshakeContext.java:<span class="hljs-number">171</span>)<br>at sun.security.ssl.ClientHandshakeContext.&lt;init&gt;(ClientHandshakeContext.java:<span class="hljs-number">106</span>)<br>at sun.security.ssl.TransportContext.kickstart(TransportContext.java:<span class="hljs-number">237</span>)<br>at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:<span class="hljs-number">405</span>)<br>at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:<span class="hljs-number">384</span>)<br>at com.mysql.jdbc.ExportControlled.transformSocketToSSLSocket(ExportControlled.java:<span class="hljs-number">186</span>)<br>... <span class="hljs-number">18</span> more<br><br>Process finished with exit code <span class="hljs-number">1</span><br> <br><br></code></pre></div></td></tr></table></figure><p>其中旧版的数据库连接应该是如下的url</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/hsp_db0”;</span><br></code></pre></div></td></tr></table></figure><p>但是新版数据库应该修改为</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/hsp_db03?useSSL=false&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>运行结果</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">connection<br>改变的行数<span class="hljs-number">1</span><br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>问题得到完美解决😁😁😁</p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> JDBC </tag>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户登录</title>
      <link href="/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95)/"/>
      <url>/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="一、功能说明"><a href="#一、功能说明" class="headerlink" title="一、功能说明"></a>一、功能说明</h1><p>初始阶段先用HashMap来存放用户名和密码，快速实现所有功能，后期再使用MySQL对所有的数据处理进行优化</p><h1 id="二、思路分析-程序框架图"><a href="#二、思路分析-程序框架图" class="headerlink" title="二、思路分析 + 程序框架图"></a>二、思路分析 + 程序框架图</h1><p>将客户端用户信息和服务端用户的信息分别封装成User类和Message类，在传输过程中实现对象的序列化 </p><p><img src="/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95)/image-20220330222014120.png" alt="image-20220330222014120"></p><h1 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h1><h2 id="3-1-消息类型接口"><a href="#3-1-消息类型接口" class="headerlink" title="3.1 消息类型接口"></a>3.1 消息类型接口</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.common;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消息类型</span><br><span class="hljs-comment"> * 接口中定义一些常量，用来表示不同的消息类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>; <span class="hljs-comment">//表示登录成功</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span>; <span class="hljs-comment">//表示登录失败</span><br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-2-用户类"><a href="#3-2-用户类" class="headerlink" title="3.2 用户类"></a>3.2 用户类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.common;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 表示一个用户的信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//增强兼容性</span><br>     <span class="hljs-keyword">private</span> String userId;<br>     <span class="hljs-keyword">private</span> String password;<br><br>     <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserId</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-keyword">return</span> userId;<br>     &#125;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserId</span><span class="hljs-params">(String userId)</span> &#123;<br>          <span class="hljs-built_in">this</span>.userId = userId;<br>     &#125;<br><br>     <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-keyword">return</span> password;<br>     &#125;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>          <span class="hljs-built_in">this</span>.password = password;<br>     &#125;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String userId, String password)</span> &#123;<br>          <span class="hljs-built_in">this</span>.userId = userId;<br>          <span class="hljs-built_in">this</span>.password = password;<br>     &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="3-3-消息类"><a href="#3-3-消息类" class="headerlink" title="3.3 消息类"></a>3.3 消息类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.common;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 聊天信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String sender;<br>    <span class="hljs-keyword">private</span> String getter;<br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-keyword">private</span> String sendTime;<br>    <span class="hljs-keyword">private</span> String mesType;<span class="hljs-comment">//消息类型  可以在接口中定义多个接口类型</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMesType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mesType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMesType</span><span class="hljs-params">(String mesType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mesType = mesType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSender</span><span class="hljs-params">(String sender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender = sender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGetter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getter;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGetter</span><span class="hljs-params">(String getter)</span> &#123;<br>        <span class="hljs-built_in">this</span>.getter = getter;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSendTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sendTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSendTime</span><span class="hljs-params">(String sendTime)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sendTime = sendTime;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="3-4-一级与二级菜单-–-用户登录"><a href="#3-4-一级与二级菜单-–-用户登录" class="headerlink" title="3.4 一级与二级菜单 – 用户登录"></a>3.4 一级与二级菜单 – 用户登录</h2><p>采集用户输入信息我们这里使用房屋出租系统使用的工具类Utiles类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.client.utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 工具类的作用:</span><br><span class="hljs-comment"> 处理各种情况的用户输入，并且能够按照程序员的需求，得到用户的控制台输入。</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Utility</span> &#123;<br>    <span class="hljs-comment">//静态属性。。。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的一个菜单选项，值：1——5的范围</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 1——5</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readMenuSelection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//包含一个字符的字符串</span><br>            c = str.charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//将字符串转换成字符char类型</span><br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp;<br>                    c != <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;5&#x27;</span>) &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的一个字符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 一个字符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readChar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//就是一个字符</span><br>        <span class="hljs-keyword">return</span> str.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的一个字符，如果直接按回车，则返回指定的默认值；否则返回输入的那个字符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultValue 指定的默认值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 默认值或输入的字符</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readChar</span><span class="hljs-params">(<span class="hljs-type">char</span> defaultValue)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<span class="hljs-comment">//要么是空字符串，要么是一个字符</span><br>        <span class="hljs-keyword">return</span> (str.length() == <span class="hljs-number">0</span>) ? defaultValue : str.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的整型，长度小于10位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 整数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readInt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">10</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//一个整数，长度&lt;=10位</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                n = Integer.parseInt(str);<span class="hljs-comment">//将字符串转换成整数</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.print(<span class="hljs-string">&quot;数字输入错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的 整数或默认值，如果直接回车，则返回默认值，否则返回输入的整数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultValue 指定的默认值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 整数或默认值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readInt</span><span class="hljs-params">(<span class="hljs-type">int</span> defaultValue)</span> &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">10</span>, <span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">if</span> (str.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> defaultValue;<br>            &#125;<br><br>            <span class="hljs-comment">//异常处理...</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                n = Integer.parseInt(str);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.print(<span class="hljs-string">&quot;数字输入错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的指定长度的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 限制的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 指定长度的字符串</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">(<span class="hljs-type">int</span> limit)</span> &#123;<br>        <span class="hljs-keyword">return</span> readKeyBoard(limit, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的指定长度的字符串或默认值，如果直接回车，返回默认值，否则返回字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 限制的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultValue 指定的默认值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 指定长度的字符串</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, String defaultValue)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(limit, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> str.equals(<span class="hljs-string">&quot;&quot;</span>)? defaultValue : str;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的确认选项，Y或N</span><br><span class="hljs-comment">     * 将小的功能，封装到一个方法中.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Y或N</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readConfirmSelection</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入你的选择(Y/N): 请小心选择&quot;</span>);<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<span class="hljs-comment">//无限循环</span><br>            <span class="hljs-comment">//在这里，将接受到字符，转成了大写字母</span><br>            <span class="hljs-comment">//y =&gt; Y n=&gt;N</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>).toUpperCase();<br>            c = str.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;Y&#x27;</span> || c == <span class="hljs-string">&#x27;N&#x27;</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能： 读取一个字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 读取的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> blankReturn 如果为true ,表示 可以读空字符串。</span><br><span class="hljs-comment">     *   如果为false表示 不能读空字符串。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *如果输入为空，或者输入大于limit的长度，就会提示重新输入。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readKeyBoard</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, <span class="hljs-type">boolean</span> blankReturn)</span> &#123;<br><br>        <span class="hljs-comment">//定义了字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-comment">//scanner.hasNextLine() 判断有没有下一行</span><br>        <span class="hljs-keyword">while</span> (scanner.hasNextLine()) &#123;<br>            line = scanner.nextLine();<span class="hljs-comment">//读取这一行</span><br><br>            <span class="hljs-comment">//如果line.length=0, 即用户没有输入任何内容，直接回车</span><br>            <span class="hljs-keyword">if</span> (line.length() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (blankReturn) <span class="hljs-keyword">return</span> line;<span class="hljs-comment">//如果blankReturn=true,可以返回空串</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//如果blankReturn=false,不接受空串，必须输入内容</span><br>            &#125;<br><br>            <span class="hljs-comment">//如果用户输入的内容大于了 limit，就提示重写输入</span><br>            <span class="hljs-comment">//如果用户如的内容 &gt;0 &lt;= limit ,我就接受</span><br>            <span class="hljs-keyword">if</span> (line.length() &lt; <span class="hljs-number">1</span> || line.length() &gt; limit) &#123;<br>                System.out.print(<span class="hljs-string">&quot;输入长度（不能大于&quot;</span> + limit + <span class="hljs-string">&quot;）错误，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> line;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></div></td></tr></table></figure><p>登录界面代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.client.view;<br><br><span class="hljs-keyword">import</span> com.hspedu.client.utils.Utility;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * 客户端菜单界面、登录界面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">View</span> &#123;<br><span class="hljs-comment">//    显示主菜单</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//控制是否显示菜单</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 用于接收用户的键盘输入</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//主方法测试菜单</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>().mainMenu();<br>        System.out.println(<span class="hljs-string">&quot;客户端退出系统&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mainMenu</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(loop)&#123;<br>            System.out.println(<span class="hljs-string">&quot;========欢迎登录网络通讯系统========&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t 1 登录系统&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t 9 退出系统&quot;</span>);<br><br>            System.out.print(<span class="hljs-string">&quot;请输入你的选择：&quot;</span>);<br>            key = Utility.readString(<span class="hljs-number">1</span>);<span class="hljs-comment">//读取一个字符串</span><br><br><br>            <span class="hljs-comment">//根据用户输入处理不同的逻辑</span><br>            <span class="hljs-keyword">switch</span>(key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span> :<br>                    System.out.print(<span class="hljs-string">&quot;请输入用户号：&quot;</span>);<span class="hljs-comment">//先简化模拟登录</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>                    System.out.print(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>                    System.out.println();<span class="hljs-comment">//行间隔</span><br><br>                    <span class="hljs-comment">//构建用户User类对象，发送到服务端验证个人信息</span><br><br>                    <span class="hljs-comment">//代码、、</span><br><br>                    <span class="hljs-comment">//根据服务端返回结果进行判断，然后进行登录界面的显示</span><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//假设验证成功</span><br>                        System.out.println(<span class="hljs-string">&quot;========欢迎 &quot;</span> + userId + <span class="hljs-string">&quot;========&quot;</span>);<br>                        <span class="hljs-comment">//进入二级菜单</span><br>                        <span class="hljs-keyword">while</span>(loop)&#123;<br>                            System.out.println(<span class="hljs-string">&quot;\n======== 网络通讯系统二级菜单 （用户：&quot;</span>+userId + <span class="hljs-string">&quot; ========&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 1 显示在线用户列表&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 2 群发消息&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 3 私聊消息&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 4 发送文件&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t 9 退出系统文件&quot;</span>);<br>                            System.out.print(<span class="hljs-string">&quot;请输入你的选择：&quot;</span>);<br>                            key = Utility.readString(<span class="hljs-number">1</span>);<br>                            <span class="hljs-keyword">switch</span> (key)&#123;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;显示在线用户列表&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br><br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;群发消息&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;私聊消息&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;文件传输&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;成功退出&quot;</span>);<br>                                    loop = <span class="hljs-literal">false</span>;<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">default</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;输入有误，请重新输入&quot;</span>);<br><br>                            &#125;<br><br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;登录失败，请重新登录&quot;</span>);<br>                    &#125;<br><br><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;退出系统&quot;</span>);<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入有误，请重新输入&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h2 id="3-5-用户登录验证和用户注册功能"><a href="#3-5-用户登录验证和用户注册功能" class="headerlink" title="3.5 用户登录验证和用户注册功能"></a>3.5 用户登录验证和用户注册功能</h2><p><strong>客户端服务类</strong>：checkUser（）方法，用于和服务器连接，并返回用户的信息是否在服务端存在</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.client.service;<br><br><span class="hljs-keyword">import</span> com.hspedu.common.Message;<br><span class="hljs-keyword">import</span> com.hspedu.common.MessageType;<br><span class="hljs-keyword">import</span> com.hspedu.common.User;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022</span><br><span class="hljs-comment"> * 客户端服务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserClientService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<span class="hljs-comment">//因为我们可能在其他地方使用user信息，所以设置为成员属性</span><br><br>    <span class="hljs-comment">//因为Socket在其他地方也要使用，所以将之作为成员属性</span><br>    <span class="hljs-keyword">private</span> Socket socket;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证用户登录的信息是否有效</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUser</span><span class="hljs-params">(String userId, String password)</span>&#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        user.setUserId(userId);<br>        user.setPassword(password);<br><br>        <span class="hljs-comment">//连接到服务端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">9999</span>);<br>            <span class="hljs-comment">//获取对象流，objectoutputStream</span><br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>            oos.writeObject(user);<span class="hljs-comment">//发送user对象</span><br><br>            <span class="hljs-comment">//获取服务端回送的Message对象</span><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> (Message)ois.readObject();<br><br>            <span class="hljs-keyword">if</span>(ms.getMesType().equals(MessageType.MESSAGE_LOGIN_SUCCEED))&#123;<span class="hljs-comment">//登录成功</span><br>                b = <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">//登录成功，则由一个线程来维护一个socket，一直持有这个线程，用于和服务端保持通讯</span><br>                <span class="hljs-comment">//由此得知需要创建一个线程类，来保持socket进行客户端和服务端进行通信，clientconnectserverThread</span><br>                <span class="hljs-type">ClientConnectServerThread</span> <span class="hljs-variable">clientConnectServerThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientConnectServerThread</span>(socket);<br>                clientConnectServerThread.start();<br>                <span class="hljs-comment">//为了扩展客户端， 将线程放入集合中进行管理</span><br><br><br><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br><br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span>  b;<br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>用一个线程来持有客户端的一个socket，该socket与服务器保持连接</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.client.service;<br><br><span class="hljs-keyword">import</span> com.hspedu.common.Message;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientConnectServerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">//该线程需要持有Socket</span><br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-comment">//接收socket对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThread</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 因为此线程需要一直读取服务端发来的信息</span><br><span class="hljs-comment">     * 在后台和服务器通讯，用while(true)持续监听</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//正常情况，不停读socket的输入流，保证随时能收到消息</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;客户端等待服务器端的数据&quot;</span>);<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message)ois.readObject();<span class="hljs-comment">//如果服务器没有发送Message对象，则会阻塞在这里</span><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//为了方便获取socket对象，设置get方法</span><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">getSocket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socket;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>用一个自建的集合类，来存放用户端的线程</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.client.service;<br><br><span class="hljs-keyword">import</span> com.hspedu.common.Message;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientConnectServerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">//该线程需要持有Socket</span><br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-comment">//接收socket对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThread</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 因为此线程需要一直读取服务端发来的信息</span><br><span class="hljs-comment">     * 在后台和服务器通讯，用while(true)持续监听</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//正常情况，不停读socket的输入流，保证随时能收到消息</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;客户端等待服务器端的数据&quot;</span>);<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message)ois.readObject();<span class="hljs-comment">//如果服务器没有发送Message对象，则会阻塞在这里</span><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//为了方便获取socket对象，设置get方法</span><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">getSocket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socket;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="3-6-服务端接收用户登录信息并处理"><a href="#3-6-服务端接收用户登录信息并处理" class="headerlink" title="3.6 服务端接收用户登录信息并处理"></a>3.6 服务端接收用户登录信息并处理</h2><p>服务端在一个端口持续监听，将从socket的输入流中读取的User对象与数据库数据进行验证，验证通过后就创建一个线程，让这个线程持有此scoket,然后不停监听，将监听到的Message对象进行处理</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.server.service;<br><br><span class="hljs-keyword">import</span> com.hspedu.common.Message;<br><span class="hljs-keyword">import</span> com.hspedu.common.MessageType;<br><span class="hljs-keyword">import</span> com.hspedu.common.User;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 这是服务器， 在监听9999端口 ，等待客户端的连接，并保持通讯</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Server</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-comment">//端口可以写在一个配置文件中</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;服务端在端口9999监听&quot;</span>);<br>            ss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br><br>            <span class="hljs-comment">//客户端应当在9999端口持续监听， 以提供服务</span><br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//当和某个客户端建立连接后，会继续监听，因此while循环</span><br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br>                <span class="hljs-comment">//得到socket对象关联的输入流</span><br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)ois.readObject();<span class="hljs-comment">//读取客户端发送的User对象</span><br>                <span class="hljs-comment">//创建一个Message对象，准备回复客户端</span><br>                <span class="hljs-type">Message</span> <span class="hljs-variable">messagee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<span class="hljs-comment">//因为无论成功还是失败，都需要给用户发送信息，所以这里定义在ifelse外边</span><br>                <span class="hljs-comment">//验证用户信息  先死后活， 先锁定用户信息，后面用集合 最后用数据库替换</span><br>                <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<span class="hljs-comment">//获得输出流，用于回传给客户端Message对象</span><br>                <span class="hljs-keyword">if</span>(user.getUserId().equals(<span class="hljs-string">&quot;100&quot;</span>) &amp;&amp; user.getPassword().equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>                    <span class="hljs-comment">//登录验证通过</span><br>                    messagee.setMesType(MessageType.MESSAGE_LOGIN_SUCCEED);<br>                    oos.writeObject(messagee);<br>                    <span class="hljs-comment">//创建一个线程，该线程持有socket，保持与客户端的通信</span><br>                    <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">serverConnectClientThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerConnectClientThread</span>(socket, user.getUserId());<br>                    serverConnectClientThread.start();<span class="hljs-comment">//启动一个线程</span><br>                    <span class="hljs-comment">//把该线程对象放入到一个集合中，进行管理</span><br>                    <br><br><br>                &#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//登录失败</span><br>message.setMessageType(MesssageType.MESSAGE_TYPE_LOGIN_FILE);<br>                    oos.writeObject(message);<br>                    socket.close;<br>                &#125;<br><br>            &#125;<br><br><br><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>ss.close;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>服务端连接保持线程类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.server.service;<br><br><span class="hljs-keyword">import</span> com.hspedu.common.Message;<br><span class="hljs-keyword">import</span> com.hspedu.common.User;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 该类某个对象，保持和客户端的一个通信</span><br><span class="hljs-comment"> * 一个对象持有一个socket，保证点对点服务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerConnectClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">private</span> String userId;<span class="hljs-comment">//用户id，表示连接到服务端的某个用户</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerConnectClientThread</span><span class="hljs-params">(Socket socket,String userId)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>        <span class="hljs-built_in">this</span>.userId = userId;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//持续在一个端口监听客户端的请求</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;服务端和客户端保持连接 读取数据&quot;</span>);<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message)ois.readObject();<br>                <span class="hljs-comment">// 用户发送给服务器的message对象，</span><br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>服务端管理<strong>连接线程</strong>的集合</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.server.service;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 该类用于管理和客户端通讯的线程        一个集合，里面存放了多个连接线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ManageClientThreads</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;String,ServerConnectClientThread&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将客户端与服务端的连接线程 放入集合</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serverConnectClientThread</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addServerConnectClientThread</span><span class="hljs-params">(String userId,ServerConnectClientThread serverConnectClientThread)</span>&#123;<br>        hm.put(userId,serverConnectClientThread);<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServerConnectClientThread <span class="hljs-title function_">getServereConnectClientThread</span><span class="hljs-params">(String userId)</span>&#123;<br>        <span class="hljs-keyword">return</span> hm.get(userId);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>服务端主框架</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.frame;<br><br><span class="hljs-keyword">import</span> com.hspedu.server.service.Server;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 该类创建Server， 启动后台服务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Frame</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Server</span>();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="四、实际效果"><a href="#四、实际效果" class="headerlink" title="四、实际效果"></a>四、实际效果</h1><p>登录时的客户端与服务端</p><p><img src="/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95)/image-20220402111543608.png" alt="image-20220402111543608"></p><p><img src="/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95)/image-20220402113224922.png" alt="image-20220402113224922"></p><h1 id="五、完善"><a href="#五、完善" class="headerlink" title="五、完善"></a>五、完善</h1><h2 id="5-1-第一次完善"><a href="#5-1-第一次完善" class="headerlink" title="5.1 第一次完善"></a>5.1 第一次完善</h2><p>将服务端的用户信息放入一个集合，当作后端数据库</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建一个集合，存放多个用户</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String,User&gt; validUsers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">static</span> &#123;<span class="hljs-comment">//静态代码块，初始化validUser</span><br>        validUsers.put(<span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));<br>        validUsers.put(<span class="hljs-string">&quot;200&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;200&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));<br>        validUsers.put(<span class="hljs-string">&quot;300&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;300&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));<br>        validUsers.put(<span class="hljs-string">&quot;至尊宝&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;至尊宝&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));<br>        validUsers.put(<span class="hljs-string">&quot;紫霞仙子&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;紫霞仙子&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));<br>        validUsers.put(<span class="hljs-string">&quot;菩提老祖&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;菩提老祖&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));<br>    &#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>项目地址：<a href="https://gitee.com/bluebirdlearncode/communicate-system">Java_Project: 使用Java语言实现的简单通讯系统 (gitee.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
          <category> 多用户通讯系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java项目 </tag>
            
            <tag> 多用户通讯系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需求分析</title>
      <link href="/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90)/"/>
      <url>/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><blockquote><p>编写此项目的目的主要用于巩固过去的两个月所学的知识，包括面向对象，多线程，IO流，网络编程等，因此在整个项目的完成中，将前端的一些操作进行了弱化， 但这个项目核心的功能都可以实现。</p></blockquote><h1 id="一、用户登录"><a href="#一、用户登录" class="headerlink" title="一、用户登录"></a>一、用户登录</h1><p><img src="/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90)/image-20220330215901537.png" alt="image-20220330215901537"></p><h1 id="二、-拉取在线用户列表"><a href="#二、-拉取在线用户列表" class="headerlink" title="二、 拉取在线用户列表"></a>二、 拉取在线用户列表</h1><p><img src="/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90)/image-20220330215919315.png" alt="image-20220330215919315"></p><h1 id="三、无异常退出（客户端、服务器）"><a href="#三、无异常退出（客户端、服务器）" class="headerlink" title="三、无异常退出（客户端、服务器）"></a>三、无异常退出（客户端、服务器）</h1><h1 id="四、私聊"><a href="#四、私聊" class="headerlink" title="四、私聊"></a>四、私聊</h1><p><img src="/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90)/image-20220330215946644.png" alt="image-20220330215946644"></p><h1 id="五、群聊"><a href="#五、群聊" class="headerlink" title="五、群聊"></a>五、群聊</h1><p><img src="/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90)/image-20220330220006041.png" alt="image-20220330220006041"></p><h1 id="六、发文件"><a href="#六、发文件" class="headerlink" title="六、发文件"></a>六、发文件</h1><p><img src="/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90)/image-20220330220030102.png" alt="image-20220330220030102"></p><h1 id="七、服务器推送新闻"><a href="#七、服务器推送新闻" class="headerlink" title="七、服务器推送新闻"></a>七、服务器推送新闻</h1><p><img src="/2022/03/04/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F(%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90)/image-20220330220056285.png" alt="image-20220330220056285"></p><blockquote><p>项目地址：<a href="https://gitee.com/bluebirdlearncode/communicate-system">Java_Project: 使用Java语言实现的简单通讯系统 (gitee.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
          <category> 多用户通讯系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java项目 </tag>
            
            <tag> 多用户通讯系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2022/03/01/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/03/01/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="一、网络相关概念"><a href="#一、网络相关概念" class="headerlink" title="一、网络相关概念"></a>一、网络相关概念</h1><h2 id="1-1-网络通信"><a href="#1-1-网络通信" class="headerlink" title="1.1 网络通信"></a>1.1 网络通信</h2><p>各个设备之间通过网络实现数据的传输</p><p><img src="/2022/03/01/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20220328173948247.png" alt="image-20220328173948247"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/2022/02/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
      <url>/2022/02/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>[toc]</p></blockquote><h1 id="第一部分-数据结构"><a href="#第一部分-数据结构" class="headerlink" title="第一部分 数据结构"></a>第一部分 数据结构</h1><h2 id="1-线性结构"><a href="#1-线性结构" class="headerlink" title="1. 线性结构"></a>1. 线性结构</h2><p>​    线性结构是最常用的数据结构, 其特点是数据元素之间存在一对一的线性关系. 线性结构有两种不同的存储结构, 即顺序存储结构和链式存储结构. 顺序存储的线性表称为顺序表, 顺序表中的存储元素是连续的. 链式存储的线性表称为链表, 链表中的存储元素地址不一定是连续的, 元素节点中存放数据元素以及其逻辑相邻的元素的地址. 常见的线性结构有: 数组, 队列, 链表和栈. </p><h3 id="1-1-稀疏数组与队列-sparsearray-amp-queue"><a href="#1-1-稀疏数组与队列-sparsearray-amp-queue" class="headerlink" title="1.1 稀疏数组与队列 - sparsearray  &amp; queue"></a>1.1 稀疏数组与队列 - sparsearray  &amp; queue</h3><blockquote><p>需求: 编写五子棋程序,  有存局退出和续上局的功能</p><p>设定: 用二维数组对棋盘进行存储, 0 为默认空位置, 1 代表黑子, 2 代表白子</p><p>分析: 因为二维数组很多值默认为0, 因此记录了很多没有意义的数据, 故这里可以采用稀疏数组</p></blockquote><p><strong>稀疏数组简介:</strong> 当一个数组中大部分元素为同一个数值时, 可以采用稀疏数组来保存该数组.处理的方法是: 记录数组一共有几行几列, 有多少个不同的值. 然后把有不同值的元素的行列以及值记录到一个小规模的数组中, 从而缩小存储规模. </p><p> 稀疏数组一般采用多行3列的动态数组, 第一行存总行数, 总列数, 有效元素个数.</p><table><thead><tr><th align="center"></th><th align="center">row</th><th align="center">col</th><th align="center">val</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">n</td><td align="center">n</td><td align="center">x</td></tr><tr><td align="center">1</td><td align="center">有效数据所在行</td><td align="center">有效数据所在列</td><td align="center">有效数据</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr></tbody></table><p>二维数组转稀疏数组的思路: </p><ol><li>遍历原始二维数组, 得到有效数据的个数sum</li><li>根据sum就可以创建稀疏数组<code>sparseArr int[sum+1][3]</code>;</li><li>将二维数组的有效数据存入到稀疏数组</li></ol><p>稀疏数组转原始二维数组思路:</p><ol><li>读取稀疏数组的第一行, 根据第一行的数据创建原始的二维数组, 例如<code>chessArr = int[11][11]</code></li><li>读取系数数组的后几行数据, 并赋予到chessArr数组中.</li></ol><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> <br></code></pre></div></td></tr></table></figure><h2 id="2-非线性结构"><a href="#2-非线性结构" class="headerlink" title="2. 非线性结构"></a>2. 非线性结构</h2><p>​    非线性结构包括二维数组, 多维数组, 广义表, 数结构, 图结构. </p><h1 id="第二部分-算法f"><a href="#第二部分-算法f" class="headerlink" title="第二部分 算法f"></a>第二部分 算法f</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2022/02/28/%E7%AE%97%E6%B3%95/"/>
      <url>/2022/02/28/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由<a href="https://b23.tv/Eu6nmnt">B站视频</a>整理</p></blockquote><p>[TOC]</p><h1 id="一-认识时间复杂度和简单排序算法"><a href="#一-认识时间复杂度和简单排序算法" class="headerlink" title="一 认识时间复杂度和简单排序算法"></a>一 认识时间复杂度和简单排序算法</h1><p>执行算法所需要的计算工作量(最坏情况下)</p><h2 id="1-1-冒泡排序"><a href="#1-1-冒泡排序" class="headerlink" title="1.1 冒泡排序"></a>1.1 冒泡排序</h2><p>O(N^2)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">null</span> || arr.length&lt;<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;arr.length-<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;j&lt;arr.length-i-<span class="hljs-number">1</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>                temp = arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-2-选择排序"><a href="#1-2-选择排序" class="headerlink" title="1.2 选择排序"></a>1.2 选择排序</h2><p>O(N^2)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">null</span> || arr.length &lt;<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> temp;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;arr.length -<span class="hljs-number">1</span>;i++)&#123;<span class="hljs-comment">//i ~ N-1</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>;j &lt; arr.length;j++)&#123;<br>            <span class="hljs-comment">//i~ N - 1 上寻找最小值下标</span><br>            minIndex = arr[j] &lt; arr[minIndex]? j : minIndex;<br>        &#125;<br>        temp = arr[i];<br>        arr[i] = arr[minIndex];<br>        arr[minInde] = temp;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1-3-异或运算"><a href="#1-3-异或运算" class="headerlink" title="1.3 异或运算"></a>1.3 异或运算</h2><p>0^0&#x3D;0，1^0&#x3D;1，0^1&#x3D;1，1^1&#x3D;0</p><p>a^b^c &#x3D; a^c^b &#x3D; b^a^c &#x3D; b^c^a &#x3D; c^a^b &#x3D; c^b^a</p><p>a^a &#x3D;0; a^b^a &#x3D; b……</p><h2 id="1-4-插入排序"><a href="#1-4-插入排序" class="headerlink" title="1.4 插入排序"></a>1.4 插入排序</h2><p>时间复杂度和数据状况有关 O(N) ~ O(N^2)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">null</span> || arr.length&lt;<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;<span class="hljs-comment">//第0个位置先当作有序,把后面的数往前插</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i-<span class="hljs-number">1</span>;j&gt;=<span class="hljs-number">0</span> &amp;&amp; arr[j] &gt;arr[j+<span class="hljs-number">1</span>];j--)&#123;<span class="hljs-comment">//从i不断往前看, 把大的换到后面, arr[j]&gt;arr[j+1] 表示i前面元素已经有序</span><br>            temp = arr[j];<br>            arr[j] = arr[j+<span class="hljs-number">1</span>];<br>            arr[j+<span class="hljs-number">1</span>] = temp;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="二-认识O-nlogn-的排序"><a href="#二-认识O-nlogn-的排序" class="headerlink" title="二 认识O(nlogn)的排序"></a>二 认识O(nlogn)的排序</h1><h2 id="2-1arr-L-R-范围求最大值"><a href="#2-1arr-L-R-范围求最大值" class="headerlink" title="2.1arr[L..R] 范围求最大值"></a>2.1arr[L..R] 范围求最大值</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span>&#123;<br>    <span class="hljs-keyword">if</span>(L==R)&#123;<br>        <span class="hljs-keyword">return</span> arr[L];<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> L + ((R-L) &gt;&gt; <span class="hljs-number">1</span>);  <span class="hljs-comment">//中点</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">leftMax</span> <span class="hljs-operator">=</span> process(arr, L, mid);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rightMax</span> <span class="hljs-operator">=</span> process(arr,mid, R);<br>    <span class="hljs-keyword">return</span> Math.max(leftMax, rightMax);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-2-arr-L-R-范围排序-归并排序"><a href="#2-2-arr-L-R-范围排序-归并排序" class="headerlink" title="2.2 arr[L~R] 范围排序, 归并排序"></a>2.2 arr[L~R] 范围排序, 归并排序</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span>&#123;<br>    <span class="hljs-keyword">if</span>(L == R)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> L + ((R - L) &gt;&gt; <span class="hljs-number">1</span>);<br>    process(arr, L, mid);<br>    process(arr, mid, R);<br>    merge(arr, L, mid, R);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> M, <span class="hljs-type">int</span> R)</span>&#123;<br>    <span class="hljs-type">int</span>[] help = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[R - L + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> L;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> M +<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(p1 &lt;= M &amp;&amp; p2 &lt;= R)&#123;<br>        <span class="hljs-comment">//将元素从小到大放到help</span><br>        help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];<br>    &#125;<br>    <span class="hljs-comment">//处理剩下的元素</span><br>    <span class="hljs-keyword">while</span>(p1 &lt;= M)&#123;<br>        help[i++] = arr[p1++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(p2 &lt;= R)&#123;<br>        hep[i++] = arr[p2++];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; help.length; i++)&#123;<br>        arr[L+i] = help[i];<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>时间复杂度nlogn, 空间复杂度n</p><h2 id><a href="#" class="headerlink" title></a></h2><h1 id="1-反转链表"><a href="#1-反转链表" class="headerlink" title="1. 反转链表"></a>1. 反转链表</h1><p>反转一个单链表</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span><br>输出: <span class="hljs-number">5</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>&#123;<br>        <span class="hljs-type">int</span> val;<br>        ListNode next;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ListNode</span><span class="hljs-params">(<span class="hljs-type">int</span> val, ListNode next)</span>&#123;<br>            <span class="hljs-built_in">this</span>.val = val;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> != <span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span> val + <span class="hljs-string">&quot;-&gt;&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span> + <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 个人求解:</span><br><br><span class="hljs-comment">//解法: 需要三个工作节点, pre指向输出链的节点 curr指向需要从输入链表摘下的节点, next 指向pre-&gt;next指向的节点.</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ListNode <span class="hljs-title function_">reverse</span><span class="hljs-params">(ListNode head)</span>&#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, curr = head,next = head.next;<br>        <span class="hljs-keyword">while</span>(next != <span class="hljs-literal">null</span>)&#123;<br>            curr.next = pre;<br>            pre = curr;<br>            curr = next;<br>            next = next.next;<br><br>        &#125;<br>        curr.next = pre;<br>        <span class="hljs-keyword">return</span> curr;<br>    &#125;<br><br><br><span class="hljs-comment">//答案: 遍历</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ListNode <span class="hljs-title function_">reverse2</span><span class="hljs-params">(ListNode head)</span>&#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>,next;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span>(curr != <span class="hljs-literal">null</span>)&#123;<br>            next = curr.next;<br>            curr.next = pre;<br>            pre = curr;<br>            curr = next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br><br><br><span class="hljs-comment">//答案: 递归</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ListNode <span class="hljs-title function_">reverse3</span><span class="hljs-params">(ListNode head)</span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span> || head.next ==<span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">new_head</span> <span class="hljs-operator">=</span> reverse(head.next);<br>        head.next.next = head; <span class="hljs-comment">//(节点--&gt;下一个节点).next</span><br>        head.next =<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> new_head;<br><br>    &#125;<br></code></pre></div></td></tr></table></figure><h1 id="2-素数个数统计"><a href="#2-素数个数统计" class="headerlink" title="2. 素数个数统计"></a>2. 素数个数统计</h1><p>统计n以内的素数个数</p><p>素数: 只能被1和自身整除的自然数  0,1 除外</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//自己解法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count0</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n ; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j&lt; i; j++)&#123;<br>                <span class="hljs-keyword">if</span>((i % j ) == <span class="hljs-number">0</span>) &#123;<br>                    count++;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n-count - <span class="hljs-number">1</span>;<br>    &#125;<br><br><span class="hljs-comment">//答案一: 暴力解</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count1</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i * i &lt;= n; i++) &#123;<span class="hljs-comment">//对于不是素数的只用判断一半即可//例如 12 = 6*2, 12 = 2*6</span><br>            count += isPrime(i) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;  <span class="hljs-comment">//分界点 √n, 根号将n分为两个区域√n, 减少的是结果为true时的比较次数</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(n % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><span class="hljs-comment">//答案: 埃筛法</span><br><span class="hljs-comment">//将素数和合数设置不同的标记, 从而减少比较的次数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count2</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-type">boolean</span>[] isPrime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n]; <span class="hljs-comment">//初始全为false, 假定false代表素数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;n ; i++) &#123;<br>            <span class="hljs-keyword">if</span>(!isPrime[i])&#123;<span class="hljs-comment">//为合数时会直接跳过</span><br>                count ++;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i*i;!isPrime[j] &amp;&amp; j&lt;n; j+=i) &#123; <span class="hljs-comment">// j = 2*i ==优化==&gt;j = i * i</span><br>                    isPrime[j] = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 将合数位置为true</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br><br><br></code></pre></div></td></tr></table></figure><h1 id="3-删除排序数组中的重复项"><a href="#3-删除排序数组中的重复项" class="headerlink" title="3. 删除排序数组中的重复项"></a>3. 删除排序数组中的重复项</h1><p>一个有序数组nums, 原地删除重复出现的元素, 使每一个元素只出现一次, 返回删除后数组的新长度.</p><p>不能使用额外的数组空间, 必须在原地修改输入数组并在使用O(1) 额外的空间的条件下完成</p><p>考察: 双指针</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//自己求解</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dure</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><br>        <span class="hljs-type">int</span> i, j;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, j = <span class="hljs-number">1</span>; j &lt; arr.length; ) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] == arr[j]) &#123;<br>                j++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; j) &#123;<br>                arr[i++] = arr[j++];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                i++;<br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i ;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//答案</span><br><br><span class="hljs-keyword">public</span> satic <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-keyword">if</span>(arr.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j&lt; arr.length; j++)&#123;<br><span class="hljs-keyword">if</span>(arr[j] != arr[i])&#123;<br>            arr[++i] = arr[j]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="4-寻找数组的中心下标"><a href="#4-寻找数组的中心下标" class="headerlink" title="4. 寻找数组的中心下标"></a>4. 寻找数组的中心下标</h1><p>给定一个整数数组nums, 请编写一个能返回数组” 中心下标 “ 的方法</p><p>中心下标是数组的一个下标, 其左侧所有元素相加的和等于右侧所有元素相加的和. </p><p>如果数组不存在中心下标, 返回-1, 如果数组有多个中心下标, 应该返回最靠近左边的那一个.</p><p> 注意: 中心下标可能出现在数组的两端</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//答案</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">privotIndex</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> Arrays.stream(nums).sum();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>        total += nums[i];<br>        <span class="hljs-keyword">if</span>(total == sum)&#123;<span class="hljs-comment">//下面sum 有减</span><br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        sum -= nums[i];  <span class="hljs-comment">// sum减少</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="5-x-的平方根"><a href="#5-x-的平方根" class="headerlink" title="5. x 的平方根"></a>5. x 的平方根</h1><p>在不使用sqrt(x) 函数的情况下, 得到x的平方根的整数部分</p><p>考察: 二分法, 牛顿迭代</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//暴力解法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sqrt01</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;x;i++)&#123;<br><span class="hljs-keyword">if</span>(i*i =&lt; x || (i+<span class="hljs-number">1</span>)*(i+<span class="hljs-number">1</span>) &gt;= x)&#123;<br><span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-comment">//二分法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> x/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(right &gt;= left)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (right - left)/<span class="hljs-number">2</span> +left;<br>        <span class="hljs-keyword">if</span>(mid * mid &lt;= x)&#123;<br>index = mid;<br>            left = mid+<span class="hljs-number">1</span>;<br>            <br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <br>            right = mid -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> index;<br>&#125;<br><br><span class="hljs-comment">// 牛顿迭代 n + n/x</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">newton</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)sqrt(x,x);<br>    <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> i, <span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> (i+x/i)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(res == i)&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> sqrt(res,x);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络复习</title>
      <link href="/2022/02/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/02/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一-计算机网络概述"><a href="#一-计算机网络概述" class="headerlink" title="一 计算机网络概述"></a>一 计算机网络概述</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/9b0e259a058e1e338ab3e50e728a2156.png" alt="9b0e259a058e1e338ab3e50e728a2156.png (1120×1587) (csdnimg.cn)"></p><h2 id="1-1-计算机网络的分类"><a href="#1-1-计算机网络的分类" class="headerlink" title="1.1 计算机网络的分类"></a>1.1 计算机网络的分类</h2><p>按照网络的作用范围: 广域网(WAN), 城域网(MAN), 局域网(LAN)</p><p>按照网络使用者: 公用网络, 专用网络</p><h2 id="1-2计算机网络的层次结构"><a href="#1-2计算机网络的层次结构" class="headerlink" title="1.2计算机网络的层次结构"></a>1.2计算机网络的层次结构</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/67df7eca8ba486a7282bef74321e2722.png" alt="img"></p><p>TCP&#x2F;IP四层模型与OS体系结构对比:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c2b921fd2023201a457a2b07fe3e8e9a.png" alt="img"></p><h2 id="1-3-层次结构设计的基本原则"><a href="#1-3-层次结构设计的基本原则" class="headerlink" title="1.3 层次结构设计的基本原则"></a>1.3 层次结构设计的基本原则</h2><ul><li>各层之间是相互独立的</li><li>每一层需要有足够的灵活性</li><li>各层之间完全解耦</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/ca899d9a067e8c6d6650f1b5f229648b.png" alt="image-20210824140534676"></p><h2 id="1-4-计算机网络的性能指标"><a href="#1-4-计算机网络的性能指标" class="headerlink" title="1.4 计算机网络的性能指标"></a>1.4 计算机网络的性能指标</h2><p>速率:bps &#x3D; bit&#x2F;s</p><p>时延: 发送时延, 传播时延, 排队时延, 处理时延</p><p>往返时间RTT：数据报文在端到端通信中的来回一次的时间</p><h1 id="二-物理层"><a href="#二-物理层" class="headerlink" title="二 物理层"></a>二 物理层</h1><h2 id="2-1-物理层的作用"><a href="#2-1-物理层的作用" class="headerlink" title="2.1 物理层的作用"></a>2.1 物理层的作用</h2><p>连接不同的物理设备, 传输比特流. 该层为上层协议提供了一个传输数据的可靠物理媒体. 简单来说, 物理层确保原始的数据可在各种物理媒体上传输</p><h2 id="2-2-物理层设备"><a href="#2-2-物理层设备" class="headerlink" title="2.2 物理层设备:"></a>2.2 物理层设备:</h2><ul><li>中继器: 同一局域网的再生信号, 两端口的网段必须同一个协议; 5-4-3规程; 10BASE-5以太网中, 最多可串联四个中继器, 5段中只能有3个连接主机</li><li>集线器: 同一局域网的再生, 放大信号(多端口中继器); 半双工, 不能隔离冲突域也不能隔离广播域</li></ul><p>信道的基本概念: 信道是往一个方向传输信息的媒体, 一条通信电路包含一个发送信道和一个接收信道</p><ol><li>单工通信信道: 只能一个方向通信</li><li>半双工通信信道: 双方都可以发送和接收信息, 但不能同时发送也不能同时接收</li><li>全双工通信信道: 双方都可以同时发送和接收</li></ol><h1 id="三-数据链路层"><a href="#三-数据链路层" class="headerlink" title="三 数据链路层"></a>三 数据链路层</h1><h2 id="3-1-数据链路层概述"><a href="#3-1-数据链路层概述" class="headerlink" title="3.1 数据链路层概述"></a>3.1 数据链路层概述</h2><p>数据链路层在物理层提供的服务的基础上向网络层提供服务, 其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层. 数据链路层在不可靠的物理介质上提供可靠的传输.</p><p>该层的作用包括: <strong>物理地址寻址, 数据的成帧, 流量控制, 数据的检错, 重发等</strong></p><p>有关数据链路层的重要知识点:</p><ul><li>数据链路层为网络层提供可靠的数据传输</li><li>基本数据单位为帧</li><li>主要的协议: 以太网协议</li><li>两个重要设备名称: 网桥和交换机</li></ul><p>封装成帧: “帧”是数据链路层数据的基本单位</p><p><img src="https://img-blog.csdnimg.cn/img_convert/969de8a50812f7772ed5cfef6969bef1.png" alt="img"></p><p>透明传输: “透明”是指即使控制字符在帧数据中, 但是要当作不存在去处理. 即在控制字符前加上转义字符ESC</p><p><img src="https://img-blog.csdnimg.cn/img_convert/40172930e675aa1e9b6d4852239144fc.png" alt="img"></p><h2 id="3-2-数据链路层的差错检测"><a href="#3-2-数据链路层的差错检测" class="headerlink" title="3.2 数据链路层的差错检测"></a>3.2 数据链路层的差错检测</h2><p>差错检测: 奇偶校验码, 循环冗余校验码CRC</p><ol><li>奇偶校验码–局限性: 当出错为偶数位, 检测不到错误</li><li>循环冗余校验码: 根据传输或保存的数据而产生固定位数校验码</li></ol><h2 id="3-3-最大传输单元"><a href="#3-3-最大传输单元" class="headerlink" title="3.3 最大传输单元"></a>3.3 最大传输单元</h2><p>最大传输单元MTU, 数据链路层的数据帧不是无限大的, 数据帧长度受到MTU限制</p><p>路径MTU: 由链路中MTU的最小值决定</p><p><img src="https://img-blog.csdnimg.cn/img_convert/437533a74e891aa9c7dcd3ccb94440a4.png" alt="image-20210824145733146"></p><h2 id="3-4-以太网协议详解"><a href="#3-4-以太网协议详解" class="headerlink" title="3.4 以太网协议详解"></a>3.4 以太网协议详解</h2><p>MAC地址: 每一个设备都拥有唯一的MAC地址, 共48位, 使用十六进制表示</p><p>以太网协议: 是一种使用广泛的局域网技术, 是一种应用于数据链路层的协议, 使用以太网可以完成相邻设备的数据帧传输:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/06765dad404a72429bead8950c219c10.png" alt="img"></p><p><strong>局域网分类</strong></p><p>以太网IEEE802.3:</p><ol><li>以太网第一个广泛部署的高速局域网</li><li>以太网数据速率快</li><li>以太网硬件价格便宜, 网络造价成本低</li></ol><p><strong>以太网帧结构</strong></p><ol><li>类型: 标识上层协议(2字节)</li><li>目的地址和源地址: MAC地址(每个6字节, 6*8&#x3D;48bit)</li><li>数据: 封装的上层协议的分组(46 ~ 1500字节)</li><li>CRC: 循环冗余码(4字节)</li><li>以太网最短帧: 以太网最短64字节; 以太网帧除了数据部分18字节; 数据最短46字节</li></ol><p><strong>MAC地址(物理地址, 局域网地址)</strong></p><ol><li>MAC地址长度为6字节, 48位</li><li>MAC地址具有唯一性, 每个网络适配器对应一个MAC地址</li><li>通常采用十六进制表示法, 每个字节表示一个十六进制数, 用 - 或 : 连接起来</li><li>MAC广播地址: FF-FF-FF-FF-FF-FF</li></ol><h1 id="四-网络层"><a href="#四-网络层" class="headerlink" title="四 网络层"></a>四 网络层</h1><p>网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。数据交换技术是报文交换（基本上被分组所替代）：采用储存转发方式，数据交换单位是报文。</p><p>网络层中涉及众多的协议，其中包括最重要的协议，也是TCP&#x2F;IP的核心协议——IP协议。IP协议非常简单，仅仅提供不可靠、无连接的传送服务。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。与IP协议配套使用实现其功能的还有地址解析协议ARP、逆地址解析协议RARP、因特网报文协议ICMP、因特网组管理协议IGMP。具体的协议我们会在接下来的部分进行总结，有关网络层的重点为:</p><ol><li><strong>网络层负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能</strong></li><li><strong>基本数据单位为IP数据报</strong></li><li><strong>包含的主要协议</strong><ul><li>IP协议（Internet Protocol，因特网互联协议）</li><li>ICMP协议（Internet Control Message Protocol，因特网控制报文协议）;</li><li>ARP协议（Address Resolution Protocol，地址解析协议）;</li><li>RARP协议（Reverse Address Resolution Protocol，逆地址解析协议）。</li></ul></li><li>重要的设备: 路由器<img src="https://img-blog.csdnimg.cn/img_convert/e976bb4dcb58a55615d825b0a808ebf0.png" alt="image-20210824150654047"></li></ol><h2 id="4-1-IP协议详解"><a href="#4-1-IP协议详解" class="headerlink" title="4.1 IP协议详解"></a>4.1 IP协议详解</h2><p>IP网际协议是 Internet <strong>网络层最核心</strong>的协议。虚拟互联网络的产生：实际的计算机网络错综复杂；物理设备通过使用IP协议，屏蔽了物理网络之间的差异；当网络中主机使用IP协议连接时，无需关注网络细节，于是形成了虚拟网络。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1512f8a9907449f746288ef22db5fa3a.png" alt="在这里插入图片描述"></p><p>IP协议使得复杂的实际网络变为一个虚拟互联的网络；并且<strong>解决了在虚拟网络中数据报传输路径的问题</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/dc7ef170f6522ce68e09c59f0450ab14.png" alt="img"></p><p>其中，版本指IP协议的版本，占4位，如IPv4和IPv6；首部位长度表示IP首部长度，占4位，最大数值位15；总长度表示IP数据报总长度，占16位，最大数值位65535；TTL表示IP数据报文在网络中的寿命，占8位；协议表明IP数据所携带的具体数据是什么协议的，如<a href="https://so.csdn.net/so/search?q=TCP&spm=1001.2101.3001.7020">TCP</a>、UDP.</p><h2 id="4-2-IP协议的转发流程"><a href="#4-2-IP协议的转发流程" class="headerlink" title="4.2 IP协议的转发流程"></a>4.2 IP协议的转发流程</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/2b15d397bb6ae792c4f786a39a3a3a1e.png" alt="image-20210829160514564"></p><h2 id="4-3-IP地址的子网划分"><a href="#4-3-IP地址的子网划分" class="headerlink" title="4.3 IP地址的子网划分"></a>4.3 IP地址的子网划分</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/81ecde62bf5383da3864b011575d436d.png" alt="img"></p><p>A类（8网络号+24主机号）、B类（16网络号+16主机号）、C类（24网络号+8主机号）可以用于标识网络中的主机或路由器，D类地址作为组广播地址，E类是地址保留</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ccc6e95f8657ca6094042cfaa0c21b6c.png" alt="img"></p><h2 id="4-4-网络地址转换NAT技术"><a href="#4-4-网络地址转换NAT技术" class="headerlink" title="4.4 网络地址转换NAT技术"></a>4.4 网络地址转换NAT技术</h2><p>用于多个主机通过一个公有IP访问访问互联网的私有网络中，减缓了IP地址的消耗，但是增加了网络通信的复杂度。</p><p><strong>NAT工作原理</strong></p><ul><li>从内网出去的IP数据报, 将其IP地址替换为NAT服务器拥有的合法的公共IP地址, 并将替换关系记录到NAT转换表中</li><li>从公共互联网返回的IP数据报, 依据其目的的IP地址检索NAT转换表，　并利用检索到的内部私有IP地址替换目的IP地址，　然后将IP数据报转发到内部网络</li></ul><h2 id="4-5-ARP协议与RARP协议"><a href="#4-5-ARP协议与RARP协议" class="headerlink" title="4.5 ARP协议与RARP协议"></a>4.5 ARP协议与RARP协议</h2><p>地址解析协议 ARP（Address Resolution Protocol）：为网卡（网络适配器）的IP地址到对应的硬件地址提供动态映射。可以把<strong>网络层32位地址转化为数据链路层MAC48位地址</strong>。</p><p>ARP 是<strong>即插即用</strong>的，一个ARP表是自动建立的，不需要系统管理员来配置。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/442e827fe069e4958f4cbedcc2f2fa13.png" alt="在这里插入图片描述"></p><p>RARP(Reverse Address Resolution Protocol)协议<strong>指逆地址解析协议</strong>，可以把数据链路层MAC48位地址转化为网络层32位地址.</p><h2 id="4-6-ICMP协议详解"><a href="#4-6-ICMP协议详解" class="headerlink" title="4.6 ICMP协议详解"></a>4.6 ICMP协议详解</h2><p>网际控制报文协议（Internet Control Message Protocol），<strong>可以报告错误信息或者异常情况</strong>，ICMP报文封装在IP数据报当中。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c5171aa88d22fe5055d682bb1d9681de.png" alt="img"></p><p>ICMP协议的应用:</p><ul><li>Ping应用: 网络故障的排查</li><li>Traceroute应用: 可以探测IP数据报在网络中走过的路径</li></ul><h2 id="4-7-网络层的路由概述"><a href="#4-7-网络层的路由概述" class="headerlink" title="4.7 网络层的路由概述"></a>4.7 网络层的路由概述</h2><p>关于路由算法的要求：正确的完整的、在计算上应该尽可能是简单的、可以适应网络中的变化、稳定的公平的。<br><strong>自治系统AS：</strong>指处于一个管理机构下的网络设备群，AS内部网络自治管理，对外提供一个或多个出入口，其中自治系统内部的路由协议为内部网关协议，如RIP、OSPF等；自治系统外部的路由协议为外部网关协议，如BGP。</p><p><strong>静态路由:</strong> 人工配置, 难度和复杂度高</p><p>动态路由:</p><ol><li>链路状态路由选择算法LS: 向所有隔壁路由发送信息收敛快; 全局式路由选择算法, 每个路由器计算路由时, 需要构建整个网络拓扑图, 利用Dijkstra算法求源端到目的端网络的最短路径;</li><li>距离- 向量路由选择算法DV: 向所有隔壁路由发送信息收敛慢, 会存在回路, 基础是Bellman-Ford方程(简称B-F方程)</li></ol><h2 id="4-8-内部网关路由协议之RIP协议"><a href="#4-8-内部网关路由协议之RIP协议" class="headerlink" title="4.8 内部网关路由协议之RIP协议"></a>4.8 内部网关路由协议之RIP协议</h2><p>路由信息协议 RIP(Routing Information Protocol)【<strong>应用层</strong>】，基于距离-向量的路由选择算法，<strong>较小的AS</strong>（自治系统），适合小型网络；RIP报文，封装进UDP数据报</p><p><strong>RIP协议特性：</strong></p><ol><li>RIP在度量路径时采用的是<strong>跳数</strong>（每个路由器维护自身到其他每个路由器的距离记录）；</li><li>RIP的费用定义在源路由器和目的子网之间；</li><li>RIP被限制的网络直径不超过<strong>15跳</strong>；</li><li>和隔壁交换所有的信息，30<strong>主动</strong>一次（广播）。</li></ol><h2 id="4-9-内部网关路由协议之OSPF协议"><a href="#4-9-内部网关路由协议之OSPF协议" class="headerlink" title="4.9 内部网关路由协议之OSPF协议"></a>4.9 内部网关路由协议之OSPF协议</h2><p>开放最短路径优先协议 OSPF(Open Shortest Path First)【<strong>网络层</strong>】，基于链路状态的路由选择算法（即Dijkstra算法），<strong>较大规模的AS</strong> ，适合大型网络，直接封装在<strong>IP数据</strong>报传输。</p><p><strong>OSPF协议优点：</strong></p><ol><li>安全；</li><li>支持多条相同费用路径；</li><li>支持区别化费用度量；</li><li>支持单播路由和多播路由；</li><li>分层路由。</li></ol><p><strong>RIP与OSPF的对比（路由算法决定其性质）：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0455a0dbe6b9689b32a117e9ab2db3e0.png" alt="image-20210824203252103"></p><h2 id="4-10外部网关路由协议之BGP协议"><a href="#4-10外部网关路由协议之BGP协议" class="headerlink" title="4.10外部网关路由协议之BGP协议"></a>4.10外部网关路由协议之BGP协议</h2><p>BGP（Border Gateway Protocol）边际网关协议【<strong>应用层</strong>】：是运行在AS之间的一种协议,寻找一条好路由：首次交换全部信息，以后只交换变化的部分,BGP封装进<strong>TCP</strong>报文段.</p><h1 id="五-传输层"><a href="#五-传输层" class="headerlink" title="五 传输层"></a>五 传输层</h1><p>第一个端到端, 即主机到主机连接的层次. 传输层负责将上层数据分段并提供端到端的, 可靠的或不可靠的传输. 此外, 传输层还要处理端到端的差错控制和流量控制问题</p><p>传输层的任务是根据通信子网的特性, 最佳的利用网络资源, 为两个端系统的会话层之间, 提供建立, 维护和取消传输连接的功能, 负责端到端的可靠数据传输. 在这一层, 信息传输的协议数据单元称为段或报文</p><p>网络层只是根据网络地址将源结点发出的数据包传送到目的节点, 而传输层则负责将数据可靠地传送到相应的端口</p><p>有关网络层的重点:</p><ol><li>传输层负责将上层数据分段并提供端到端的, 可靠的或不可靠的传输以及端到端的差错控制和流量控制问题</li><li>包含的主要协议: TCP, UDP</li><li>重要设备:网关</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/b8b9bdad6fe98840d4b98a7c74414c44.png" alt="image-20210824204416951"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3e813c4865d3c90d5c960e3febc02152.png" alt="image-20210825110057777"></p><h2 id="5-1-UDP协议详解"><a href="#5-1-UDP协议详解" class="headerlink" title="5.1 UDP协议详解"></a>5.1 UDP协议详解</h2><p>UDP(用户数据报协议)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c1e2c463a94254f0e157e1ecb84051fb.png" alt="（11-2-0303）"></p><p>UDP协议特点:</p><ul><li>UDP是无连接协议</li><li>不能保证可靠啊的数据交付</li><li>面向报文传输</li><li>没有拥塞控制</li><li>首部开销很小</li></ul><p>UDP数据报结构:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d88a84b462bac5a52716fc0d4de42856.png" alt="img"></p><h2 id="5-2-TCP协议详解"><a href="#5-2-TCP协议详解" class="headerlink" title="5.2 TCP协议详解"></a>5.2 TCP协议详解</h2><p>TCP(传输控制协议)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7dcb2a6d779a0424a4d0dcde5ce5fdd2.png" alt="image-20210825101232465"></p><p>TCP协议功能:</p><ul><li>对应用层数据报文进行分段和重组</li><li>面向应用层实现复用和分解</li><li>实现端到端流量控制</li><li>拥塞控制</li><li>传输层寻址</li><li>对接收到的报文进行差错检测(首部和数据部分都检错)</li><li>实现进程间的端到端可靠数据传输控制</li></ul><p>TCP协议特点:</p><ul><li>面向连接的协议</li><li>面向字节流的协议</li><li>点对点通信</li><li>提供可靠的传输服务</li><li>提供全双工通信</li></ul><p>TCP报文结构</p><p><img src="https://img-blog.csdnimg.cn/img_convert/90ea9c7215077889d809c598b88044b4.png" alt="image-20210825101507309"></p><p>TCP首部:</p><ul><li>序号字段:TCP的序号是对每个应用层数据的每个字节进行编号</li><li>确认序号字段: 期望从对方接收数据的字节序号, 即该序号对应的字节尚未收到. 用ack_seq标识</li><li>TCP段的首部长度最短是20B, 最长为60字节. 但是长度必须为4B的整数倍</li></ul><p>TCP标记的作用：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/059e327428c4997120ecd1099fd1bab5.png" alt="image-20210825101954996"></p><h2 id="5-3-可靠传输的基本原理"><a href="#5-3-可靠传输的基本原理" class="headerlink" title="5.3 可靠传输的基本原理"></a>5.3 可靠传输的基本原理</h2><p>基本原理:</p><ul><li><p>不可靠传输信道在数据传输中可能发生的情况: 比特差错, 乱序, 重传, 丢失</p></li><li><p>基于不可靠信道实现可靠数据传输采取的措施:</p><ul><li>差错检测: 利用编码实现数据包传输过程中的比特差错检测</li><li>确认: 接收方向发送方反馈接收状态</li><li>重传: 发送方重新发送接收方没有正确接收的数据</li><li>序号: 确保数据按序提交</li><li>计时器: 解决数据丢失问题</li></ul></li></ul><p>停止等待协议: 是最简单的可靠传输协议, 但是该协议对信道利用率不高</p><p>ARQ(自动重传请求)协议: 滑动窗口+累计确认, 大幅提高了信道利用率</p><h3 id="5-3-1-TCP协议的可靠传输"><a href="#5-3-1-TCP协议的可靠传输" class="headerlink" title="5.3.1 TCP协议的可靠传输"></a>5.3.1 TCP协议的可靠传输</h3><p>基于连续的ARQ协议, 在某些情况下, 重传的效率并不高, 会重复传输部分已经成功接收的字节</p><h3 id="5-3-2-TCP协议的流量控制"><a href="#5-3-2-TCP协议的流量控制" class="headerlink" title="5.3.2 TCP协议的流量控制"></a>5.3.2 TCP协议的流量控制</h3><p>流量控制: 让发送方发送速率不要太快, TCP协议使用滑动窗口实现流量控制</p><p><img src="https://img-blog.csdnimg.cn/img_convert/00f26c96e91c4bf95ef197940d0127f6.png" alt="image-20210825103907230"></p><h2 id="5-4-TCP协议的拥塞控制"><a href="#5-4-TCP协议的拥塞控制" class="headerlink" title="5.4 TCP协议的拥塞控制"></a>5.4 TCP协议的拥塞控制</h2><p>拥塞控制与流量控制的区别: 流量控制考虑点对点的通信量的控制, 而拥塞控制考虑整个网络, 是全局性的考虑. 拥塞控制方法: 慢启动算法 + 拥塞避免算法</p><p>慢开始和拥塞避免:</p><ol><li>慢开始: 拥塞窗口从1(2,4,8,16)指数增长</li><li>达到阈值时进入拥塞避免, 变成+1增长</li><li>发生超时, 阈值变为拥塞窗口的一半(必须大于等于2)</li><li>再从慢开始增长</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/6fff690ce568963043be6792251f4904.png" alt="img"></p><p>快重传和快恢复:</p><ol><li>发送方连续接收到3个冗余ACK, 执行快重传, 不必等计时器超时</li><li>执行快恢复, 阈值变为当前拥塞窗口的一半(须大于1), 并从此新的ssthresh点进入拥塞避免</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/77ff4adc711a615a88840a8abd37f1a0.png" alt="img"></p><h2 id="5-5-TCP的三次握手"><a href="#5-5-TCP的三次握手" class="headerlink" title="5.5 TCP的三次握手"></a>5.5 TCP的三次握手</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/f93fcf682b6e89b628ee458693f5cd32.png" alt="image-20210825104544704"></p><p><strong>为什么需要三次握手?</strong></p><ul><li>第一次握手: 客户机发送请求, 此时服务器知道客户能发送数据</li><li>第二次握手: 服务器发送确认, 此时客户知道服务器能发送也能接收数据</li><li>第三次握手: 客户发送确认, 此时服务器知道客户能接收数据</li></ul><p>建立连接:</p><p><strong>第一次：</strong>客户向服务器发送连接请求段，建立连接请求控制段（SYN&#x3D;1），表示传输的报文段的第一个数据字节的序列号是x，此序列号代表整个报文段的序号（seq&#x3D;x）；客户端进入 SYN_SEND （同步发送状态）；</p><p><strong>第二次：</strong>服务器发回确认报文段，同意建立新连接的确认段（SYN&#x3D;1），确认序号字段有效（ACK&#x3D;1），服务器告诉客户端报文段序号是y（seq&#x3D;y），表示服务器已经收到客户端序号为x的报文段，准备接受客户端序列号为x+1的报文段（ack_seq&#x3D;x+1）；服务器由LISTEN进入SYN_RCVD （同步收到状态）;</p><p>**第三次:**客户对服务器的同一连接进行确认.确认序号字段有效(ACK&#x3D;1),客户此次的报文段的序列号是x+1(seq&#x3D;x+1),客户期望接受服务器序列号为y+1的报文段(ack_seq&#x3D;y+1);当客户发送ack时，客户端进入ESTABLISHED 状态;当服务收到客户发送的ack后，也进入ESTABLISHED状态;第三次握手可携带数据;<br><img src="https://img-blog.csdnimg.cn/img_convert/1ad3ae0f896df40cfe163e93ca43ab11.png" alt="img"></p><h2 id="5-6-TCP连接的四次挥手"><a href="#5-6-TCP连接的四次挥手" class="headerlink" title="5.6 TCP连接的四次挥手"></a>5.6 TCP连接的四次挥手</h2><p>释放连接（四次挥手）</p><p>第一次：客户向服务器发送释放连接报文段，发送端数据发送完毕，请求释放连接（FIN&#x3D;1），传输的第一个数据字节的序号是x（seq&#x3D;x）；客户端状态由ESTABLISHED进入FIN_WAIT_1（终止等待1状态）；</p><p>第二次：服务器向客户发送确认段，确认字号段有效（ACK&#x3D;1），服务器传输的数据序号是y（seq&#x3D;y），服务器期望接收客户数据序号为x+1（ack_seq&#x3D;x+1）;服务器状态由ESTABLISHED进入CLOSE_WAIT（关闭等待）； 客户端收到ACK段后，由FIN_WAIT_1进入FIN_WAIT_2；</p><p>第三次:服务器向客户发送释放连接报文段，请求释放连接（FIN&#x3D;1），确认字号段有效（ACK&#x3D;1），表示服务器期望接收客户数据序号为x+1（ack_seq&#x3D;x+1）;表示自己传输的第一个字节序号是y+1（seq&#x3D;y+1）；服务器状态由CLOSE_WAIT 进入 LAST_ACK （最后确认状态）；</p><p>第四次：客户向服务器发送确认段，确认字号段有效（ACK&#x3D;1），表示客户传输的数据序号是x+1（seq&#x3D;x+1），表示客户期望接收服务器数据序号为y+1+1（ack_seq&#x3D;y+1+1）；客户端状态由FIN_WAIT_2进入TIME_WAIT，等待2MSL时间，进入CLOSED状态；服务器在收到最后一次ACK后，由LAST_ACK进入CLOSED；</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b55a473f789c42124afbfd0e82a9e811.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1fb9c88b10de4d3a77367645d5e93224.png" alt="image-20210825105441970"></p><p>为什么需要等待2MSL?</p><ol><li>最后一个报文没有确认；</li><li>确保发送方的ACK可以到达接收方；</li><li>2MSL时间内没有收到，则接收方会重发；</li><li>确保当前连接的所有报文都已经过期。</li></ol><h1 id="六-应用层"><a href="#六-应用层" class="headerlink" title="六 应用层"></a>六 应用层</h1><p>为操作系统或网络应用程序提供访问网络服务的接口。</p><p>应用层重点:</p><ol><li>数据传输单位为报文</li><li>包含主要的协议: FTP(文件传输协议), Telnet(远程登录协议), DNS(域名解析协议), SMTP(邮件传输协议), POP3(邮局协议), HTTP协议</li></ol><h2 id="6-1-DNS详解"><a href="#6-1-DNS详解" class="headerlink" title="6.1 DNS详解"></a>6.1 DNS详解</h2><p>DNS（Domain Name System:域名系统）<strong>【C&#x2F;S，UDP，端口53】</strong>：解决IP地址复杂难以记忆的问题,存储并完成自己所管辖范围内主机的 域名 到 IP 地址的映射。</p><p><strong>域名解析的顺序：</strong>【1】浏览器缓存，【2】找本机的hosts文件，【3】路由缓存，【4】找DNS服务器（本地域名、顶级域名、根域名）-&gt;迭代解析、递归查询。</p><ol><li><p>IP—&gt;DNS服务—&gt;便于记忆的域名</p></li><li><p>域名由点、字母和数字组成，分为顶级域（com，cn，net，gov，org）、二级域（baidu,taobao,qq,alibaba）、三级域（www）(12-2-0852)</p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/55345eaf75c7aecad38bf2cbcd652a2f.png" alt="image-20210825130407844"></p><h2 id="6-2-DHCP协议"><a href="#6-2-DHCP协议" class="headerlink" title="6.2 DHCP协议"></a>6.2 DHCP协议</h2><p>DHCP（Dynamic Configuration Protocol:动态主机设置协议）：<strong>是一个局域网协议，是应用UDP协议的应用层协议。</strong> <strong>作用：为临时接入局域网的用户自动分配IP地址。</strong></p><h2 id="6-3-FTP协议"><a href="#6-3-FTP协议" class="headerlink" title="6.3 FTP协议"></a>6.3 FTP协议</h2><p><strong>文件传输协议（FTP）</strong>：控制连接（端口21）：传输控制信息（连接、传输请求），以<strong>7位ASCII码的格式</strong>。<strong>整个会话期间一直打开。</strong></p><h2 id="6-4-HTTP协议"><a href="#6-4-HTTP协议" class="headerlink" title="6.4 HTTP协议"></a>6.4 HTTP协议</h2><p><strong>HTTP（HyperText Transfer Protocol:超文本传输协议）</strong>【<strong>TCP，端口80</strong>】：是可靠的数据传输协议，<strong>浏览器向服务器发收报文前，先建立TCP连接，HTTP使用TCP连接方式（HTTP自身无连接）</strong>。</p><p>HTTP请求报文方式：</p><ol><li>GET：请求指定的页面信息，并返回实体主体；</li><li>POST：向指定资源提交数据进行处理请求；</li><li>DELETE：请求服务器删除指定的页面；</li><li>HEAD：请求读取URL标识的信息的首部，只返回报文头；</li><li>OPETION：请求一些选项的信息；</li><li>PUT：在指明的URL下存储一个文档。</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/f182c08fd961d57d8e03263df7469c23.png" alt="image-20210825131432665"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/dc7492094737809454912e47f9d54ff8.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a5e08c253ea159f3ef609ae157f08750.png" alt="image-20210825131827137"></p><h3 id><a href="#" class="headerlink" title></a></h3><p>HTTPS(Secure)是安全的HTTP协议，<strong>端口号443</strong>。基于HTTP协议，通过SSL或TLS提供加密处理数据、验证对方身份以及数据完整性保护。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2022/02/27/%E9%9B%86%E5%90%88/"/>
      <url>/2022/02/27/%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p> [TOC]</p><p>前面我们保存多个数据使用的是数组, 那么数组有不足的地方</p><ol><li>数组开始时必须指定, 而且一旦指定, 不能更改</li><li>保存的必须为同一类型的元素</li><li>使用数组进行增加&#x2F;删除元素时比较麻烦(循环拷贝)</li></ol><p>集合:</p><ol><li>可以动态保护任意多个对象, 使用比较方便!</li><li>提供了一系列方便的操作对象的方法: add, remove, set, get(增删改查)</li><li>使用集合添加, 删除新元素简洁方便</li></ol><h1 id="一-集合框架体系"><a href="#一-集合框架体系" class="headerlink" title="一 集合框架体系"></a>一 集合框架体系</h1><p>集合主要是两组(单列集合, 双列集合)</p><p>Collection 接口有两个重要的子接口 List 和 Set . 他们的实现子类都是单列集合(集合中放的都是单个元素)</p><p><img src="/2022/02/27/%E9%9B%86%E5%90%88/image-20220227160741796.png" alt="集合框架图"></p><p>Map 接口实现子类 是双列集合, 存放的是 K-V</p><p><img src="/2022/02/27/%E9%9B%86%E5%90%88/image-20220227155252945.png" alt="image-20220227155252945"></p><p><strong>上述两张图必须记住</strong></p><h1 id="二-Collection接口和常用方法"><a href="#二-Collection接口和常用方法" class="headerlink" title="二 Collection接口和常用方法"></a>二 Collection接口和常用方法</h1><h2 id="2-1-Collection接口实现类的特点"><a href="#2-1-Collection接口实现类的特点" class="headerlink" title="2.1 Collection接口实现类的特点"></a>2.1 Collection接口实现类的特点</h2><p><code>public interface Collection&lt;E&gt; extends Iterable&lt;E&gt;</code></p><ol><li>Collection实现子类可以存放多个元素, 每个元素可以是Object</li><li>有些Collection的实现类, 可以存放重复的元素, 有些不可以</li><li>有些Colleciton的实现类, 有些是存取有序的(List), 有些是无序的(Set)</li><li>Collction接口没有直接实现子类, 他是通过他的子接口Set 和 List 来实现的</li></ol><h2 id="2-2-Collection接口常用方法-以ArrayList来演示"><a href="#2-2-Collection接口常用方法-以ArrayList来演示" class="headerlink" title="2.2  Collection接口常用方法(以ArrayList来演示)"></a>2.2  Collection接口常用方法(以ArrayList来演示)</h2><h3 id="1-add-添加单个元素"><a href="#1-add-添加单个元素" class="headerlink" title="1. add( ):添加单个元素"></a>1. add( ):添加单个元素</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<span class="hljs-comment">//创建ArrayList, 用接口来接收</span><br><br>list.add(<span class="hljs-string">&quot;jack&quot;</span>); <span class="hljs-comment">// 可以放Object对象及其子类</span><br>list.add(<span class="hljs-number">10</span>); <span class="hljs-comment">//有自动装箱, int ==&gt; Integer</span><br>list.add(<span class="hljs-literal">true</span>);<br>System.out.println(list);<br><br><span class="hljs-comment">//结果 [jack, 10, true]</span><br></code></pre></div></td></tr></table></figure><h3 id="2-remove-删除指定元素"><a href="#2-remove-删除指定元素" class="headerlink" title="2. remove( ): 删除指定元素"></a>2. remove( ): 删除指定元素</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">// 删除第一个元素</span><br>list.remove(<span class="hljs-string">&quot;jack&quot;</span>); <span class="hljs-comment">// 删除jack元素, 不存在也不报错</span><br>list.remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">10</span>)); <span class="hljs-comment">//删除元素10</span><br></code></pre></div></td></tr></table></figure><h3 id="3-contains-查找元素是否存在-返回boolean值"><a href="#3-contains-查找元素是否存在-返回boolean值" class="headerlink" title="3. contains( ): 查找元素是否存在, 返回boolean值"></a>3. contains( ): 查找元素是否存在, 返回boolean值</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.contains(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">true</span>));<br></code></pre></div></td></tr></table></figure><h3 id="4-size-返回元素个数"><a href="#4-size-返回元素个数" class="headerlink" title="4. size( ): 返回元素个数"></a>4. size( ): 返回元素个数</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.size();<br></code></pre></div></td></tr></table></figure><h3 id="5-isEmpty-判断是否为空-返回boolean值"><a href="#5-isEmpty-判断是否为空-返回boolean值" class="headerlink" title="5. isEmpty( ): 判断是否为空, 返回boolean值"></a>5. isEmpty( ): 判断是否为空, 返回boolean值</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.isEmpty();<br></code></pre></div></td></tr></table></figure><h3 id="6-clear-清空"><a href="#6-clear-清空" class="headerlink" title="6. clear( ): 清空"></a>6. clear( ): 清空</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.clear();<br></code></pre></div></td></tr></table></figure><h3 id="7-addAll-添加多个元素"><a href="#7-addAll-添加多个元素" class="headerlink" title="7.addAll( ): 添加多个元素"></a>7.addAll( ): 添加多个元素</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.addAll(list01); <span class="hljs-comment">//将集合list01加入到集合list</span><br></code></pre></div></td></tr></table></figure><h3 id="8-containsAll-查找多个元素是否都存在"><a href="#8-containsAll-查找多个元素是否都存在" class="headerlink" title="8.containsAll( ): 查找多个元素是否都存在"></a>8.containsAll( ): 查找多个元素是否都存在</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.containsAll(list01); <span class="hljs-comment">//判断集合list01是否是list的子集, 返回boolean值</span><br></code></pre></div></td></tr></table></figure><h3 id="9-removeAll-删除子集"><a href="#9-removeAll-删除子集" class="headerlink" title="9. removeAll( ): 删除子集"></a>9. removeAll( ): 删除子集</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">list.removeAll(list01);  <span class="hljs-comment">// 删除list的子集list01</span><br></code></pre></div></td></tr></table></figure><h2 id="2-3-Collection接口遍历元素方式"><a href="#2-3-Collection接口遍历元素方式" class="headerlink" title="2.3 Collection接口遍历元素方式"></a>2.3 Collection接口遍历元素方式</h2><h3 id="2-3-1-使用Iterator-迭代器"><a href="#2-3-1-使用Iterator-迭代器" class="headerlink" title="2.3.1 使用Iterator(迭代器)"></a>2.3.1 使用Iterator(迭代器)</h3><ul><li>基本介绍</li></ul><ol><li>Iterator对象称为迭代器, 主要用遍历Collection 集合中的元素</li><li>所有实现了Collection接口的集合类都有一个iterator( ) 方法, 用于返回一个实现了Iterator接口的对象, 即可以返回一个迭代器</li><li>Iterator的结构</li><li>Iterator 仅用于遍历集合, Iterator本身并不存放对象</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> list.iterator(); <span class="hljs-comment">//得到一个集合的迭代器</span><br><span class="hljs-comment">//hasNext(): 判断是否还有下一个元素</span><br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>    <span class="hljs-comment">//next():指针下移, 将下移以后所指元素返回</span><br>    System.out.println(iterator.next());<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>在调用it.next()方法之前必须要调用it.hasNext()进行检测. 若不调用, 且下一条记录无效, 直接调用it.next()会抛出NoSuchElementException</strong></p><h3 id="2-3-2-增强for循环"><a href="#2-3-2-增强for循环" class="headerlink" title="2.3.2 增强for循环"></a>2.3.2 增强for循环</h3><p>简化版本的迭代器遍历. IDEA快捷键: 输入大写 i</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">for</span>(Object o : list)&#123;<br>    System.out.println(o);<br>&#125;<br><span class="hljs-comment">//底层原理是用的迭代器</span><br></code></pre></div></td></tr></table></figure><h1 id="三-List接口和常用类"><a href="#三-List接口和常用类" class="headerlink" title="三 List接口和常用类"></a>三 List接口和常用类</h1><ol><li>List集合类中元素有序, 且可重复</li><li>List集合中的每个元素都有其对应的顺序索引, 即支持索引</li><li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置, 可以根据序号存取容器中的元素</li><li>JDK API中List接口的实现类有: ArrayList, Vector, LinkedList<h2 id="3-1-List接口常用方法"><a href="#3-1-List接口常用方法" class="headerlink" title="3.1 List接口常用方法"></a>3.1 List接口常用方法</h2><h3 id="3-1-1-void-add-int-index-Object-ele"><a href="#3-1-1-void-add-int-index-Object-ele" class="headerlink" title="3.1.1 void add(int index, Object ele)"></a>3.1.1 void add(int index, Object ele)</h3></li></ol><p>在index位置<strong>插入</strong>ele元素</p><h3 id="3-1-2-boolean-addAll-int-index-Collection-eles"><a href="#3-1-2-boolean-addAll-int-index-Collection-eles" class="headerlink" title="3.1.2 boolean addAll(int index, Collection eles)"></a>3.1.2 boolean addAll(int index, Collection eles)</h3><p>从index位置开始将eles的元素都<strong>添加</strong>进来</p><h3 id="3-1-3-Object-get-int-index"><a href="#3-1-3-Object-get-int-index" class="headerlink" title="3.1.3 Object get(int index)"></a>3.1.3 Object get(int index)</h3><p><strong>获取指定index位置</strong>的元素</p><h3 id="3-1-4-int-indexOf-Object-obj"><a href="#3-1-4-int-indexOf-Object-obj" class="headerlink" title="3.1.4 int indexOf(Object obj)"></a>3.1.4 int indexOf(Object obj)</h3><p>返回obj在集合中<strong>首次出现的位置</strong></p><h3 id="3-1-5-Object-remove-int-index"><a href="#3-1-5-Object-remove-int-index" class="headerlink" title="3.1.5 Object remove(int index)"></a>3.1.5 Object remove(int index)</h3><p><strong>移除</strong>指定的index位置的元素</p><h3 id="3-1-6-Object-set-int-index-Object-obj"><a href="#3-1-6-Object-set-int-index-Object-obj" class="headerlink" title="3.1.6 Object set(int index, Object obj)"></a>3.1.6 Object set(int index, Object obj)</h3><p>将index位置的元素<strong>替换</strong>为obj</p><h3 id="3-1-7-List-subList-int-fromIndex-int-tolndex"><a href="#3-1-7-List-subList-int-fromIndex-int-tolndex" class="headerlink" title="3.1.7 List subList(int fromIndex, int tolndex)"></a>3.1.7 List subList(int fromIndex, int tolndex)</h3><p>返回从fromIndex到toIndex位置的<strong>子集</strong>和</p><h2 id="3-2-ArrayList底层结构和源码分析"><a href="#3-2-ArrayList底层结构和源码分析" class="headerlink" title="3.2 ArrayList底层结构和源码分析"></a>3.2 ArrayList底层结构和源码分析</h2><h3 id="3-2-1-注意事项"><a href="#3-2-1-注意事项" class="headerlink" title="3.2.1 注意事项"></a>3.2.1 注意事项</h3><ol><li>permits all elements, including null, ArrayList 可以加入null, 并且可加入多个</li><li>ArrayList 是由数组来实现数据存储的</li><li>ArrayList 基本等同于Vector, 除了ArrayList 是线程不安全(执行效率高, 源码没有<code>synchronized</code>修饰) , 在多线程情况下, 不建议使用ArrayList</li></ol><h3 id="3-2-2-ArrayList的底层操作机制源码分析"><a href="#3-2-2-ArrayList的底层操作机制源码分析" class="headerlink" title="3.2.2 ArrayList的底层操作机制源码分析"></a>3.2.2 ArrayList的底层操作机制源码分析</h3><ol><li>ArrayList中维护了一个Object类型的数组elementData. <code>transient Object[] elementData;</code>&#x2F;&#x2F;transient修饰后的对象不会被序列化</li><li>当创建ArrayList对象时, 如果使用的是无参构造器, 则初始elementData容量为0, 第一次添加扩容到10, 如果再次扩容, 则扩容至1.5倍</li><li>如果使用的是指定大小的构造器, 则初始化为指定大小, 如果扩容,直接扩容至1.5倍(容量满了自动扩容)</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<span class="hljs-comment">//默认0</span><br>               <span class="hljs-comment">//new ArrayList(8); //初始化大小为8</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>    list.add(i);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">11</span>; i &lt;= <span class="hljs-number">15</span> ; i++) &#123;<span class="hljs-comment">//大于10扩容至15</span><br>    list.add(i);<br>&#125;<br>list.add(<span class="hljs-number">100</span>);<br>list.add(<span class="hljs-number">200</span>);<br>list.add(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">for</span> (Object o :list) &#123;<br>    System.out.println(o);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="3-3-Vector底层结构和源码剖析"><a href="#3-3-Vector底层结构和源码剖析" class="headerlink" title="3.3 Vector底层结构和源码剖析"></a>3.3 Vector底层结构和源码剖析</h2><ol><li>Vector类的定义说明</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector</span>&lt;E&gt;<br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable<br></code></pre></div></td></tr></table></figure><ol start="2"><li>Vector底层也是一个对象数组, protected Object[] elementData;</li><li>Vector 是线程同步的, 即线程安全, Vector类的操作方法带有<code>synchronized</code></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= elementCount)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(index);<br><br>    <span class="hljs-keyword">return</span> elementData(index);<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>在开发中, 需要线程同步安全时, 考虑使用Vector</li></ol><h2 id="3-4-Vector-和-ArrayList-的比较"><a href="#3-4-Vector-和-ArrayList-的比较" class="headerlink" title="3.4 Vector 和 ArrayList 的比较"></a>3.4 Vector 和 ArrayList 的比较</h2><table><thead><tr><th></th><th>底层结构</th><th>版本</th><th>线程安全(同步) 雄安率</th><th>扩容倍速</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>jdk1.2</td><td>不安全, 效率高</td><td>1. 有参1.5倍    2. 无参, 第一次10, 第二次1.5倍扩容</td></tr><tr><td>Vector</td><td>可变数组</td><td>jdk1.0</td><td>安全, 效率不高</td><td>1. 有参2倍      2. 无参 , 默认10, 满了就2倍扩容</td></tr></tbody></table><h2 id="3-5-LinkedList-底层结构"><a href="#3-5-LinkedList-底层结构" class="headerlink" title="3.5 LinkedList 底层结构"></a>3.5 LinkedList 底层结构</h2><ol><li>LinkedList 底层实现了<strong>双向链表</strong>和<strong>双端队列</strong>特点</li><li>可以添加任意元素(元素可以重复), 包括null</li><li>线程不安全, 没有实现同步</li></ol><ul><li>LinkedList底层操作机制<ol><li>LinkedList底层维护了一个双向链表</li><li>LinkedList中维护了两个属性first 和 last 分别指向 首个节点和尾节点</li><li>每个节点(Node对象), 里面又维护了prev, next, item三个属性, 其中通过prev指向前一个, next指向下一个,  item 存放值</li><li>所以LinkedList 的元素的添加和删除, 不是通过数组完成的, 相对来说效率较高</li></ol></li></ul><p>练习: 模拟一个简单的双向链表</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.collection_;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;tom&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">hsp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;hsp&quot;</span>);<br>        jack.next = tom;<br>        tom.pre = jack;<br>        tom.next = hsp;<br>        hsp.pre = tom;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> jack;<br><br>        <span class="hljs-keyword">while</span>(head != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(head);<br>            head = head.next;<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-keyword">public</span> Object item;<span class="hljs-comment">//存放数据</span><br>    <span class="hljs-keyword">public</span> Node next;  <span class="hljs-comment">// 下一个节点</span><br>    <span class="hljs-keyword">public</span> Node pre;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.item = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node name = &quot;</span> + item;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>LinkedList 增删改查</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">linkedList.add(<span class="hljs-number">234</span>);<span class="hljs-comment">// 添加一个元素</span><br>linkedList.remove();<span class="hljs-comment">//默认删除第一个</span><br>linkedList.remove(<span class="hljs-number">2</span>);<span class="hljs-comment">// 删除第3个元素</span><br>linkedList.remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>));<span class="hljs-comment">// 删除指定元素</span><br><br>linkedList.set(<span class="hljs-number">2</span>, <span class="hljs-number">23</span>);<span class="hljs-comment">// 将第3个元素修改为23</span><br>linkedList.get(<span class="hljs-number">3</span>); <span class="hljs-comment">// 得到第4个对象</span><br></code></pre></div></td></tr></table></figure><h2 id="3-6-ArrayList-和-LinkedList-比较"><a href="#3-6-ArrayList-和-LinkedList-比较" class="headerlink" title="3.6 ArrayList 和 LinkedList 比较"></a>3.6 ArrayList 和 LinkedList 比较</h2><table><thead><tr><th></th><th>底层结构</th><th>增删效率</th><th>改查效率</th><th>线程安全</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>较低    数组扩容</td><td>较高</td><td>不安全</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>较高,    通过链表追加</td><td>较低</td><td>不安全  不同步</td></tr></tbody></table><p>大部分情况都是查询操作, 因此大部分使用的是ArrayList</p><h1 id="三-Set-接口和常用类"><a href="#三-Set-接口和常用类" class="headerlink" title="三 Set 接口和常用类"></a>三 Set 接口和常用类</h1><h2 id="3-1-Set接口和常用方法"><a href="#3-1-Set接口和常用方法" class="headerlink" title="3.1 Set接口和常用方法"></a>3.1 Set接口和常用方法</h2><ol><li>无序(添加和取出的顺序不一致), 没有索引</li><li>不允许重复元素, 最多包含一个null</li><li>JDK API 中Set接口的实现类有<ol><li>HashSet</li><li>TreeSet</li><li>…</li></ol></li><li>常用方法, 常用方法和Collection一致</li><li>遍历<ol><li>可以使用迭代器</li><li>增强for循环</li><li>不可以使用索引</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">      <span class="hljs-comment">//以Set接口的实现类 HashSet来将讲解set方法</span><br>      <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>      set.add(<span class="hljs-string">&quot;jone&quot;</span>);<br>      set.add(<span class="hljs-string">&quot;jone&quot;</span>);<span class="hljs-comment">// 不存放重复元素</span><br>      set.add(<span class="hljs-string">&quot;hsp&quot;</span>);<br>      set.add(<span class="hljs-string">&quot;jone&quot;</span>);<br>      set.add(<span class="hljs-string">&quot;null&quot;</span>);<br>      <span class="hljs-comment">//HashSet -&gt; 数组 + 链表</span><br>      System.out.println(set);<span class="hljs-comment">//存放数据无序, 输入输出顺序不一致, 但输出顺序固定</span><br>set.remove(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 删除</span><br><br><br>      <span class="hljs-comment">//遍历</span><br>      <span class="hljs-comment">//方式1 迭代器</span><br>      <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br><br>      <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>          <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span>  iterator.next();<br>          System.out.println(<span class="hljs-string">&quot;迭代器 = &quot;</span> + next);<br>      &#125;<br>      <span class="hljs-comment">//方式2 增强for ---&gt; 本质就是迭代器</span><br>      <span class="hljs-keyword">for</span> (Object o :set) &#123;<br>          System.out.println(<span class="hljs-string">&quot;增强for = &quot;</span> + o);<br>      &#125;<br>      <br>      <span class="hljs-comment">//Set接口对象不能用索引来获取</span><br></code></pre></div></td></tr></table></figure><h2 id="3-2-HashSet-底层机制"><a href="#3-2-HashSet-底层机制" class="headerlink" title="3.2 HashSet 底层机制"></a>3.2 HashSet 底层机制</h2><p><strong>HashSet底层是HashMap</strong>, HashMap底层是(数组 + 链表 —&gt; 红黑树),               数组 + 链表 &#x3D; 邻接表</p><ul><li>添加一个元素时, 先得到hash值, 会转成索引值</li><li>找到存储数据表table, 看这个索引位置是否已经存放的有元素</li><li>如果没有, 直接加入, 如果有, 调用equals比较, 如果相同, 就放弃添加, 如果不相同, 则添加到最后</li><li>在java中, 如果一条链表的元素个数超过TREEIFY_THRESHOLD(默认为8), 并且table的大小 &gt;&#x3D; MIN_TREEIF_CAPACITY(默认64), 就会进行树化(红黑树)</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashset</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>    hashset.add(<span class="hljs-string">&quot;java&quot;</span>);<br>    hashset.add(<span class="hljs-string">&quot;php&quot;</span>);<br>    hashset.add(<span class="hljs-string">&quot;java&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;set = &quot;</span> + hashset);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br>    <span class="hljs-comment">//源码解读</span><br>    <span class="hljs-number">1.</span> 执行...<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br>    <span class="hljs-number">2.</span> 执行...<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br>    <span class="hljs-number">3.</span> 执行...<br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<span class="hljs-comment">//key=添加值, value = PRESENT = private final Object(始终不变)</span><br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br>    <span class="hljs-number">4.</span> 执行...<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<span class="hljs-comment">//得到key对应的hash值</span><br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<span class="hljs-comment">//无符号右移16位</span><br>&#125;<br>    <span class="hljs-number">5.</span> 执行...<br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<span class="hljs-comment">//   定义辅助变量</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<span class="hljs-comment">//table 是 HashMap的一个数组, Node[]类型</span><br>    <span class="hljs-comment">//if 如果当前table 是null 或者 大小为 0 , 就第一次扩容 16</span><br>        n = (tab = resize()).length;<br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>    <span class="hljs-comment">//if  根据key得到的Hash值, 计算该key应该存放到table表的哪个位置, 并赋给辅助变量p</span><br>    <span class="hljs-comment">// 判断p是否为空   空: 表示还没有存放过元素, 创建一个Node, 放在tab[i]</span><br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//开发技巧: 定义变量,在需要的局部变量来创建</span><br>        Node&lt;K,V&gt; e; K k;<span class="hljs-comment">// 辅助变量</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;     <span class="hljs-comment">//如果当前索引位置对应的链表的第一个元素 和 准备添加的key 的Hash值一样,</span><br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))  <span class="hljs-comment">//并且满足待加入key与p指向的node节点key是同一个对象, 或者</span><br>            e = p;                                                 <span class="hljs-comment">//内容相同</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)  <span class="hljs-comment">//如果是个红黑树</span><br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//在转换成红黑树时,判断表是否小于64, 大于64才转红黑树</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol><li>HashSet底层是HashMap</li><li>添加一个元素时, 先得到hash值, 会转成索引值</li><li>找到存储数据表table, 看这个索引位置是否已经存放的元素</li><li>如果没有, 直接加入</li><li>如果有, 调用equals比较(由程序员指定), 如果相同则放弃添加, 如果不相同添加到最后</li><li>在java中, 如果一条链表的元素个数超过TREEIFY_THRESHOLD(默认为8), 并且table的大小 &gt;&#x3D; MIN_TREEIF_CAPACITY(默认64), 就会进行树化(红黑树)</li></ol><blockquote><ol><li>HashSet底层是HashMap, 第一次添加时, table 数组扩容到16, 临界值(threshold) 是16*加载因子(loadFactor) 是0.75 &#x3D; 12</li><li>如果table数组使用到了临界值12, 就会扩容到16*2 &#x3D; 32, 新的临界值就是32 * 0.75 &#x3D;24, 以此类推  <strong>size</strong></li><li>在Java8中, 如果一条链表的元素个数到达TREEIFY_THRESHOLD(默认是8,大于8), &amp;&amp;并且table的大小&gt;&#x3D; MIN_TREEIFY_CAPACITY(默认64), 就会进行树化(红黑树), 否则仍然采用数组扩容机制</li></ol></blockquote><h2 id="3-3-LinkedHashSet"><a href="#3-3-LinkedHashSet" class="headerlink" title="3.3 LinkedHashSet"></a>3.3 LinkedHashSet</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;E&gt;<br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashSet</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable &#123;<br></code></pre></div></td></tr></table></figure><ol><li>LinkedHashSet 是 HashSet的一个子类</li><li>LinkedHashSet 底层是一个LinkedHashMap, 底层维护了一个 数组+ 双向链表</li><li>LinkedHashSet 是根据元素的hashCode 值来决定元素的存储位置, 同时使用链表维护元素的次序(图),  使得元素看起来是以插入顺序保存的</li><li>不允许添加重复元素</li></ol><blockquote><p>说明:</p><ol><li>在LinkedHashSet中维护了一个hash表和双向链表(LinkedHashSet有head和tail)</li><li>每一个节点有before 和after 属性, 这样可以形成双向链表</li><li>在添加一个元素时, 先求hash值, 在求索引时, 确定该元素在table 的位置, 然后将添加的元素加入到双向链表(如果已经存在, 不添加[原则和hashset一样])</li><li>tail.next &#x3D; newElement &#x2F;&#x2F; 示意代码</li><li>newElement.pre &#x3D; tail</li><li>tail &#x3D; newElement;</li><li>这样的话, 遍历LinkedHashSet 也能确保插入顺序和遍历顺序一致</li></ol></blockquote><ul><li>LinkedHashSet 加入顺序和取出顺序一致</li><li>LinkedHashSet 底层维护的是一个LinkedHashMap(HashMap子类)</li><li>底层结构(table 数组+ 双向链表)</li><li>添加第一次时, 直接将数组table扩容到16, 存放的节点是LinkedHashMap$Entry类型, table 的类型是HashMap$Node</li><li>数组是 HashMap$Node[ ] ,  存放的数据是 LinkedHashMap$Entry 类型   (数组多态)</li></ul><h1 id="四-Map接口和常用方法-Map相对更实用"><a href="#四-Map接口和常用方法-Map相对更实用" class="headerlink" title="四 Map接口和常用方法[Map相对更实用]"></a>四 Map接口和常用方法[Map相对更实用]</h1><h2 id="4-1-Map-接口实现类的特点"><a href="#4-1-Map-接口实现类的特点" class="headerlink" title="4.1 Map 接口实现类的特点"></a>4.1 Map 接口实现类的特点</h2><ol><li>Map与Collection并列存在(即两者无关系).    用于保存具有映射关系的数据:  Key - value   即输入的时候要输入       key和value</li><li>Map中的Key 和value 可以是任何引用类型的数据, 会封装到HashMap$Node对象中</li><li>Map中的key 不允许重复, 原因与HashSet一样</li><li>Map中的value 可以重复</li><li>Map中的key可以为null, value 也可以为null, 注意key为null, 只能有一个, value为null 可以多个</li><li>常用的String类作为Map的key</li><li>key 和 value 之间存在单向一对一关系, 即通过指定的key总能找到对应的value</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    map.put(<span class="hljs-string">&quot;No.1&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//k-v</span><br>    map.put(<span class="hljs-string">&quot;No.2&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//无序</span><br>    map.put(<span class="hljs-string">&quot;No.3&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//不同的key, 相同的value可以加进去</span><br>    map.put(<span class="hljs-string">&quot;No.1&quot;</span>,<span class="hljs-string">&quot;张三丰&quot;</span>);<span class="hljs-comment">//不允许重复, 相同的key,直接替换</span><br>    map.put(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>    map.put(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;abc&quot;</span>);  <span class="hljs-comment">// key只能有一个null</span><br>    map.put(<span class="hljs-string">&quot;No.4&quot;</span>, <span class="hljs-literal">null</span>);<span class="hljs-comment">//value 为null可以有多个</span><br>   <span class="hljs-comment">// map.put(&quot;No.1&quot;,&quot;韩顺平&quot;);</span><br>    System.out.println(map);<br>    <span class="hljs-comment">//通过get 方法, 传入key, 会返回对应的value</span><br>    System.out.println(map.get(<span class="hljs-string">&quot;No.1&quot;</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="8"><li>Map存放数据的key-value示意图, 一对k-v 是放在一个Node中的, 有因为Node实现了Entry接口,</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-number">1.</span> k-v 最后是 <span class="hljs-type">HashMap$Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> newNode(hash, key, value, <span class="hljs-literal">null</span>);<br><span class="hljs-number">2.</span> k-v 为了方便程序员的遍历, 还会创建 EntrySet 集合, 该集合存放的元素的类型是Entry, 而一个Entry 对象就有key 和 value<br>    EntrySet&lt;Entry&lt;K, V&gt;&gt;<span class="hljs-comment">//引用指向</span><br>    EntrySet中, 定义的类型是Map.Entry(编译类型), 但实际上存放的还是 HashMap$Node(运行类型)<br>    这是因为HashMap$Node <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry<br></code></pre></div></td></tr></table></figure><p><strong>HashMap$Node对象 (1<del>n对 k-v )   ——转换——-&gt; Entry类 对象(1</del>n个Entry对象) ———存放———&gt; 1个EntrySet集合: 方便程序员处理数据</strong></p><p>table就是HashMap$Node数组</p><h2 id="4-2-Map接口的常用方法"><a href="#4-2-Map接口的常用方法" class="headerlink" title="4.2 Map接口的常用方法"></a>4.2 Map接口的常用方法</h2><ol><li>put</li><li>remove</li><li>get</li><li>size</li><li>isEmpty</li><li>keySet() &#x2F;&#x2F; 返回key的set对象引用</li><li>clear</li><li>containsKey: 查找key是否存在</li></ol><h2 id="4-3-Map接口遍历方法"><a href="#4-3-Map接口遍历方法" class="headerlink" title="4.3 Map接口遍历方法"></a>4.3 Map接口遍历方法</h2><ol><li>containsKey: 查找key 是否存在</li><li>keySet: 获取所有的key</li><li>entrySet( ): 获取所有关系</li><li>values: 获取所有的值value</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;No.1&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//k-v</span><br>        map.put(<span class="hljs-string">&quot;No.2&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//无序</span><br>        map.put(<span class="hljs-string">&quot;No.3&quot;</span>,<span class="hljs-string">&quot;韩顺平&quot;</span>);<span class="hljs-comment">//不同的key, 相同的value可以加进去</span><br>        map.put(<span class="hljs-string">&quot;No.1&quot;</span>,<span class="hljs-string">&quot;张三丰&quot;</span>);<span class="hljs-comment">//不允许重复, 相同的key,直接替换</span><br>        map.put(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>        map.put(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;abc&quot;</span>);  <span class="hljs-comment">// key只能有一个null</span><br>        map.put(<span class="hljs-string">&quot;No.4&quot;</span>, <span class="hljs-literal">null</span>);<span class="hljs-comment">//value 为null可以有多个</span><br>       <span class="hljs-comment">// map.put(&quot;No.1&quot;,&quot;韩顺平&quot;);</span><br>        System.out.println(map);<br>        <span class="hljs-comment">//通过get 方法, 传入key, 会返回对应的value</span><br>        System.out.println(map.get(<span class="hljs-string">&quot;No.1&quot;</span>));<br><br>        <span class="hljs-comment">//第一组: 先取出所有的key, 再取出key对应的value</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> map.keySet();<br><br>        <span class="hljs-comment">//方式一</span><br>        System.out.println(<span class="hljs-string">&quot;====方式1====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object o :key) &#123;<br>            System.out.println(o + <span class="hljs-string">&quot;-&quot;</span> + map.get(o));<br>        &#125;<br><br>        <span class="hljs-comment">//方式二</span><br>        System.out.println(<span class="hljs-string">&quot;====方式2====&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> key.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span>  iterator.next();<br>            System.out.println(o + <span class="hljs-string">&quot;-&quot;</span> + map.get(o));<br><br>        &#125;<br>        <span class="hljs-comment">//第二组: values</span><br>        System.out.println(<span class="hljs-string">&quot;====方式1====&quot;</span>);<br>        <span class="hljs-comment">//取出所有value</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br>        <span class="hljs-comment">//1 迭代器, 增强for</span><br><br>        <span class="hljs-comment">//第三组: 通过EntrySet 来获取k-v</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.entrySet();<br>        <span class="hljs-comment">//增强for</span><br>        <span class="hljs-keyword">for</span> (Object entry :set) &#123;<br>            <span class="hljs-comment">//将entry转换为Map.Entry, 向下转型</span><br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry) entry;<br>            System.out.println(m.getKey() + <span class="hljs-string">&quot;====&quot;</span> + m.getValue());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;3-迭代器&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator1</span> <span class="hljs-operator">=</span> set.iterator();<br>        <span class="hljs-keyword">while</span> (iterator1.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span>  iterator1.next();<br>           <span class="hljs-comment">// System.out.println(next.getClass());</span><br>            <span class="hljs-comment">//向下转型</span><br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry)next;<br>            System.out.println(m.getKey()+ <span class="hljs-string">&quot;==00==&quot;</span> + m.getValue());<br>        &#125;<br>    &#125;<br><br>总结: <span class="hljs-number">1</span> keySet() 返回所有key<br>      <span class="hljs-number">2</span> entrySet() 返回所有k-v对, &lt;---Map.Entry<br></code></pre></div></td></tr></table></figure><h2 id="4-4-HashMap小结"><a href="#4-4-HashMap小结" class="headerlink" title="4.4 HashMap小结"></a>4.4 HashMap小结</h2><ol><li>Map接口的常用实现类, HashMap, Hashtable, 和 Properties</li><li><strong>HashMap  是 Map 接口使用频率最高的实现类</strong></li><li>HashMap 是以key-value 对的方式来存储数据(HashMap$Node类型)</li><li>key不能重复, 但是值可以重复, 允许使用null键和null值</li><li>如果添加相同的key, 则会覆盖原来的k-v</li><li>与HashSet一样, 不保证映射顺序, 因为底层是以hash表的方式来存储的(HashMap底层是  数组+ 链表 + 红黑树)</li><li>HashMap 没有实现同步, 因此是线程不安全的, 没有进做同步互斥的操作, 无synchronized关键字</li></ol><h2 id="4-5-Hashtable-的基本介绍"><a href="#4-5-Hashtable-的基本介绍" class="headerlink" title="4.5 Hashtable 的基本介绍"></a>4.5 Hashtable 的基本介绍</h2><ol><li>存放的元素是键值对: 即 k-v</li><li><strong>Hashtable的键和值都不能为null</strong>, 否则会抛出空指针异常</li><li><strong>Hashtable使用方法基本上和HashMap一样</strong></li><li>HashTable 是线程安全的, HashMap是是线程不安全的</li><li>底层有一个Hashtable$Entry[ ] 数组 初始化大小为11 ——–&gt; table表</li><li>临界值 &#x3D; 11 * 0.75 &#x3D; 8 (向下取整)</li><li>键值对放在一个Entry对象中, 这个对象链接到table表中</li><li>数组扩容  &#x3D;  原容量  &lt;&lt; 2 + 1</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 测试用例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashTable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>        hashTable.put(<span class="hljs-string">&quot;No.1&quot;</span>, <span class="hljs-string">&quot;4132&quot;</span>);<br><span class="hljs-comment">//        hashTable.put(null, &quot;4132&quot;);//NullPointerException</span><br><span class="hljs-comment">//        hashTable.put(&quot;No.2&quot;, null);//NullPointerException</span><br>        hashTable.put(<span class="hljs-string">&quot;No.3&quot;</span>, <span class="hljs-string">&quot;4132&quot;</span>);<br>        hashTable.put(<span class="hljs-string">&quot;No.4&quot;</span>, <span class="hljs-string">&quot;45254&quot;</span>);<br>        hashTable.put(<span class="hljs-string">&quot;No.5&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<span class="hljs-comment">//</span><br>        hashTable.put(<span class="hljs-string">&quot;No.6&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<span class="hljs-comment">//</span><br>        hashTable.put(<span class="hljs-string">&quot;No.7&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<span class="hljs-comment">//</span><br>        hashTable.put(<span class="hljs-string">&quot;No.8&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<span class="hljs-comment">//</span><br>        hashTable.put(<span class="hljs-string">&quot;No.9&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<span class="hljs-comment">// &gt;= 8 扩容</span><br>        hashTable.put(<span class="hljs-string">&quot;No.10&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<br>        hashTable.put(<span class="hljs-string">&quot;No.3&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<br>        hashTable.put(<span class="hljs-string">&quot;No.3&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<br>        hashTable.put(<span class="hljs-string">&quot;No.3&quot;</span>, <span class="hljs-string">&quot;1111111111&quot;</span>);<br>        System.out.println(hashTable);<br><br>    &#125;<br></code></pre></div></td></tr></table></figure><table><thead><tr><th></th><th>版本</th><th>线程安全(同步)</th><th>效率</th><th>允许null键, null值</th></tr></thead><tbody><tr><td>HashMap</td><td>1.2</td><td>不安全</td><td>高</td><td>可以</td></tr><tr><td>Hashtable</td><td>1.0</td><td>安全</td><td>较低</td><td>不可以</td></tr></tbody></table><p>HashMap没有对并发操作设防, 因此效率更高</p><h3 id="4-5-1-Properties"><a href="#4-5-1-Properties" class="headerlink" title="4.5.1 Properties"></a>4.5.1 Properties</h3><ol><li>Properties 类继承自Hashtable类并且实现了Map接口, 也是使用一种键值对的形式来保存数据</li><li>它的使用特点和Hashtable类似</li><li>Properties 还可以用于 从 XXX.properties文件中, 加载数据到Properties对象, 并进行读取和修改</li><li>说明: 工作后  xxx.properties 文件常作为配置文件,  涉及到IO流的知识</li><li><a href="https://www.cnblogs.com/xudong-bupt/p/3758136.html">Java 读写Properties配置文件</a></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">110</span>);<span class="hljs-comment">//增加</span><br>    <span class="hljs-comment">//properties.put(null,null);//不能为null k-v 对</span><br>    properties.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-string">&quot;4321&quot;</span>); <span class="hljs-comment">// 若相同key. value替换</span><br>    System.out.println();<br>    properties.get(<span class="hljs-string">&quot;john&quot;</span>); <span class="hljs-comment">// value 不必是String或其子类</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;john&quot;</span>);<span class="hljs-comment">//value 必须是String类型或其子类才能返回, 否则返回null</span><br>    System.out.println(obj);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="五-TreeSet-与-TreeMap"><a href="#五-TreeSet-与-TreeMap" class="headerlink" title="五 TreeSet 与 TreeMap"></a>五 TreeSet 与 TreeMap</h1><h1 id="5-1-TreeSet"><a href="#5-1-TreeSet" class="headerlink" title="5.1 TreeSet"></a>5.1 TreeSet</h1><ol><li>当使用无参构造器是, 加入数据后仍然是无序的</li><li>使用TreeSet 提供的一个构造器:    TreeSet( 实现comparator接口的匿名内部类)添加的元素按照字符串大小来排序</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>            <span class="hljs-comment">//长度 ((String)o1).length() - ((String)o1).length()  按长度排序, 但不能加入相同长度key了</span><br>            <span class="hljs-keyword">return</span> ((String)o1).compareTo(((String)o2));<span class="hljs-comment">//前面减去后面ASCILL, 逐个字符比较,直至不同</span><br>        &#125;<br>    &#125;);<span class="hljs-comment">//匿名内部类传送给TreeSet</span><br><br><br>    treeSet.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;2&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;3&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;4&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;5&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;A&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;AC&quot;</span>);<br>    treeSet.add(<span class="hljs-string">&quot;ABVA&quot;</span>);<br><br>    System.out.println(treeSet);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-2-TreeMap"><a href="#5-2-TreeMap" class="headerlink" title="5.2 TreeMap"></a>5.2 TreeMap</h2><ol><li>无参构造器是无序的</li><li>实现类Comparator接口的匿名内部类, 可以自定义顺序排序</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>            <span class="hljs-keyword">return</span> ((String)o1).compareTo((String)o2);<span class="hljs-comment">//比较的key</span><br>        &#125;<br>    &#125;);<br>    treeMap.put(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-string">&quot;杰克&quot;</span>);<br>    treeMap.put(<span class="hljs-string">&quot;rose&quot;</span>,<span class="hljs-string">&quot;罗丝&quot;</span>);<br>    treeMap.put(<span class="hljs-string">&quot;kristin&quot;</span>,<span class="hljs-string">&quot;克里斯汀&quot;</span>);<br>    treeMap.put(<span class="hljs-string">&quot;zz&quot;</span>,<span class="hljs-string">&quot;渣渣&quot;</span>);<br><br>    System.out.println(treeMap);<br>&#125;   <br></code></pre></div></td></tr></table></figure><h1 id="六-总结-开发中如何选择集合实现类"><a href="#六-总结-开发中如何选择集合实现类" class="headerlink" title="六 总结: 开发中如何选择集合实现类"></a>六 总结: 开发中如何选择集合实现类</h1><p>在开发中, 选择什么集合实现类, 主要取决于业务操作特点, 然后根据集合实现类特性进行选择, 分析如下:</p><ol><li>先判断存储的类型(一组对象或一组键值对)</li><li>一组对象: Collection 接口<ul><li>允许重复: List接口<ul><li>增删多: LinkedList(底层维护了一个双向链表)</li><li>改查多: ArrayList( 底层维护了一个Object类型的数组)</li></ul></li><li>不允许重复: Set 接口<ul><li>无序: HashSet  ( 底层是HashMap, 维护了一个哈希表, 即数组+ 链表 + 红黑树)</li><li>有序: TreeSet   底层是TreeMap</li><li>插入和取出一致: LinkedHashSet   数组 + 双向链表</li></ul></li></ul></li><li>一组键值对: Map<ul><li><strong>键无序: HashMap   底层是数组+ 链表 + 红黑树</strong>    </li><li>键排序: TreeMap</li><li>键插入和取出顺序一致: LinkedHashMap : 底层HashMap[ ]</li><li>读取文件: Properties   父类Hashtable</li></ul></li></ol><h1 id="七-工具类-Collections"><a href="#七-工具类-Collections" class="headerlink" title="七 工具类 Collections"></a>七 工具类 Collections</h1><ol><li>Collections 是一个操作Set, LIst 和Map 等集合的工具类</li><li>Collections 中提供了一系列静态方法对集合元素进行排序, 查询和修改等操作</li></ol><ul><li>​    第一组方法List<ul><li>reverse(List)   反转List中元素的顺序</li><li>frequency( List, Object)</li><li>shuffle(List)    对List集合元素进行随机排序&#x2F;&#x2F;&#x2F;   洗牌</li><li>sort(List) : 根据元素的自然顺序对指定List集合元素按升序排序</li><li>sort(List, Comparator): 自定义顺序排序</li><li>swap(List, int, int): 将指定list 集合中的i处元素和j处元素进行交换</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;d&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;e&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;f&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;g&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;h&quot;</span>);<br>    System.out.println(list);<br>    Collections.reverse(list);<span class="hljs-comment">//反转</span><br>    System.out.println(list);<span class="hljs-comment">//</span><br><br>    System.out.println(Collections.frequency(list,<span class="hljs-string">&quot;a&quot;</span>));<span class="hljs-comment">//频率 int</span><br>    Collections.shuffle(list);<span class="hljs-comment">//洗牌, 用于抽奖活动等</span><br>    System.out.println(list);<br><br>    Collections.sort(list);<br>    System.out.println(<span class="hljs-string">&quot;自然排序(字符串)= &quot;</span> + list);<br><br>    Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<span class="hljs-comment">//自定义排序</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>            <span class="hljs-keyword">return</span> ((String)o1).length() - ((String)o2).length();<br>        &#125;<br>    &#125;);<br><br>    Collections.swap(list,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">//两处下标交换, 范围超出抛出越界异常</span><br>    System.out.println(<span class="hljs-string">&quot;交换后 = &quot;</span> + list);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>第二组方法 Collection<ul><li>Object max(Collection): 根据元素的自然排序, 返回指定集合的最大值</li><li>Object max(Collection, Comparator): 自定义顺序</li><li>min 同上</li><li>int frequency( Collection, Object)</li><li>void copy(LIst dest, LIst src) : 将src中的内容复制到dest中   要求: dest.size( ) &gt;&#x3D; src.size( )    &#x3D;&#x3D;&#x3D;&gt; destination , source</li><li>boolean replaceAll(LIst list , Object oldVal, Object newVal) : 使用新值替换List对象的所有旧值</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;自然Max = &quot;</span> + Collections.max(list));<br> System.out.println(Collections.max(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>()&#123;<span class="hljs-comment">//自定义排序</span><br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>         <span class="hljs-keyword">return</span> ((String)o1).compareTo((String)o2);<br>     &#125;<br> &#125; ));<br> System.out.println(<span class="hljs-string">&quot;list.size() = &quot;</span> + list.size());<br> <span class="hljs-type">List</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(list.size());<span class="hljs-comment">//定义了初始空间, 但是每初始元素仍为0 , 所以list1.size() = 0</span><br> System.out.println(list1.size() + <span class="hljs-string">&quot; &lt;== list1.size()&quot;</span>);<br><br> <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>     list1.add(i);<br> &#125;<br><br> Collections.copy(list1,list);<br> System.out.println(<span class="hljs-string">&quot;list1 = &quot;</span> + list1);<br> Collections.replaceAll(list,<span class="hljs-string">&quot;f&quot;</span>,<span class="hljs-string">&quot;爱抚&quot;</span>);<span class="hljs-comment">//将list中&quot;f&quot;替换为新的&quot;爱抚&quot;</span><br> System.out.println(<span class="hljs-string">&quot;替换后 = &quot;</span> + list);<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟画笔 - 基于OpenCV</title>
      <link href="/2022/02/27/%E8%99%9A%E6%8B%9F%E7%94%BB%E7%AC%94/"/>
      <url>/2022/02/27/%E8%99%9A%E6%8B%9F%E7%94%BB%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><blockquote><p>本项目用到的核心技术是颜色检查以及轮廓&#x2F;形状检查</p></blockquote><h1 id="一、画面获取"><a href="#一、画面获取" class="headerlink" title="一、画面获取"></a>一、画面获取</h1><p>​    对于这个项目，我们首先需要找到我们摄像头画面中的颜色，将RGB通道转换为HSV颜色模型并获取图像的轮廓。然后我们可以在图像轮廓中心放置绘制点，从而进行绘制。不论是哪一种颜色，都可以找到其轮廓，并放置绘制点进行图案的绘制。</p><p>​    因此， 我们首先需要的是通过OpenCV库函数获取连接笔记本的摄像头，并将获取的画面进行三通道分离，从而检测出特定颜色的轮廓.</p><p>获取摄像头画面的代码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">cap = cv2.VideoCapture(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 这里将视频的路径填入摄像头ID即可, 0使用默认摄像头(笔记本/内置)</span><br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">3</span>,<span class="hljs-number">640</span>)   <span class="hljs-comment">#宽, 编号为3   3:宽度, 4:高度 10:亮度, 11:对比度</span><br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">4</span>, <span class="hljs-number">480</span>)  <span class="hljs-comment">#高, 编号为4</span><br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>)  <span class="hljs-comment">#亮度100, 编号为10</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>     success, img = cap.read()<br>     cv2.imshow(<span class="hljs-string">&quot;Video&quot;</span>, img) <br>     <span class="hljs-keyword">if</span>(cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>)):<br>         <span class="hljs-keyword">break</span><br>        <br></code></pre></div></td></tr></table></figure><h1 id="二、颜色检测"><a href="#二、颜色检测" class="headerlink" title="二、颜色检测"></a>二、颜色检测</h1><p>​    获取画面之后，接下来我们要做的便是找到画面中特定的颜色（期望识别的颜色，通过设置操纵杆自己调）</p><p>定义一个函数来找到特定的颜色</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">findColor</span>(<span class="hljs-params">img</span>):<br>    imgHSV = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)<br>    lower = np.array([h_min,s_min,v_min])<br>    upper = np.array([h_max,s_max,v_max])<br>    mask = cv2.inRange(imgHSV,lower,upper)<br>    cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>,mask)<br></code></pre></div></td></tr></table></figure><p>这里我们可以定义一个数组来存放不同颜色的HSV值以及灰度。再改写并调用此函数，从而可以实现多个颜色的画笔进行绘制。</p><p>首先通过颜色检测来获取不同的颜色HSV值: </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>frameWidth = <span class="hljs-number">640</span>*<span class="hljs-number">0.5</span><br>frameHeight = <span class="hljs-number">480</span>*<span class="hljs-number">0.5</span><br>cap = cv2.VideoCapture(<span class="hljs-number">0</span>)<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">3</span>, frameWidth)<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">4</span>, frameHeight)<br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">10</span>,<span class="hljs-number">150</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">empty</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">pass</span><br><br>cv2.namedWindow(<span class="hljs-string">&quot;HSV&quot;</span>)   <span class="hljs-comment">########## 初始化</span><br>cv2.resizeWindow(<span class="hljs-string">&quot;HSV&quot;</span>,<span class="hljs-number">640</span>,<span class="hljs-number">240</span>)<br>cv2.createTrackbar(<span class="hljs-string">&quot;HUE Min&quot;</span>,<span class="hljs-string">&quot;HSV&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">179</span>,empty)<br>cv2.createTrackbar(<span class="hljs-string">&quot;SAT Min&quot;</span>,<span class="hljs-string">&quot;HSV&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,empty)<br>cv2.createTrackbar(<span class="hljs-string">&quot;VALUE Min&quot;</span>,<span class="hljs-string">&quot;HSV&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,empty)<br>cv2.createTrackbar(<span class="hljs-string">&quot;HUE Max&quot;</span>,<span class="hljs-string">&quot;HSV&quot;</span>,<span class="hljs-number">179</span>,<span class="hljs-number">179</span>,empty)<br>cv2.createTrackbar(<span class="hljs-string">&quot;SAT Max&quot;</span>,<span class="hljs-string">&quot;HSV&quot;</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,empty)<br>cv2.createTrackbar(<span class="hljs-string">&quot;VALUE Max&quot;</span>,<span class="hljs-string">&quot;HSV&quot;</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,empty)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><br>    o, img = cap.read()<br>    imgHsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)<br><span class="hljs-comment"># 添加数值杆, 让希望的颜色变为白色(以所期望的颜色作为笔头)    颜色越鲜艳越好</span><br>    h_min = cv2.getTrackbarPos(<span class="hljs-string">&quot;HUE Min&quot;</span>,<span class="hljs-string">&quot;HSV&quot;</span>)<br>    h_max = cv2.getTrackbarPos(<span class="hljs-string">&quot;HUE Max&quot;</span>, <span class="hljs-string">&quot;HSV&quot;</span>)<br>    s_min = cv2.getTrackbarPos(<span class="hljs-string">&quot;SAT Min&quot;</span>, <span class="hljs-string">&quot;HSV&quot;</span>)<br>    s_max = cv2.getTrackbarPos(<span class="hljs-string">&quot;SAT Max&quot;</span>, <span class="hljs-string">&quot;HSV&quot;</span>)<br>    v_min = cv2.getTrackbarPos(<span class="hljs-string">&quot;VALUE Min&quot;</span>, <span class="hljs-string">&quot;HSV&quot;</span>)<br>    v_max = cv2.getTrackbarPos(<span class="hljs-string">&quot;VALUE Max&quot;</span>, <span class="hljs-string">&quot;HSV&quot;</span>)<br>    <span class="hljs-built_in">print</span>(h_min)<br><br>    lower = np.array([h_min,s_min,v_min])<br>    upper = np.array([h_max,s_max,v_max])<br>    mask = cv2.inRange(imgHsv,lower,upper)<br>    result = cv2.bitwise_and(img,img, mask = mask)<br><br>    mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)<br>    hStack = np.hstack([img,mask,result])<br>    <span class="hljs-comment">#cv2.imshow(&#x27;Original&#x27;, img)</span><br>    <span class="hljs-comment">#cv2.imshow(&#x27;HSV Color Space&#x27;, imgHsv)</span><br>    <span class="hljs-comment">#cv2.imshow(&#x27;Mask&#x27;, mask)</span><br>   <span class="hljs-comment">#cv2.imshow(&#x27;Result&#x27;, result)</span><br>    cv2.imshow(<span class="hljs-string">&#x27;Horizontal Stacking&#x27;</span>, hStack)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br><br>cap.release()<br>cv2.destroyAllWindows()<br></code></pre></div></td></tr></table></figure><p>以上代码运行后就可以通过调节HSV操作杆来识别镜头中的颜色（期望识别的颜色）</p><p><img src="/2022/02/27/%E8%99%9A%E6%8B%9F%E7%94%BB%E7%AC%94/image-20220324185204443.png" alt="image-20220324185204443"></p><p><img src="/2022/02/27/%E8%99%9A%E6%8B%9F%E7%94%BB%E7%AC%94/image-20220324222559879.png" alt="image-20220324222559879"></p><p>如果颜色识别很多噪点，是因为光线太暗。也不要在有颜色的灯光下进行识别，否则只能在调节的时候所处的环境下才能够成功识别。当然，最好是在特定的灯光下，如果是变化的光线比如白天，调节得到的值下次用还得调（亲身经历🤕）</p><p>识别好颜色后， 通过记录操作杆的数值，并将其放入<code>myColors</code>数组中，进行后续操作。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">myColors = [[<span class="hljs-number">30</span>,<span class="hljs-number">108</span>,<span class="hljs-number">114</span>,<span class="hljs-number">179</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>] <span class="hljs-comment"># 绿色</span><br>           ] <span class="hljs-comment"># 颜色数组，如果有其他颜色，可以添加 </span><br><br><br><span class="hljs-comment"># 画笔的颜色</span><br>myColorValues = [[<span class="hljs-number">51</span>,<span class="hljs-number">153</span>,<span class="hljs-number">255</span>],    <span class="hljs-comment">##BGR not RGB</span><br>                 [<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>],   <br>                 [<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>]]<br><br></code></pre></div></td></tr></table></figure><p>通过获取到特定的颜色HSV值，接下来可以进行颜色检测以及轮廓的获取了</p><blockquote><p>注意：为了固定识别颜色，这里是通过获取到的HSV值，来识别新开镜头中的颜色，从而对其轮廓进行识别，读者切勿混淆上述手动获取的值和接下来的自动检测</p></blockquote><ul><li>颜色检测</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个检测颜色的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findColor</span>(<span class="hljs-params">img,myColors,myColorValues</span>):<br>    imgHSV = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)<br>    count = <span class="hljs-number">0</span> <span class="hljs-comment"># 用count来记录 当前颜色</span><br>    newPoints = []<br><br><br>    <span class="hljs-comment"># 循环检测myColor数组中的颜色</span><br>    <span class="hljs-keyword">for</span> color <span class="hljs-keyword">in</span> myColors:<br>        lower = np.array(color[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br>        upper = np.array(color[<span class="hljs-number">3</span>:<span class="hljs-number">6</span>])<br>        mask = cv2.inRange(imgHSV,lower,upper)<br>        x, y = getContours(mask) <span class="hljs-comment"># 获取轮廓,然后得到中心最高点</span><br>        cv2.circle(imgResult,(x,y),<span class="hljs-number">10</span>, myColorValues[count], cv2.FILLED) <span class="hljs-comment"># 绘制圆点</span><br>        <span class="hljs-keyword">if</span> x!= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y != <span class="hljs-number">0</span>:<br>            newPoints.append([x,y,count])<span class="hljs-comment"># 这种条件下添加到我们的点集</span><br>        count += <span class="hljs-number">1</span><br><br><br>        <span class="hljs-comment">#cv2.imshow(str(color[0]),mask)</span><br>    <span class="hljs-keyword">return</span> newPoints<br></code></pre></div></td></tr></table></figure><h1 id="三、轮廓获取"><a href="#三、轮廓获取" class="headerlink" title="三、轮廓获取"></a>三、轮廓获取</h1><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个函数来获取轮廓</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getContours</span>(<span class="hljs-params">img</span>):<br>    contours, hierarchy = cv2.findContours(img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE) <span class="hljs-comment"># 检索获取极端的外部轮廓</span><br>    x,y,w,h = <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> cnt <span class="hljs-keyword">in</span> contours: <span class="hljs-comment"># 遍历每一个图形</span><br>        area = cv2.contourArea(cnt)<br>        <span class="hljs-comment"># print(area)</span><br><br>        <span class="hljs-comment">#给像素点大于500的绘制轮廓</span><br>        <span class="hljs-keyword">if</span> area&gt;<span class="hljs-number">500</span>: <span class="hljs-comment"># 500像素</span><br>          <span class="hljs-comment">#  cv2.drawContours(imgResult,cnt,-1,(255,0,0),3) # 蓝色, 厚度3 绘制轮廓</span><br>            peri = cv2.arcLength(cnt,<span class="hljs-literal">True</span>)<span class="hljs-comment">#求周长</span><br>            <span class="hljs-comment"># print(peri)</span><br>            approx = cv2.approxPolyDP(cnt,<span class="hljs-number">0.02</span>*peri,<span class="hljs-literal">True</span>) <span class="hljs-comment">#  拟合计算拐点 0.02分辨率</span><br>            <span class="hljs-comment"># print(len(approx))</span><br>            <span class="hljs-comment"># objCor = len(approx)</span><br>            <span class="hljs-comment"># #检测边框</span><br>            x, y, w, h = cv2.boundingRect(approx) <span class="hljs-comment"># x,y是起点, w,h 是宽高</span><br><br>    <span class="hljs-keyword">return</span> x+w//<span class="hljs-number">2</span>,y  <span class="hljs-comment"># 返回中心点的最高点</span><br></code></pre></div></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/2022/02/27/%E8%99%9A%E6%8B%9F%E7%94%BB%E7%AC%94/image-20220324222235949.png" alt="image-20220324222235949"></p><p>获取轮廓之后，可以根据实际情况设置特定的一个点来作为笔尖。比如这里可以设置矩形的中心点来作为虚拟画笔的笔尖。为了便于处理，我设置的是图案的顶点作为笔尖</p><p><img src="/2022/02/27/%E8%99%9A%E6%8B%9F%E7%94%BB%E7%AC%94/image-20220324222856333.png" alt="image-20220324222856333"></p><h1 id="四、绘制图案"><a href="#四、绘制图案" class="headerlink" title="四、绘制图案"></a>四、绘制图案</h1><p>总所周知，任意的曲线都可以看作是无数的点连接而成。因此在获得图像中的一个特殊点之后，便可以将这个点记录到一个数组中，通过不断绘制这个数组中的点，就可以达到绘制线条的效果，从而实现虚拟画笔的效果</p><ul><li>绘制单个圆点</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"># 定义绘制画布<br>def <span class="hljs-title function_">drawOnCanvas</span><span class="hljs-params">(myPoints,myColorValues)</span>:<br>    <span class="hljs-keyword">for</span> point in myPoints:<br>        cv2.circle(imgResult, (point[<span class="hljs-number">0</span>], point[<span class="hljs-number">1</span>]), <span class="hljs-number">10</span>, myColorValues[point[<span class="hljs-number">2</span>]], cv2.FILLED)  # 绘制圆点选择画笔颜色<br></code></pre></div></td></tr></table></figure><ul><li>循环获取当前画面</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    success, img = cap.read()<br>    img = cv2.flip(img,<span class="hljs-number">240</span>)<br>    imgResult = img.copy()<br>    newPoints = findColor(img,myColors, myColorValues)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(newPoints) != <span class="hljs-number">0</span>: <span class="hljs-comment"># 拆分后放入mypints</span><br>        <span class="hljs-keyword">for</span> newP <span class="hljs-keyword">in</span> newPoints:<br>            myPoints.append(newP)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(myPoints) != <span class="hljs-number">0</span>:<br>        drawOnCanvas(myPoints,myColorValues)<br>    cv2.imshow(<span class="hljs-string">&quot;Result&quot;</span>, imgResult)<br>    <span class="hljs-keyword">if</span>(cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>)):<br>        <span class="hljs-keyword">break</span><br><br></code></pre></div></td></tr></table></figure><ul><li><p>效果</p><p><img src="https://img-blog.csdnimg.cn/f016ef58e2464c6bae69f1f505869dab.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JOd6bifeA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="五角星"><img src="/2022/02/27/%E8%99%9A%E6%8B%9F%E7%94%BB%E7%AC%94/image-20220324224132888.png" alt="image-20220324224132888"></p></li></ul><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>​    通过以上的操作，虽然能够实现虚拟画笔的效果，但是仍然有许多不足之处。比如绘制点的频率还没有调节，当画笔移动速度过快，将会导致线条不连续，形成一个个小点。比如下述结果：</p><p><img src="/2022/02/27/%E8%99%9A%E6%8B%9F%E7%94%BB%E7%AC%94/image-20220324200954716.png" alt="image-20220324200954716"></p><p>​    此外，只要画笔出现在镜头中，就能够绘制。这样会导致控制何时停何时开始，让绘制图形的操作变得难于控制。并且能够识别多个颜色点，这就导致同意画面能够有多个画笔。因此后续还应该改进这些缺陷，让画笔能够更加人性化。</p><ul><li>测试代码(整合)</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">cap = cv2.VideoCapture(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 这里将视频的路径填入摄像头ID即可, 0使用默认摄像头(笔记本)</span><br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">3</span>,<span class="hljs-number">640</span>)   <span class="hljs-comment">#宽, 编号为3   3:宽度, 4:高度 10:亮度, 11:对比度</span><br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">4</span>, <span class="hljs-number">480</span>)  <span class="hljs-comment">#高, 编号为4</span><br>cap.<span class="hljs-built_in">set</span>(<span class="hljs-number">10</span>,<span class="hljs-number">150</span>)  <span class="hljs-comment">#亮度100, 编号为10</span><br><br><span class="hljs-comment"># 通过colorPicker.py 找出颜色</span><br><span class="hljs-comment"># 下面是蓝色,紫色                      [5,107,0,19,255,255],黄色,</span><br><span class="hljs-comment"># myColors = [ [0,103,118,120,255,255], # 绿色</span><br><span class="hljs-comment">#             [133,56,0,159,156,255],</span><br><span class="hljs-comment">#            [57,76,0,100,255,255]]    # 这些是需要检测的颜色</span><br>myColors = [[<span class="hljs-number">30</span>,<span class="hljs-number">108</span>,<span class="hljs-number">114</span>,<span class="hljs-number">179</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>]]<br><br><span class="hljs-comment"># 下面是画笔的颜色</span><br>myColorValues = [[<span class="hljs-number">51</span>,<span class="hljs-number">153</span>,<span class="hljs-number">255</span>],    <span class="hljs-comment">##BGR  not RGB</span><br>                 [<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>],<br>                 [<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>]]<br><br><span class="hljs-comment">#</span><br>myPoints =  []   <span class="hljs-comment">## [x,y,colorId]</span><br><br><br><br><span class="hljs-comment"># 定义一个检测颜色的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findColor</span>(<span class="hljs-params">img,myColors,myColorValues</span>):<br>    imgHSV = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)<br>    count = <span class="hljs-number">0</span> <span class="hljs-comment"># 用count来记录 当前颜色</span><br>    newPoints = []<br><br><br>    <span class="hljs-comment"># 循环检测mycolor中的颜色数值HSV</span><br>    <span class="hljs-keyword">for</span> color <span class="hljs-keyword">in</span> myColors:<br>        lower = np.array(color[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br>        upper = np.array(color[<span class="hljs-number">3</span>:<span class="hljs-number">6</span>])<br>        mask = cv2.inRange(imgHSV,lower,upper)<br>        x, y = getContours(mask) <span class="hljs-comment"># 获取轮廓,然后得到中心最高点</span><br>        cv2.circle(imgResult,(x,y),<span class="hljs-number">5</span>, myColorValues[count], cv2.FILLED) <span class="hljs-comment"># 绘制圆点</span><br>        <span class="hljs-keyword">if</span> x!= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y != <span class="hljs-number">0</span>:<br>            newPoints.append([x,y,count])<span class="hljs-comment"># 这种条件下添加到我们的点集</span><br>        count += <span class="hljs-number">1</span><br><br><br>        <span class="hljs-comment">#cv2.imshow(str(color[0]),mask)</span><br>    <span class="hljs-keyword">return</span> newPoints<br><span class="hljs-comment"># 定义一个函数来获取轮廓</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getContours</span>(<span class="hljs-params">img</span>):<br>    contours, hierarchy = cv2.findContours(img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE) <span class="hljs-comment"># 检索获取极端的外部轮廓</span><br>    x,y,w,h = <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> cnt <span class="hljs-keyword">in</span> contours: <span class="hljs-comment"># 遍历每一个图形</span><br>        area = cv2.contourArea(cnt)<br>        <span class="hljs-comment"># print(area)</span><br><br>        <span class="hljs-comment">#给像素点大于500的绘制轮廓</span><br>        <span class="hljs-keyword">if</span> area&gt;<span class="hljs-number">500</span>: <span class="hljs-comment"># 500像素</span><br>          <span class="hljs-comment">#  cv2.drawContours(imgResult,cnt,-1,(255,0,0),3) # 蓝色, 厚度3 绘制轮廓</span><br>            peri = cv2.arcLength(cnt,<span class="hljs-literal">True</span>)<span class="hljs-comment">#求周长</span><br>            <span class="hljs-comment"># print(peri)</span><br>            approx = cv2.approxPolyDP(cnt,<span class="hljs-number">0.02</span>*peri,<span class="hljs-literal">True</span>) <span class="hljs-comment">#  拟合计算拐点 0.02分辨率</span><br>            <span class="hljs-comment"># print(len(approx))</span><br>            <span class="hljs-comment"># objCor = len(approx)</span><br>            <span class="hljs-comment"># #检测边框</span><br>            x, y, w, h = cv2.boundingRect(approx) <span class="hljs-comment"># x,y是起点, w,h 是宽高</span><br><br>    <span class="hljs-keyword">return</span> x+w//<span class="hljs-number">2</span>,y  <span class="hljs-comment"># 返回中心点的最高点</span><br><br><span class="hljs-comment"># 定义绘制画布</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">drawOnCanvas</span>(<span class="hljs-params">myPoints,myColorValues</span>):<br>    <span class="hljs-keyword">for</span> point <span class="hljs-keyword">in</span> myPoints:<br>        cv2.circle(imgResult, (point[<span class="hljs-number">0</span>], point[<span class="hljs-number">1</span>]), <span class="hljs-number">10</span>, myColorValues[point[<span class="hljs-number">2</span>]], cv2.FILLED)  <span class="hljs-comment"># 绘制圆点</span><br><br><br><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    success, img = cap.read()<br>    img = cv2.flip(img,<span class="hljs-number">240</span>)<br>    imgResult = img.copy()<br>    newPoints = findColor(img,myColors, myColorValues)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(newPoints) != <span class="hljs-number">0</span>: <span class="hljs-comment"># 拆分后放入mypints</span><br>        <span class="hljs-keyword">for</span> newP <span class="hljs-keyword">in</span> newPoints:<br>            myPoints.append(newP)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(myPoints) != <span class="hljs-number">0</span>:<br>        drawOnCanvas(myPoints,myColorValues)<br>    cv2.imshow(<span class="hljs-string">&quot;Result&quot;</span>, imgResult)<br>    <span class="hljs-keyword">if</span>(cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFF</span> == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>)):<br>        <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><blockquote><p>以上便是本文的全部内容，希望在以后的学习中还能够再不断完善这个项目。😁😁😁</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> 虚拟画笔 </tag>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven &amp; MyBatis</title>
      <link href="/2022/02/26/maven/"/>
      <url>/2022/02/26/maven/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><p><img src="/2022/02/26/maven/image-20220327210003859.png" alt="image-20220327210003859"></p><h1 id="一、Maven简介"><a href="#一、Maven简介" class="headerlink" title="一、Maven简介"></a>一、Maven简介</h1><p>主要功能</p><p><img src="/2022/02/26/maven/image-20220327204954259.png" alt="image-20220327204954259"></p><p><img src="/2022/02/26/maven/image-20220327205516023.png" alt="image-20220327205516023"><img src="/2022/02/26/maven/image-20220327205802429.png" alt="image-20220327205802429"></p><p><img src="/2022/02/26/maven/image-20220327210218471.png" alt="image-20220327210218471"></p><p><img src="/2022/02/26/maven/image-20220327210412058.png" alt="image-20220327210412058"></p><p><img src="/2022/02/26/maven/image-20220327212023419.png" alt="image-20220327212023419"></p><p><img src="/2022/02/26/maven/image-20220328110306323.png" alt="image-20220328110306323"></p><p><img src="/2022/02/26/maven/image-20220328112000406.png" alt="image-20220328112000406"></p><p><img src="/2022/02/26/maven/image-20220328112306028.png" alt="image-20220328112306028"></p><p><img src="/2022/02/26/maven/image-20220328112350914.png" alt="image-20220328112350914"></p><p><img src="/2022/02/26/maven/image-20220328112415390.png" alt="image-20220328112415390"></p><p><img src="/2022/02/26/maven/image-20220328113228345.png" alt="image-20220328113228345"><img src="/2022/02/26/maven/image-20220328114031766.png" alt="image-20220328114031766"></p><p><img src="/2022/02/26/maven/image-20220328114118844.png" alt="image-20220328114118844"></p><p><img src="/2022/02/26/maven/image-20220328114727661.png" alt="image-20220328114727661"></p><p> <img src="/2022/02/26/maven/image-20220328121003265.png" alt="image-20220328121003265"></p><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><p><img src="/2022/02/26/maven/image-20220328123510179.png" alt="image-20220328123510179"></p><p><img src="/2022/02/26/maven/image-20220328124353647.png" alt="image-20220328124353647"></p><p><img src="/2022/02/26/maven/image-20220328124531303.png" alt="image-20220328124531303"></p><p><img src="/2022/02/26/maven/image-20220328151843508.png" alt="image-20220328151843508"></p><p><img src="/2022/02/26/maven/image-20220328161128377.png" alt="image-20220328161128377"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Maven </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/02/24/JDBC/"/>
      <url>/2022/02/24/JDBC/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><ul><li>JDBC就是使用Java语言操作<strong>关系型数据库</strong>的一套API</li></ul><p><img src="/2022/02/24/JDBC/image-20220324122537413.png" alt="image-20220324122537413"></p><p><img src="/2022/02/24/JDBC/image-20220324123254725.png" alt="image-20220324123254725"></p><h1 id="二、JDBC快速入门"><a href="#二、JDBC快速入门" class="headerlink" title="二、JDBC快速入门"></a>二、JDBC快速入门</h1><p><img src="/2022/02/24/JDBC/image-20220324123509225.png" alt="image-20220324123509225"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbcJDBCDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1. 注册驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><br>        <span class="hljs-comment">//2. 获取连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/hsp_db03?useSSL=false&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;  <span class="hljs-comment">//</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hsp&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;connection&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br><br>        <span class="hljs-comment">//3. 定义sql语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update emp set sal = 2000 where ename = &#x27;smith&#x27;;&quot;</span>;<br><br>        <span class="hljs-comment">//4. 获取执行sql的对象Statement</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br><br>        <span class="hljs-comment">//5. 执行sql</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql); <span class="hljs-comment">// 返回影响的行数 --&gt; 一行被改变</span><br><br>        <span class="hljs-comment">//6. 结果处理</span><br>        System.out.println(<span class="hljs-string">&quot;改变的行数&quot;</span> + count);<br><br>        <span class="hljs-comment">//7. 释放资源</span><br>        stmt.close();<br>        conn.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="三、JDBC-API详解"><a href="#三、JDBC-API详解" class="headerlink" title="三、JDBC API详解"></a>三、JDBC API详解</h1><p><img src="/2022/02/24/JDBC/image-20220325142033355.png" alt="image-20220325142033355"></p><p><img src="/2022/02/24/JDBC/image-20220325143242303.png" alt="image-20220325143242303"></p><p><img src="/2022/02/24/JDBC/image-20220325143501946.png" alt="image-20220325143501946"></p><p><img src="/2022/02/24/JDBC/image-20220325144309224.png" alt="image-20220325144309224"></p><p><img src="/2022/02/24/JDBC/image-20220325144518775.png" alt="image-20220325144518775"></p><p><img src="/2022/02/24/JDBC/image-20220325144529820.png" alt="image-20220325144529820"></p><p><img src="/2022/02/24/JDBC/image-20220325160126851.png" alt="image-20220325160126851"></p><p><img src="/2022/02/24/JDBC/image-20220325163224848.png" alt="image-20220325163224848"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select empno,ename,job from emp&quot;</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> conn.createStatement();<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>        <span class="hljs-keyword">while</span>(resultSet.next())&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">anInt</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-number">1</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">ename</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;ename&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-number">3</span>);<br>            System.out.println(<span class="hljs-string">&quot;编号：&quot;</span> + anInt + <span class="hljs-string">&quot; 姓名：&quot;</span>+ename+ <span class="hljs-string">&quot; 工作：&quot;</span>+ string);<br>        &#125;<br>        statement.close();<br>        conn.close();<br></code></pre></div></td></tr></table></figure><p><img src="/2022/02/24/JDBC/image-20220325172640702.png" alt="image-20220325172640702"></p><p><img src="/2022/02/24/JDBC/image-20220325175702347.png" alt="image-20220325175702347"></p><p><img src="/2022/02/24/JDBC/image-20220325180222801.png" alt="image-20220325180222801"></p><p><img src="/2022/02/24/JDBC/image-20220325183031170.png" alt="image-20220325183031170"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.itheima.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> \</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/25 - 18:35</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrepareStatement_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/hsp_db03?useSSL=false&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;  <span class="hljs-comment">//</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hsp&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from emp where ename = ? and job = ?&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;smith&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;职员&quot;</span>;<br><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>        preparedStatement.setString(<span class="hljs-number">1</span>,name);<br>        preparedStatement.setString(<span class="hljs-number">2</span>,job);<br><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();<br>        <span class="hljs-keyword">if</span>(resultSet.next())&#123;<br>            System.out.println(resultSet.getInt(<span class="hljs-string">&quot;empno&quot;</span>));<br>            System.out.println(resultSet.getString(<span class="hljs-string">&quot;ename&quot;</span>));<br>            System.out.println(resultSet.getString(<span class="hljs-string">&quot;job&quot;</span>));<br>            System.out.println(resultSet.getDouble(<span class="hljs-string">&quot;sal&quot;</span>));<br>            System.out.println(resultSet.getInt(<span class="hljs-string">&quot;deptno&quot;</span>));<br>        &#125;<br><br><br>        preparedStatement.close();<br>        connection.close();<br><br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2022/02/24/JDBC/image-20220325185137800.png" alt="image-20220325185137800"></p><h1 id="四、数据库连接池"><a href="#四、数据库连接池" class="headerlink" title="四、数据库连接池"></a>四、数据库连接池</h1><p><img src="/2022/02/24/JDBC/image-20220327180337326.png" alt="image-20220327180337326"></p><p><img src="/2022/02/24/JDBC/image-20220327180850178.png" alt="image-20220327180850178"></p><p><img src="/2022/02/24/JDBC/image-20220327183128910.png" alt="image-20220327183128910"></p><p><img src="/2022/02/24/JDBC/image-20220327183342616.png" alt="image-20220327183342616"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.druid;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/27 - 18:36</span><br><span class="hljs-comment"> * 演示Druid的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1. 导入jar包</span><br>        <span class="hljs-comment">//2. 定义配置文件 druid.properties</span><br>        <span class="hljs-comment">//3. 加载配置信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;jdbc_demo\\src\\druid.properties&quot;</span>));<br><br>        <span class="hljs-comment">//4. 获取连接池对象</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br><br>        <span class="hljs-comment">//5. 获取对应的数据库连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        System.out.println(connection);<br><span class="hljs-comment">//        System.out.println(System.getProperty(&quot;user.dir&quot;));</span><br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2022/02/24/JDBC/image-20220327192405740.png" alt="image-20220327192405740"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/27 - 19:02</span><br><span class="hljs-comment"> * brand 品牌信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * ctrl + r : 替换</span><br><span class="hljs-comment"> * alt + 鼠标左键： 多列编辑</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Brand</span> &#123;<br>    <span class="hljs-comment">// id 主键</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">// 品牌名称</span><br>    <span class="hljs-keyword">private</span> String brand_name;<br>    <span class="hljs-comment">// 企业名称</span><br>    <span class="hljs-keyword">private</span> String company_name;<br>    <span class="hljs-comment">// 排序字段</span><br>    <span class="hljs-keyword">private</span> Integer ordered;<br>    <span class="hljs-comment">// 描述信息</span><br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-comment">// 状态：0：禁用  1：启用</span><br>    <span class="hljs-keyword">private</span> Integer status;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="/2022/02/24/JDBC/image-20220327192526443.png" alt="image-20220327192526443"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2022/02/24/MySQL/"/>
      <url>/2022/02/24/MySQL/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p><img src="/2022/02/24/MySQL/image-20220324102709631.png" alt="image-20220324102709631"></p><h1 id="一-MySQL数据库的安装和配置"><a href="#一-MySQL数据库的安装和配置" class="headerlink" title="一 MySQL数据库的安装和配置"></a>一 MySQL数据库的安装和配置</h1><h2 id="1-1-MySQL安装步骤"><a href="#1-1-MySQL安装步骤" class="headerlink" title="1.1 MySQL安装步骤"></a>1.1 MySQL安装步骤</h2><ol><li><p>下载安装包<a href="https://dev.mysql.com/downloads/mysql/5.7.html">MySQL</a>, 并解压</p></li><li><p>添加环境变量, 在Path环境变量增加mysql的安装目录\bin目录</p></li><li><p>添加my.ini文件</p></li><li><p>使用管理员身份打开命令行窗口连接MySQL数据库, 下载mysql5.7(稳定)</p><blockquote><p>update user set authentication_string&#x3D;password(“hsp”) where user&#x3D;’root’ and Host&#x3D;’localhost’;</p><p>就是修改用户密码为hsp</p><p>注释掉跳过安全检查</p><p>net start mysql 启动MySQL服务</p><p>net stop mysql  停止MySQL服务</p><p>mysql -u root -p 登录</p></blockquote></li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">mysql -h 主机名 -<span class="hljs-selector-tag">P</span> 端口 -u 用户名 -<span class="hljs-selector-tag">p</span>密码<br>小写的-<span class="hljs-selector-tag">p</span>后紧跟密码,不能有空格, 不输入密码直接回车会提醒输入密码<br>例如<br>mysql -h <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> -<span class="hljs-selector-tag">P</span> <span class="hljs-number">3306</span> -u root -phsp<br>如果没有写 -h 主机, 默认是本机<br>如果没有写 -<span class="hljs-selector-tag">P</span> 端口, 默认就是<span class="hljs-number">3306</span><br></code></pre></div></td></tr></table></figure><p>登录前保证服务启动</p><h2 id="1-2-SQLyog-安装和使用"><a href="#1-2-SQLyog-安装和使用" class="headerlink" title="1.2 SQLyog 安装和使用"></a>1.2 SQLyog 安装和使用</h2><p>介绍: 图形化MySQL管理软件</p><p>略</p><h2 id="1-3-数据库的三层结构"><a href="#1-3-数据库的三层结构" class="headerlink" title="1.3 数据库的三层结构"></a>1.3 数据库的三层结构</h2><ol><li>安装MySQL数据库，就是在主机安装一个数据库管理系统(DBMS), 这个管理程序可以管理多个数据库</li><li>一个数据库中可以创建多个表, 用以保存数据(信息)</li><li>数据库管理系统(DBMS), 数据库和表关系如下图</li></ol><p><img src="/2022/02/24/MySQL/image-20220228205737710.png" alt="image-20220228205737710"></p><p><strong>MySQL数据库-普通表的本质就是文件</strong></p><ol start="4"><li>数据库中主要用表来存放数据</li><li>表的一行称之为一条记录  &#x3D;&#x3D;&#x3D;&gt; 在java中, 一行记录往往用一个对象表示</li></ol><h2 id="1-4-SQL语句分类"><a href="#1-4-SQL语句分类" class="headerlink" title="1.4 SQL语句分类"></a>1.4 SQL语句分类</h2><ul><li>DDL: 数据定义语句(create表, 库…) create drop show use </li><li>DML: 数据操作语句(增加insert,  修改 update,  删除delete)</li><li>DQL: 数据查询语句(select)</li><li>DCL: 数据控制语句(管理数据库:  用户权限 grant  revoke撤销)</li></ul><blockquote><p>SQL（Structure Query Language）结构化查询语言</p><p>DQL（data query language）数据查询语言 select操作</p><p>DML（data manipulation language）数据操作语言，主要是数据库增删改三种操作</p><p>DDL（data definition language）数据库定义语言，主要是建表、删除表、修改表字段等操作</p><p>DCL（data control language）数据库控制语言，如commit，revoke之类的，在默认状态下，只有sysadmin,dbcreator,db_owner或db_securityadmin等人员才有权力执行DCL</p></blockquote><h1 id="二-数据库"><a href="#二-数据库" class="headerlink" title="二 数据库"></a>二 数据库</h1><h2 id="2-1-创建数据库"><a href="#2-1-创建数据库" class="headerlink" title="2.1 创建数据库"></a>2.1 创建数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREAT DATABASE [IF NOT EXISTS] db_name<br>[creat_specification []]<br><br><br>#1. CHARACTER SET:  指定数据库采用的字符集, 如果不指定字符集, 默认utf8<br>#2. COLLATE: 指定数据库字符集的校对规则(常用utf8_bin(区分大小写), utf8_general_ci(不区分大小写, 默认))    collate:校对<br></code></pre></div></td></tr></table></figure><p>练习:</p><ol><li>创建一个名为hsp_db01的数据库</li><li>创建一个utf8字符集hsp_db02数据库</li><li>创建一个使用utf8 的字符集, 并带校对规则的hsp_db03数据库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 演示创建数据库操作<br>#1. 创建一个名为hsp_db01的数据库<br><br>#删除数据库<br>CREATE DATABASE hsp_db01;<br>DROP DATABASE hsp_db01;#分号可有可无<br><br>#2. 创建一个utf8字符集hsp_db02数据库<br>CREATE DATABASE hsp_db02 CHARACTER SET utf8<br><br>#3. 创建一个使用utf8 的字符集, 并带校对规则的hsp_db03数据库   utf8_bin区分大小写<br>CREATE DATABASE hsp_db03 CHARACTER SET utf8 COLLATE utf8_bin<br># 建立一张表, 校对规则默认跟数据库的校对规则, 也可以自己指定<br><br>#一条查询的sql语句  *表示所有字段 从名字tom开始查询<br>SELECT * FROM t1 WHERE NAME = &#x27;tom&#x27;<br><br></code></pre></div></td></tr></table></figure><h2 id="2-2-查看-删除数据库"><a href="#2-2-查看-删除数据库" class="headerlink" title="2.2 查看,删除数据库"></a>2.2 查看,删除数据库</h2><ol><li>显示数据库: SHOW DATABASES</li><li>显示数据库创建语句: SHOW CREATE DATABASE db_name</li><li>数据库删除:  DROP DATABASE [IF EXISTS] db_name</li></ol><p>练习:</p><ol><li>查看当前数据库服务器中的所有数据库</li><li>查看前面创建的hsp_db01数据库定义信息</li><li>删除前面创建的hsp_db01数据库</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java">#演示删除和查询数据库<br>#<span class="hljs-number">1.</span> 查看当前数据库服务器中的所有数据库<br>SHOW DATABASES<br>#<span class="hljs-number">2.</span> 查看前面创建的hsp_db01数据库定义信息<br>SHOW CREATE DATABASE hsp_db01<br>CREATE DATABASE `CREATE`   #反引号，esc键下方, 规避关键字<br>DROP DATABASE `create`<br>#<span class="hljs-number">3.</span> 删除前面创建的hsp_db01数据库<br>DROP DATABASE `hsp_db01`  #带反引号更加规范<br></code></pre></div></td></tr></table></figure><h2 id="2-3-备份和恢复数据库"><a href="#2-3-备份和恢复数据库" class="headerlink" title="2.3 备份和恢复数据库"></a>2.3 备份和恢复数据库</h2><ul><li><p><strong>备份数据库(在DOS命令行)</strong></p><p><strong>mysqldump -u 用户名 -p -B 数据库1 数据库2 数据库n &gt; 文件名.sql</strong></p></li><li><p><strong>恢复数据库(进入Mysql命令行再执行)</strong></p><p><strong>Source 文件名.sql</strong></p></li></ul><p>练习: </p><p>​    database03.sql 备份hsp_db02 和 hsp_db03 数据库中的数据, 并恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#备份  <br>mysqldump -u root -p -B hsp_db02 hsp_db03 &gt; F:\CodeLearn\mysql\practice\bak.sql# 备份文件就是对应的sql语句,需要在DOS命令行执行<br><br>DROP DATABASE hsp_db03;<br>#恢复数据库(需要进入mysql命令行)<br>source F:\CodeLearn\mysql\practice\bak.sql<br>`hsp_db02` # mysql -u root -p<br><br>#第二个恢复方式<br>#复制粘贴语句, 执行语句<br></code></pre></div></td></tr></table></figure><ul><li><p>备份数据库的表</p><p><strong>mysqldump -u root -p密码 数据库 表1 表2 表n &gt; d:\文件名.sql</strong></p><p>(注意: 这里没有大B)</p><p>练习: 备份hsp_db02 的t2</p></li></ul><h1 id="三-表"><a href="#三-表" class="headerlink" title="三 表"></a>三 表</h1><h2 id="3-1创建表"><a href="#3-1创建表" class="headerlink" title="3.1创建表"></a>3.1创建表</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE table_name<br>(<br>    field1 datatype,<br>    field2 datatype,<br>    field3 datatype<br>)character set 字符集 collate 校对规则 engine 引擎<br>filed: 指定列名, datatype: 指定列类型(字段类型)<br>character set: 如果不指定则为所在数据库字符集<br>collate: 如不指定则为所在数据库校对规则<br>engine: 引擎<br>#  案例<br>CREATE TABLE `user` (<br>id INT, <br>`name` VARCHAR(255)<br>`password` VARCHAR(32)<br>`birthday` VARCHAR(255)<br>CHARACTER SET utf8 COLLATE utf8_bin ENGINE INNODB;<br></code></pre></div></td></tr></table></figure><h2 id="3-2-删除表"><a href="#3-2-删除表" class="headerlink" title="3.2 删除表"></a>3.2 删除表</h2><h2 id="3-3-修改表"><a href="#3-3-修改表" class="headerlink" title="3.3 修改表"></a>3.3 修改表</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 添加列<br>ALTER TABLE tablename<br>ADD (colum datatype [DEFAULT expr],<br>    colum datatype [DEFAULT expr]);<br>    <br># 修改列<br>ALTER TABLE tablename<br>MODIFY (colum datatype [DEFAULT expr],<br>       colum datatype [DEFAULT expr]);<br><br><br># 删除列<br>ALTER TABLE tablename<br>DROP (colum);<br><br># 查看表的所有列<br>desc 表名; <br><br># 修改表名<br>RENAME TABLE 表名 TO 新表名;<br><br># 修改表的字符集<br>ALTER TABLE 表名 CHARACTER SET 字符集;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">########################练习###########################<br>CREATE TABLE emp (c INT);<br>ALTER TABLE emp<br>ADD (`resume` TEXT,<br>`image` VARCHAR(255),<br>`job` VARCHAR(10),<br>`sex` CHAR(1),<br>`name` VARCHAR(4));<br>ALTER TABLE emp<br>ADD `resw` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27; # 添加<br>AFTER RESUME;<br>DESC emp;<br>ALTER TABLE emp<br>MODIFY job VARCHAR(60) NOT NULL DEFAULT &#x27;&#x27;  #修改job为60字符<br><br># 删除列<br>ALTER TABLE emp<br>DROP sex<br><br># 改表名<br>RENAME TABLE emp TO employee;<br># 改字符集<br>ALTER TABLE employee CHARACTER SET utf8;<br><br># 改列名<br>ALTER TABLE employee <br>CHANGE `name` user_name VARCHAR(4) NOT NULL DEFAULT &#x27;&#x27;;<br>DESC employee;<br></code></pre></div></td></tr></table></figure><h1 id="四-Mysql数据类型"><a href="#四-Mysql数据类型" class="headerlink" title="四 Mysql数据类型"></a>四 Mysql数据类型</h1><p><strong>Mysql常用数据类型(列类型)</strong></p><p>Mysql列类型即Mysql的数据类型</p><h2 id="4-1-数值类型"><a href="#4-1-数值类型" class="headerlink" title="4.1 数值类型"></a>4.1 数值类型</h2><h3 id="4-1-1-整型"><a href="#4-1-1-整型" class="headerlink" title="4.1.1 整型"></a>4.1.1 整型</h3><ul><li>tinyint: 一个字节</li><li>smallint: 两个字节</li><li>mediumint: 三个字节</li><li><strong>int: 四个字节</strong></li><li>bigint: 八个字节</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#定义一个无符号整数<br>create table t10(<br>    id tinyint); #默认是有符号<br>create table t11(<br>    id tinyint unsigned); # 无符号的<br>#演示bit类型使用<br># 说明: bit(m) m在1~64<br># 添加数据  范围按照所给位数确定<br># 按位显示<br># 查询依然可以按照数值查询<br>CREATE TABLE t05 (num BIT(8)); #8位相当于一个字节<br>INSERT INTO t05 VALUES(255);<br>SELECT * FROM t05;<br></code></pre></div></td></tr></table></figure><h3 id="4-1-2-小数类型"><a href="#4-1-2-小数类型" class="headerlink" title="4.1.2 小数类型"></a>4.1.2 小数类型</h3><ul><li>float: 单精度  4个字节</li><li><strong>double:  双精度  8个字节</strong></li><li><strong>decimal(M, D) :    大小由M和D确定</strong>    M: 数的总数(最大65, 默认10)    D: 保留小数个数(最大30,  默认0)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE t06(<br>num1 FLOAT,<br>num2 DOUBLE,<br>num3 DECIMAL(30,20));<br>#添加数据<br>INSERT INTO t06 VALUES(2323.233232323233232,233232.3232323233323232,32.323232323232323243214415535736352);<br><br>SELECT * FROM t06;<br><br>CREATE TABLE t07(<br>num DECIMAL(65));<br>INSERT INTO t07 VALUES(13452655677543256754324561543666666666666666);<br>SELECT * FROM t07;<br></code></pre></div></td></tr></table></figure><h2 id="4-2-文本类型-必须指定大小-num"><a href="#4-2-文本类型-必须指定大小-num" class="headerlink" title="4.2 文本类型(必须指定大小( num) )"></a>4.2 文本类型(必须指定大小( num) )</h2><ul><li><p><strong>char   0 ~ 255字符</strong></p><p>char(4) # 这个4表示字符数(最大255), 不是字节数, 不管是中文还是英文都是放4个, 按字符计算  <strong>定长:</strong> 即使数据是小于4字符也会分配4个字符空间</p></li><li><p>**varchar    0 ~ 65535字节&#x3D;&#x3D;21844 **   </p><p>varchar(4)  # 4个字符    #     <strong>变长</strong> : 实际占用空间  &#x3D;  实际数据空间  + (1~3字节)记录长度等数据</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#注释快捷键, shift + ctrl + c   ||     + r:取消注释<br>CREATE TABLE t09(<br>`name` CHAR(255));<br>SELECT * FROM t09;<br>CREATE TABLE t10(<br>`name` VARCHAR(21844)); #如果表的编码是utf8 size = 65536-3 /3 = 21844<br><br><br>CREATE TABLE t11(<br>`name` CHAR(4));<br>INSERT INTO t11 VALUES(&#x27;韩顺好&#x27;);<br>SELECT * FROM t11<br><br>CREATE TABLE t12(<br>`name` VARCHAR(4));<br>INSERT INTO t12 VALUES(&#x27;fdas&#x27;);<br>SELECT * FROM t12<br></code></pre></div></td></tr></table></figure></li><li><p><strong>text    0 ~ 65535</strong></p></li><li><p>longtext    0 ~ 2^32 - 1</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE t13(<br>contant TEXT,<br>contant2 MEDIUMTEXT,<br>contant3 LONGTEXT);<br>INSERT INTO t13 VALUES(&#x27;哈顺平教育&#x27;, &#x27;今天好好学习&#x27;,&#x27;今天好好休息&#x27;);<br>SELECT * FROM t13;<br>DROP  TABLE t13;<br></code></pre></div></td></tr></table></figure><h2 id="4-3-二进制数据类型"><a href="#4-3-二进制数据类型" class="headerlink" title="4.3 二进制数据类型"></a>4.3 二进制数据类型</h2><ul><li>blob    0~65535</li><li>longblob   0 ~ 2^32-  1</li></ul><h2 id="4-4-日期类型"><a href="#4-4-日期类型" class="headerlink" title="4.4 日期类型"></a>4.4 日期类型</h2><ul><li>data    日期类型: 年月日</li><li>time    时间类型: 时分秒</li><li><strong>datatime    日期时间: 年月日时分秒   YYYY-MM-DD  HH:mm:ss</strong>   8字节</li><li><strong>timestamp   时间戳   1970 ~今</strong>       4字节</li><li>year    年</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#演示时间相关的类型<br># 创建表 date, datetime, timestamp<br>CREATE TABLE t14(<br>birthday DATE, -- 生日<br>job_time DATETIME,<br>login_time TIMESTAMP  -- 登录时间, 如果希望自动更新, 添加字段配置要求<br>NOT NULL DEFAULT CURRENT_TIMESTAMP<br>ON UPDATE CURRENT_TIMESTAMP);<br><br>SELECT * FROM t14;<br>INSERT INTO t14 VALUES(&#x27;2022-11-11&#x27;,&#x27;2022-1-1 10:10:10&#x27;,&#x27;2022-1-1 10:10:10&#x27;);<br>SELECT * FROM t14;<br><br>INSERT INTO t14(birthday,job_time)VALUES(&#x27;2022-11-11&#x27;,&#x27;2022-1-1 10:10:10&#x27;);# 中间空格可不要(t14()和values()之间)<br>SELECT * FROM t14;<br></code></pre></div></td></tr></table></figure><p>TimeStamp在Insert 和 update 时, 自动更新</p><h1 id="五-CRUD"><a href="#五-CRUD" class="headerlink" title="五 CRUD"></a>五 CRUD</h1><p>create, read, update , delete</p><h3 id="5-1-Insert"><a href="#5-1-Insert" class="headerlink" title="5.1 Insert"></a>5.1 Insert</h3><p><img src="/2022/02/24/MySQL/image-20220324105908566.png" alt="image-20220324105908566"></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">INSERT INTO table_name (column, column, column...) <br>VALUES (value, value...)<br></code></pre></div></td></tr></table></figure><p>细节:</p><ol><li>插入的数据应该与字段的数据类型相同.  比如把 ‘abc’ 添加到 int 类型会错误</li><li>数据的长度应在列的规定范围内, 例如: 不能将一个长度为80的字符串加入到长度为40 的列中</li><li>在values中列出的数据位置必须与被加入的列的排列位置相对应</li><li>字符和日期型数据应该包含在单引号中</li><li>列可以插入空值[前提是该字段允许为空], insert into table value(null)</li><li>insert into tab_name(列名) values(), (), () 形式添加多条记录</li><li>如果是给表中的所有字段添加数据, 可以不写前面的字段名称</li><li>默认值的使用, 当不给某个字段时, 如果有默认值就会添加,  否则报错</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"># 添加多条<br>INSERT INTO <span class="hljs-title function_">goods</span> <span class="hljs-params">(goods_name,id,price)</span><br>VALUES(<span class="hljs-string">&#x27;vivo手机&#x27;</span>,<span class="hljs-string">&#x27;43&#x27;</span>,<span class="hljs-number">3000</span>),(<span class="hljs-string">&#x27;pxx手机&#x27;</span>,<span class="hljs-number">23</span>,<span class="hljs-number">9.9</span>),(<span class="hljs-string">&#x27;诺基亚&#x27;</span>,<span class="hljs-number">90</span>,<span class="hljs-number">999</span>);<br><br># 默认值使用<br>CREATE TABLE `goods2`(<br>id INT,<br>goods_name <span class="hljs-title function_">VARCHAR</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span> NOT NULL DEFAULT <span class="hljs-string">&#x27;8848手机&#x27;</span>, # 指定默认值<br>price DOUBLE);   # 没有 NOT NULL 则可以添加<span class="hljs-literal">null</span>作为price  <br><br>INSERT INTO <span class="hljs-title function_">goods2</span> <span class="hljs-params">(id)</span><br>VALUES(<span class="hljs-number">233</span>);<br></code></pre></div></td></tr></table></figure><h3 id="5-2-Updata"><a href="#5-2-Updata" class="headerlink" title="5.2 Updata"></a>5.2 Updata</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE table_name<br>SET col_name = expr1, col_name2 = expr2...<br>WHERE where_defination<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE employee SET salary = 5000; # 没有where 默认修改所有值<br><br>UPDATE employee SET salary = 3000<br>WHERE user_name = &#x27;小妖怪&#x27;;  # 指定修改&#x27;小妖怪&#x27; 的salary<br><br>UPDATE employee SET salary = salary + 1000<br>WHERE user_name = &#x27;老妖怪&#x27;;   # 在原有的基础上修改<br></code></pre></div></td></tr></table></figure><p>细节:</p><ol><li>UPDATE语法可以使用新值更新原有表行中的各列</li><li>SET 子句指示要修改哪些列和要给予哪些值</li><li>WHERE 子句指定应更新哪些行，　如果没有WHERE子句，　则更新所有的行（记录）</li><li>如果需要修改多个字段, 可以通过 SET　字段１&#x3D; 值1, 字段2 &#x3D; 值2…</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE employee SET salary = salary + 1000, job = &#x27;打铁&#x27;<br>WHERE user_name = &#x27;老妖怪&#x27;;   # 在原有的基础上修改<br><br></code></pre></div></td></tr></table></figure><h3 id="5-3-Delete"><a href="#5-3-Delete" class="headerlink" title="5.3 Delete"></a>5.3 Delete</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DELETE FROM table_name<br>WHERE where_definition<br><br>DELETE FROM employee<br>WHERE user_name = &#x27;老妖怪&#x27;;# 删除单个记录<br><br>DELETE FROM employee; # 删除表中所有数据<br><br>## DELETE不能删除单个列  但是ALTER　可以(当只有单列时则只能删除表A table must have at least 1 column)<br>ALTER TABLE emp DROP job;<br><br></code></pre></div></td></tr></table></figure><p>细节:</p><ol><li>如果不适用where子句, 将删除表中所有的数据</li><li>DELETE语句不能删除某一列的值(可以使用update 设为 null 或者 ‘ ‘)</li><li>使用DELETE语句仅删除记录, 不删除表本身, 如果要删除表, 使用DROP TABLE 语句;</li></ol><h3 id="5-4-Select🧡💛💚💙💜🤎"><a href="#5-4-Select🧡💛💚💙💜🤎" class="headerlink" title="5.4 Select🧡💛💚💙💜🤎"></a>5.4 Select🧡💛💚💙💜🤎</h3><h4 id="5-4-1-单表"><a href="#5-4-1-单表" class="headerlink" title="5.4.1 单表"></a>5.4.1 单表</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT [DISTINCT] * &#123;column1, column2, ...&#125; FROM table_name;<br><br>SELECT `name`,english FROM student;  <br>SELECT DISTINCT `name`,english FROM student; # 去重<br></code></pre></div></td></tr></table></figure><p>DISTINCT 去重&#x3D;&#x3D;&#x3D;&#x3D;&gt; 每个字段相同才去重</p><p>注意事项: </p><ol><li>select 指定查询哪些列的数据</li><li>column指定列名</li><li>*号代表查询所有列</li><li>From 指定查询那张表</li><li>DISTINCT 可选, 指显示结果时, 是否去掉重复数据</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 使用表达式对查询的列进行运算<br>SELECT `name`, (chinese + english + math) FROM student;<br><br><br># 使用 AS 语句<br>SELECT `name`, (chinese+english+math) AS total_score FROM student;<br><br>SELECT `name` AS &#x27;名字&#x27; , (chinese+english+math) AS &#x27;总分&#x27; FROM student;<br></code></pre></div></td></tr></table></figure><h5 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h5><p>在where子句中经常使用的运算符</p><ul><li>比较运算符<ul><li>大于小于&lt; &gt; &lt;&#x3D;….</li><li>显示在某一区间的值(BETWEEN …AND…)</li><li>显示在in列表中的值, 例如: in(100, 200) : IN(set)</li><li>模糊查询  LIKE ‘张%’ NOT LIKE ‘ ‘</li><li>判断是否为空:  IS NULL</li></ul></li><li>逻辑运算符<ul><li>多个条件同时成立  AND</li><li>多个条件任意成立  OR</li><li>不成立, 例如: WHERE NOT(salary &gt; 100); NOT</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MYSQL"># 大于小于等于<br>SELECT * FROM student WHERE `name` = &#x27;赵云&#x27;;<br>SELECT * FROM student WHERE  `english` &gt; 60;<br>SELECT * FROM student WHERE `chinese` &lt; 60;<br>SELECT * FROM student WHERE `chinese` &gt; english;<br><br># 某一区间  BETWEEN<br>SELECT * FROM student WHERE chinese BETWEEN 20 AND 80;<br><br># 显示IN列表中的值<br><br># 模糊查询<br>SELECT * FROM student WHERE `name` LIKE &#x27;张%&#x27;;<br><br># 判断<br><br><br># 逻辑运算符<br>SELECT * FROM student WHERE `chinese` &gt;= 60 AND `english` &gt;= 60 AND `math` &gt;= 60;<br><br>SELECT * FROM student WHERE math = 89 OR math = 90 OR math = 91;<br><br></code></pre></div></td></tr></table></figure><h5 id="order-by-子句"><a href="#order-by-子句" class="headerlink" title="order by 子句"></a>order by 子句</h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT DISTINCT column1,column2 ...<br>FROM table<br>ORDER　BY column asc|desc, ...<br></code></pre></div></td></tr></table></figure><ol><li>order by 指定排序的列, 排序的列既可以是表中的列名, 也可以是select 语句后指定的列名</li><li><strong>ASC 升序(默认)   DESC 降序</strong></li><li>ORDER BY 子句应位于SELECT语句的末尾</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 升序<br>SELECT * FROM student<br>ORDER BY math;<br><br># 降序<br>SELECT (chinese + english + math) AS &#x27;总分&#x27; FROM student<br>ORDER BY (chinese + english + math) DESC;<br><br><br></code></pre></div></td></tr></table></figure><h5 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h5><p>对子句队列进行分组[先创建测试表]</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT column1,column2... FROM table <br>GROUP BY column<br></code></pre></div></td></tr></table></figure><p>使用HAVING 子句对分组后的结果进行过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysq">SELECT column1,column2... FROM table <br>GROUP BY column HAVING ...<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 创建表<br>CREATE TABLE dept (deptno INT PRIMARY KEY, <br>dname NVARCHAR(30),<br> loc NVARCHAR(30)) <br> DEFAULT CHARACTER SET utf8;<br>CREATE TABLE emp (<br>empno INT PRIMARY KEY, <br>ename NVARCHAR(30), <br>job NVARCHAR(30), mgr INT ,<br>hiredate DATETIME, sal DECIMAL(6.2), <br>comm DECIMAL(6.2), deptno INT ,<br>FOREIGN KEY(deptno) <br>REFERENCES dept(deptno)) <br>DEFAULT CHARACTER SET utf8;<br><br>INSERT INTO dept (deptno, dname, loc) <br>VALUES (10, &#x27;ACCOUNTING&#x27;, &#x27;NEW YORK&#x27;),<br>(20, &#x27;RESEARCH&#x27;, &#x27;DALLAS&#x27;),<br>(30, &#x27;SALES&#x27;, &#x27;CHICAGO&#x27;),<br>(40, &#x27;OPERATIONS&#x27;, &#x27;BOSTON&#x27;);<br><br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES (7369,&#x27;SMITH&#x27;,&#x27;CLERK&#x27;,7902,&#x27;1980-12-17&#x27;,800.00,NULL,20);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES (7499,&#x27;ALLEN&#x27;,&#x27;SALESMAN&#x27;,7698,&#x27;1981-2-20&#x27;,1600,300,30);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES ( 7521, &#x27;WARD&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-2-22&#x27;, 1250, 500, 30);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES ( 7566, &#x27;JONES&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-4-2&#x27;, 2975, NULL, 20);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES ( 7654, &#x27;MARTIN&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-9-28&#x27;, 1250, 1400, 30);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES ( 7698, &#x27;BLAKE&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-5-1&#x27;, 2850, NULL, 30);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES ( 7782, &#x27;CLARK&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-6-9&#x27;, 2450, NULL, 10);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES ( 7788, &#x27;SCOTT&#x27;, &#x27;ANALYST&#x27;, 7566, &#x27;1987-4-19&#x27;, 3000, NULL, 20);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES ( 7839, &#x27;KING&#x27;, &#x27;PRESIDENT&#x27;, NULL, &#x27;1981-11-17&#x27;, 5000, NULL, 10);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES ( 7844, &#x27;TURNER&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-9-8&#x27;, 1500, 0, 30);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES (7876, &#x27;ADAMS&#x27;, &#x27;CLERK&#x27;, 7788, &#x27;1987-5-23&#x27;, 1100, NULL, 20);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES (7900, &#x27;JAMES&#x27;, &#x27;CLERK&#x27;, 7698, &#x27;1981-12-3&#x27;, 950, NULL, 30);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES ( 7902, &#x27;FORD&#x27;, &#x27;ANALYST&#x27;, 7566, &#x27;1981-12-3&#x27;, 3000, NULL, 20);<br>INSERT INTO emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) VALUES (7934, &#x27;MILLER&#x27;, &#x27;CLERK&#x27;, 7782, &#x27;1982-1-23&#x27;, 1300, NULL, 10);<br><br>SELECT * FROM emp;<br><br># 工资级别表<br>CREATE TABLE salgrade<br>(<br>grade MEDIUMINT UNSIGNED NOT NULL DEFAULT 0, # 级别<br>losal DECIMAL(17,2) NOT NULL, # 该级别最低工资<br>hisal DECIMAL(17,2) NOT NULL # 该级别的最高工资<br>);<br>INSERT INTO salgrade VALUES(1,700,1200);<br>INSERT INTO salgrade VALUES(2,1201,1400);<br>INSERT INTO salgrade VALUES(3,1402,2000);<br>INSERT INTO salgrade VALUES(4,2001,3000);<br>INSERT INTO salgrade VALUES(5,3001,9999); #<br>SELECT * FROM salgrade<br><br><br><br><br><br># 演示group by<br><br><br># 显示某个部门的平均工资和最高工资<br>SELECT AVG(sal),MAX(sal), deptno FROM emp<br>GROUP BY deptno;<br><br><br># 显示每个部门的每种岗位的平均工资和最低工资<br>SELECT AVG(sal), MIN(sal), deptno ,job<br>FROM emp GROUP BY deptno,job;<br><br><br># 显示平均工资低于2000的部门号和他的平均工资<br><br>SELECT AVG(sal) ,deptno<br>FROM emp <br>GROUP BY deptno  HAVING AVG(sal)&lt;2000;<br><br>SELECT AVG(sal) AS avg_sal ,deptno<br>FROM emp <br>GROUP BY deptno  HAVING avg_sal&lt;2000  # 使用了别名ji, 效率更高<br></code></pre></div></td></tr></table></figure><p>如何理解分组:</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 1. 查询了一堆记录A<br># 2. 对A进行分组处理得到 B<br># 3. 对B 进行过滤使用HAVING<br><br><br>SELECT COUNT(*), AVG(sal) <br>FROM emp<br>GROUP BY deptno;  # 计算各部门总人数和平均薪资<br><br>SELECT COUNT(*),COUNT(IF(comm IS NULL, 1,NULL)) FROM emp  # 总人数和 comm 不null 的总人数<br><br>SELECT COUNT(DISTINCT ename) FROM emp; # 计算员工人数 ( 去重) <br><br>SELECT MAX(sal)-MIN(sal) FROM emp;# 显示雇员最大薪资差额<br><br></code></pre></div></td></tr></table></figure><h5 id="group-by-order-by…-顺序"><a href="#group-by-order-by…-顺序" class="headerlink" title="group by, order by… 顺序"></a>group by, order by… 顺序</h5><ol><li>group by </li><li>having</li><li>order by</li><li>limit</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MySQL">SELECT AVG(sal) AS avg_sal FROM emp<br>GROUP BY deptno<br>HAVING avg_sal &gt; 1000<br>ORDER BY avg_sal DESC<br>LIMIT 0,2;<br></code></pre></div></td></tr></table></figure><h4 id="5-4-2-多表🚆🚉🚊🚇🚄🏎"><a href="#5-4-2-多表🚆🚉🚊🚇🚄🏎" class="headerlink" title="5.4.2 多表🚆🚉🚊🚇🚄🏎"></a>5.4.2 多表🚆🚉🚊🚇🚄🏎</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MySQL">SELECT * FROM emp;  # 表一<br>SELECT * FROM dept;  # 表二<br>SELECT * FROM salgrade;  # 表三<br></code></pre></div></td></tr></table></figure><ul><li>MySQL表查询 – 加强</li></ul><ol><li>使用WHERE子句</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MySQL"># 查找1992.1.1 后入职的员工<br># # 查找1992.1.1 后入职的员工<br>SELECT * FROM emp<br>WHERE DATEDIFF(hiredate, &#x27;1992-1-1&#x27;) &gt; 0;<br><br>SELECT * FROM emp<br>WHERE (hiredate - &#x27;1992-01-01&#x27;) &gt; 0  # 日期类型可以直接计算或比较, 但是需要格式一致<br><br># 显示第三个字符为s的所有员工<br>SELECT * FROM emp<br>WHERE ename LIKE &#x27;__s%&#x27; # 两个下划线 + s + %<br><br># 查询表的结构<br>DESC emp;<br><br># 按照工资从低到高排序<br>SELECT ename,sal FROM emp # ASC 从低到高    DESC降序<br>ORDER BY sal DESC<br><br># 部门升序, 工资降序<br>SELECT * FROM emp<br>ORDER BY deptno ASC, sal DESC;<br></code></pre></div></td></tr></table></figure><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><p>案例: 按照雇员的id升序取出, 每页显示3条记录, 请分别显示第一页, 第二页, 第三页</p><p>基本语法: select …limt start, rows : 表示从start+1行开始取, 取出rows行, 从0开始计算</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">## 分页查询<br><br>## 第一页<br>SELECT * FROM emp<br>ORDER BY empno<br>LIMIT 0,3  #  从0开始显示3行<br><br>## 第二页<br>SELECT * FROM emp<br>ORDER BY empno<br>LIMIT 3,3;<br><br><br>## 第三页<br>SELECT * FROM emp<br>ORDER BY empno<br>LIMIT 6,3;<br><br>## 第四页<br>SELECT * FROM emp<br>ORDER BY empno<br>LIMIT 9,3;<br><br>## 第n页<br>SELECT * FROM emp<br>ORDER BY empno<br>LIMIT 每页显示的记录数*(第n页 - 1), 每页显示的记录数;<br><br><br><br></code></pre></div></td></tr></table></figure><h5 id="多表查询🚩🚩🚩🚩"><a href="#多表查询🚩🚩🚩🚩" class="headerlink" title="多表查询🚩🚩🚩🚩"></a>多表查询🚩🚩🚩🚩</h5><p>基于两个或两个以上的表查询.</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MySQL">## 案例: 显示雇员名, 雇员工资及所在部门的名字, 并按部门降序排序<br><br># 多表查询<br><br># 显示雇员名, 雇员工资以及所在部门的名称<br># 1. 雇员名, 雇员工资来自emp表<br># 2. 部门名来自dept表     =====&gt; 表名.列名  表一,表二<br>SELECT emp.ename, emp.sal, dept.dname FROM emp,dept<br>WHERE emp.deptno = dept.deptno<br>ORDER BY sal DESC;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT dept.dname, emp.ename, emp.sal, emp.deptno,dept.deptno <br>FROM dept, emp<br>WHERE dept.deptno = 20 AND dept.deptno = emp.deptno<br><br>SELECT emp.ename, emp.sal, emp.job ,salgrade.grade, salgrade.losal, salgrade.hisal<br>FROM emp, salgrade<br>WHERE emp.sal &gt;= salgrade.losal AND emp.sal &lt; salgrade.hisal<br>ORDER BY sal<br><br><br></code></pre></div></td></tr></table></figure><h6 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h6><p>自连接是指在同一张表的连接查询(将同一张表看作两张表)</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MySQL"># 查询员工和其上级的名称<br>SELECT worker.ename, boss.ename <br>FROM emp AS worker,emp AS boss   # 笛卡尔集 14*14<br>WHERE worker.mgr = boss.empno;   # 加上限制条件后 14*14 - 14*13 = 14*1<br></code></pre></div></td></tr></table></figure><h6 id="单列子查询"><a href="#单列子查询" class="headerlink" title="单列子查询"></a>单列子查询</h6><p>子查询是指嵌入在其他sql语句中的select语句, 也叫嵌套查询</p><ol><li><p>单行子查询</p><p>只返回一行数据的子查询语句</p></li><li><p>多行子查询</p><p>返回多行数据的子查询 使用关键字in</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MySQL"># 子查询<br><br># 显示与Smith同一个部门的所有员工<br><br><br># 不用子查询<br>SELECT emp2.ename, emp1.deptno FROM emp AS emp1, emp AS emp2<br>WHERE emp1.ename = &#x27;SMITH&#x27; AND emp1.deptno = emp2.deptno AND emp2.ename != &#x27;SMITH&#x27;<br><br><br># 使用子查询<br>SELECT emp.ename FROM emp<br>WHERE deptno = (SELECT deptno FROM emp # [1]<br>WHERE emp.ename = &#x27;Smith&#x27;)<br>## 因为这里[1]返回的只有一行数据, 所以称为单行子查询<br><br><br><br># 多行子查询<br><br>SELECT ename, job, sal, deptno FROM emp<br>WHERE job IN (<br>SELECT DISTINCT job <br>FROM emp<br>WHERE deptno = 10<br>) AND deptno != 10;    # 不等号:   &lt;&gt; 或者 !=<br></code></pre></div></td></tr></table></figure><ol start="3"><li>将子查询当做 <strong>临时表</strong> 使用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MySQL"># 子查询 - 临时表<br>SELECT * FROM  (SELECT  MAX(sal) AS max_sal, deptno FROM emp<br>GROUP BY deptno) temp, emp<br>WHERE emp.deptno = temp.deptno<br>AND temp.max_sal = emp.sal<br></code></pre></div></td></tr></table></figure><h6 id="ALL-与-ANY"><a href="#ALL-与-ANY" class="headerlink" title="ALL 与 ANY"></a>ALL 与 ANY</h6><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MySQL"><br># 使用ALL<br>SELECT ename, sal, deptno<br>FROM emp<br>WHERE sal &gt; ALL(<br>SELECT sal FROM emp<br>WHERE deptno = 30)  # 大于子查询的所有值  ========&gt;&gt;&gt;  相当于大于 MAX<br><br># 使用ANY  <br>SELECT ename, sal, deptno<br>FROM emp<br>WHERE sal &gt; ANY(<br>SELECT sal FROM emp<br>WHERE deptno = 30)  # 大于其中任何一个都可以 =======&gt;&gt;&gt; 相当于大于 MIN<br><br><br><br></code></pre></div></td></tr></table></figure><h6 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h6><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM emp<br>WHERE (deptno, job )<br>= (SELECT deptno,job FROM emp<br>WHERE ename = &#x27;Allen&#x27;) AND ename != &#x27;Allen&#x27;<br><br><br>SELECT * FROM student<br><br>INSERT INTO student VALUES(6,&#x27;李刚&#x27;,67,87,90);<br>INSERT INTO student VALUES(7,&#x27;王强&#x27;,67,87,90);<br>INSERT INTO student VALUES(8,&#x27;张军&#x27;,67,87,90);<br>INSERT INTO student VALUES(9,&#x27;刘壮&#x27;,67,87,90);<br><br>SELECT * FROM student<br>WHERE (chinese,english,math) = (<br>SELECT chinese,english,math FROM student<br>WHERE `name` = &#x27;刘壮&#x27;)<br><br>#####工资大于所在部门平均工资的员工信息<br>SELECT * FROM emp, (SELECT AVG(sal) AS avg_sal,deptno FROM emp<br>GROUP BY deptno) temp<br>WHERE emp.sal &gt; temp.avg_sal AND emp.deptno = temp.deptno<br><br>## 查找每个部门工资最高的人的详细资料<br><br>SELECT * FROM emp, (SELECT MAX(sal) AS max_sal, deptno <br>FROM emp GROUP BY deptno) temp<br>WHERE temp.max_sal = emp.sal AND  emp.deptno = temp.deptno<br><br>## 查找每个部门名,编号,地址, 人数<br>SELECT dept.dname, dept.deptno,dept.loc,temp.count<br>FROM dept,(SELECT COUNT(*) AS `count` ,deptno FROM emp<br>GROUP BY deptno) temp<br>WHERE  dept.deptno = temp.deptno<br><br></code></pre></div></td></tr></table></figure><h6 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h6><p><img src="/2022/02/24/MySQL/image-20220317222114801.png" alt="image-20220317222114801"></p><p>union all  : 不去重</p><p>union : 去重</p><p> <img src="/2022/02/24/MySQL/image-20220317224305560.png" alt="image-20220317224305560"></p><h1 id="六-函数"><a href="#六-函数" class="headerlink" title="六 函数"></a>六 函数</h1><h2 id="6-1-合计-x2F-统计函数count"><a href="#6-1-合计-x2F-统计函数count" class="headerlink" title="6.1 合计&#x2F;统计函数count"></a>6.1 合计&#x2F;统计函数count</h2><p>返回总行数</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT COUNT(*) FROM table_name<br>WHERE...<br><br>SELECT COUNT(列名) FROM table_name<br>WHERE...<br></code></pre></div></td></tr></table></figure><p>count(*) : 返回满足条件的记录的行数</p><p>count(列): 统计满足条件的某列有多少个, 但是会排除为空的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 演示统计函数使用<br>SELECT *,(chinese + english + math) FROM student<br>WHERE (chinese + english + math) &gt;250;<br><br>#统计一共有多少学生<br>SELECT COUNT(*) FROM student;<br><br><br><br>#统计数学成绩大于90的学生<br>SELECT COUNT(math) FROM student<br>WHERE math &gt; 90;<br><br># 统计总分&gt;250<br>SELECT COUNT(*) FROM student<br>WHERE (chinese + english + math) &gt;250;<br><br>CREATE TABLE t15(<br>`name` VARCHAR(20));<br><br>INSERT INTO t15 VALUES(&#x27;tom&#x27;);<br>INSERT INTO t15 VALUES(&#x27;jack&#x27;);<br>INSERT INTO t15 VALUES(&#x27;rose&#x27;);<br>INSERT INTO t15 VALUES(NULL);<br>SELECT * FROM t15;<br>SELECT COUNT(*) FROM t15; # 返回所有行数   返回4<br>SELECT COUNT(`name`) FROM t15; # 排除该列为空的行     返回3<br></code></pre></div></td></tr></table></figure><h2 id="6-2-合计函数-sum"><a href="#6-2-合计函数-sum" class="headerlink" title="6.2 合计函数 - sum"></a>6.2 合计函数 - sum</h2><p>返回满足where条件的行的和, 一般使用在数值列</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT SUM(列名) &#123;,sum(列名)...&#125; FROM table_name<br>[WHERE where_definition]<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"><br># 演示sum<br><br>#查询学生数学总成绩<br>SELECT SUM(math) FROM student;<br><br># 统计各科总成绩<br>SELECT SUM(chinese) AS &#x27;语文总成绩&#x27;,SUM(english) AS &#x27;英语总成绩&#x27;,SUM(math) AS &#x27;数学总成绩&#x27; FROM student;<br><br># 统计班级语文平均分<br>SELECT SUM(chinese)/COUNT(*) FROM student;<br></code></pre></div></td></tr></table></figure><blockquote><p>注意事项: </p><p>sum仅对数值起作用, 否则没有意义</p><p>多列求和必须要有逗号</p></blockquote><h2 id="6-3-合计函数-avg"><a href="#6-3-合计函数-avg" class="headerlink" title="6.3 合计函数  - avg"></a>6.3 合计函数  - avg</h2><p>返回某列平均值</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"><br># 求数学平均分<br>SELECT AVG(math) FROM student;<br><br># 求总分平均分<br>SELECT AVG(math + english + chinese) FROM student;<br></code></pre></div></td></tr></table></figure><h2 id="6-4-合计函数-Max-x2F-Min"><a href="#6-4-合计函数-Max-x2F-Min" class="headerlink" title="6.4 合计函数 - Max &#x2F; Min"></a>6.4 合计函数 - Max &#x2F; Min</h2><p>返回某列最大最小值</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT MAX(列名) from table_name<br>[WHERE...]<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs MYSQL">SELECT MAX(math + english + chinese),MIN(math + english + chinese)<br>FROM student;<br><br># 求出班级数学最高低分<br>SELECT MAX(math),MIN(math) FROM student;<br></code></pre></div></td></tr></table></figure><h2 id="6-5-字符串相关函数"><a href="#6-5-字符串相关函数" class="headerlink" title="6.5 字符串相关函数"></a>6.5 字符串相关函数</h2><table><thead><tr><th><strong>CHARSET(str)</strong></th><th>返回字符串字符集</th></tr></thead><tbody><tr><td><strong>CONCAT(string2,…)</strong></td><td><strong>连接子串</strong></td></tr><tr><td><strong>UCASE(str)</strong></td><td><strong>转换大写</strong></td></tr><tr><td><strong>LCASE(str)</strong></td><td><strong>转化小写</strong></td></tr><tr><td>LEFT(string2, length)</td><td>从string2的左边起取length个字符</td></tr><tr><td><strong>LENGTH(string)</strong></td><td><strong>string长度</strong></td></tr><tr><td><strong>REPLACE(str, search_str,replace_str)</strong></td><td><strong>在str中用replace_str 替换 search_str</strong></td></tr><tr><td>STRCMP(string1, string2)</td><td>逐字符比较两字串的的大小</td></tr><tr><td><strong>SUBSTRING(str, position ,…)</strong></td><td><strong>从str的position开始 (从1开始计算) 取length个字符</strong></td></tr><tr><td>LTRIM(string2) RTRIM(string 2)</td><td>去除前端空格或者后端空格</td></tr><tr><td>INSERT(string2, substring)</td><td>返回substring在string中出现的位置, 没有返回0</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 案例<br># 演示字符串相关函数<br>SELECT CHARSET(ename) FROM emp;<br>SELECT * FROM emp;<br>SELECT CONCAT(ename, &#x27; job is &#x27; , job) FROM emp;  # 结果: *** job is ***<br><br>SELECT INSTR(&#x27;hanshunping&#x27;, &#x27;ping&#x27;) FROM DUAL; # dual 是系统的(亚元表)虚拟表, 用于测试<br><br>SELECT UCASE(&#x27;hanshunping&#x27;) FROM DUAL;<br>SELECT UCASE(ename) FROM emp;<br>SELECT LCASE(&#x27;DFJAOJDIASOPFAPF&#x27;) FROM DUAL;<br><br>SELECT LEFT(ename, 2) FROM emp;<br>SELECT RIGHT(ename,3) FROM emp;<br><br>SELECT LENGTH(ename) FROM emp;<br>SELECT LENGTH(&#x27;韩顺平&#x27;) FROM DUAL; # 按照字节返回, utf8一个汉字3字节, 一个英文1字节<br><br>SELECT job, REPLACE(job,&#x27;clerk&#x27;,&#x27;普通职员&#x27;) FROM emp;<br><br>SELECT STRCMP(&#x27;hsp&#x27;,&#x27;Hp&#x27;) FROM DUAL;  # 前面字符 - 后面字符(返回1,0,-1) ==&gt; 相等返回0, Unicode编码号. 这里不区分大小写, 是s - p &gt; 0 = 1<br><br><br># 截取字串<br>SELECT SUBSTRING(ename,1,3) FROM emp;<br><br><br># 去空格<br><br># 去左<br>SELECT LTRIM(&#x27;     韩顺平教育 &#x27;) FROM DUAL;<br><br># 去掉右边空格<br>SELECT RTRIM(&#x27;   韩顺平教育            &#x27;) FROM DUAL;<br><br># 去掉左右两端的空格<br>SELECT TRIM(&#x27;          函数                &#x27;) FROM DUAL;<br><br><br><br><br><br><br>##################练习<br># 以首字母小写的方式显示所有的员工emp的姓名<br>SELECT CONCAT(UCASE(SUBSTRING(ename, 1,1)), SUBSTRING(ename,2,LENGTH(ename))) FROM emp;<br>SELECT REPLACE(ename, SUBSTRING(ename,1,1),UCASE(SUBSTRING(ename, 1,1))) FROM emp; # 这里有问题, 如果多个字母和首字母相同就会导致结果出错<br><br><br><br>SELECT CONCAT(UCASE(SUBSTRING(ename, 1,1)), SUBSTRING(ename,2)) FROM emp; # 2后面可以不写<br>SELECT CONCAT(UCASE(LEFT(ename,1)), SUBSTRING(ename,2)) FROM emp;<br></code></pre></div></td></tr></table></figure><h2 id="6-6-数学相关函数"><a href="#6-6-数学相关函数" class="headerlink" title="6.6 数学相关函数"></a>6.6 数学相关函数</h2><table><thead><tr><th>ABS( num )</th><th>绝对值</th></tr></thead><tbody><tr><td>BIN(decimal_ number)</td><td>十进制转二进制</td></tr><tr><td>CEILING(number2)</td><td>向上取整</td></tr><tr><td>CONV(number2, from_base, to_base)</td><td>进制转换</td></tr><tr><td>FLOOR(number2)</td><td>向下取整</td></tr><tr><td>FORMAT( number, decimal_places)</td><td>保留小数位数</td></tr><tr><td>HEX(DecimalNumber)</td><td>转十六进制</td></tr><tr><td>LEAST(number1, number2…)</td><td>求最小值</td></tr><tr><td>MOD( numerator, denominator)</td><td>求余数</td></tr><tr><td>RAND( [ seed ] )</td><td>RAND( [ seed] ) 其范围为 0 &lt;&#x3D; v &lt;&#x3D; 1.0</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 演示数学相关函数<br><br># 绝对值<br>SELECT ABS(10) FROM DUAL;<br>SELECT ABS(-23) FROM DUAL;<br><br># 十进制转二进制<br>SELECT BIN(10) FROM DUAL; # 1010<br><br>#向上取整<br>SELECT CEILING( 3.33 ) FROM DUAL; # 4<br>SELECT CEILING( -2.3) FROM DUAL; # -2<br><br># 进制转换 <br>SELECT CONV(11,10,2)FROM  DUAL; # 把十进制的 11 转成 2 进制输出 = 1011<br>SELECT CONV(&#x27;A&#x27;,16,10)FROM DUAL; # 把十六进制的 A 转成 10 进制 = 10<br><br># 向下取整<br>SELECT FLOOR(12.78) FROM DUAL; # 12<br><br># 保留小数位数  ## #######################################很重要###################<br>SELECT FORMAT( 32.422424, 3) FROM DUAL; # 保留3位, 四舍五入<br><br># 转16进制<br>SELECT HEX(15) FROM DUAL; # F<br><br># 多个数的最小值<br>SELECT LEAST(0,1,-10,42) FROM DUAL; # -10<br><br># 多个数最大值<br>SELECT GREATEST(0,1,-10,42) FROM DUAL;<br><br># 求余数<br>SELECT MOD(10,3) FROM DUAL; # 1<br>SELECT 10%3 FROM DUAL; # 1<br><br># 求随机数 [0,1] 闭区间<br>SELECT RAND() FROM DUAL;# 变化的随机数<br>SELECT RAND(3) FROM DUAL; # 固定的随机数, 当值改变, 返回的固定随机数也会改变. seed 不变化,随机数就不变<br><br></code></pre></div></td></tr></table></figure><h2 id="6-4-时间日期相关的函数"><a href="#6-4-时间日期相关的函数" class="headerlink" title="6.4 时间日期相关的函数"></a>6.4 时间日期相关的函数</h2><table><thead><tr><th><strong>CURRENT_DATE( )</strong></th><th><strong>当前日期</strong></th></tr></thead><tbody><tr><td><strong>CURRENT_TIME( )</strong></td><td><strong>当前时间</strong></td></tr><tr><td><strong>CURRENT_TIMESTAMP( )</strong></td><td><strong>当前时间戳</strong></td></tr><tr><td><strong>DATE( datetime )</strong></td><td><strong>返回datetime的日期部分</strong></td></tr><tr><td><strong>DATE_ADD(date2,INTERVAL d_value d_type)</strong></td><td><strong>在date2中加上日期或事件</strong></td></tr><tr><td><strong>DATE_SUB(date2,INTERVAL d_value d_type)</strong></td><td><strong>在date2上减去一个时间</strong></td></tr><tr><td><strong>DATEDIFF(date1, date2)</strong></td><td><strong>两个日期差(单位: 天)</strong></td></tr><tr><td>TIMEDIFF(date1,date2)</td><td>两个时间差(结果: 小时 分钟 秒)</td></tr><tr><td><strong>NOW( )</strong></td><td><strong>当前时间</strong></td></tr><tr><td>YEAR|MONTH|DATE(datetime) FROM_UNIXTIME()</td><td>从日期(datetime)中取出 年 | 月 | 日</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">##  单位  YEAR MONTH DAY HOUR MINUTE SECOND  ## <br><br># 日期函数<br><br># 当前日期<br>SELECT CURRENT_DATE FROM DUAL; # 括号可以带, 也可以不带  2022-03-09<br># 当前时间<br>SELECT CURRENT_TIME( ) FROM DUAL;  # 括号可带可不带  22:00:46<br># 当前时间戳 <br>SELECT CURRENT_TIMESTAMP FROM DUAL;# 2022-03-09 21:58:44<br><br><br># 返回日期部分<br>SELECT DATE(CURRENT_TIMESTAMP) FROM DUAL; # 2022-03-09 21:58:44 截取后得到: 2022-03-09<br><br> -- 测试用例<br> CREATE TABLE mes(<br>id INT,<br>content VARCHAR(30),<br>send_time DATETIME);<br>INSERT INTO mes VALUES(1,&#x27;北京新闻&#x27;,CURRENT_TIMESTAMP );<br>INSERT INTO mes VALUES(2,&#x27;上海新闻&#x27;,CURRENT_TIMESTAMP );<br>INSERT INTO mes VALUES(3,&#x27;四川新闻&#x27;,NOW() ); # 结果和 current_timestam一样<br>INSERT INTO mes VALUES(4,&#x27;广东新闻&#x27;,CURRENT_TIMESTAMP );<br><br>SELECT * FROM mes;<br><br>SELECT content, DATE(send_time) FROM mes; # 只显示content和日期, 不显示时间<br><br>SELECT * FROM mes WHERE DATE_ADD(send_time,INTERVAL 30 MINUTE) &gt;= CURRENT_TIMESTAMP; # 查询三十分钟以内的信息<br>SELECT * FROM mes WHERE DATE_SUB(CURRENT_TIMESTAMP,INTERVAL 20 MINUTE) &lt;= send_time; # 查询二十分钟以内的信息<br><br># 求两个时间天数差<br>SELECT DATEDIFF(CURRENT_DATE,&#x27;1998-11-08&#x27;) FROM DUAL; # 8522  (&#x27;2022-03-09&#x27;,&#x27;1998-11-08&#x27;) 前面减去后面<br>SELECT DATEDIFF(NOW(),&#x27;1950-03-04&#x27;) FROM DUAL;<br><br>SELECT DATE_ADD(&#x27;1998-11-08&#x27;, INTERVAL 80 YEAR) FROM DUAL;<br><br>SELECT DATEDIFF(DATE_ADD(&#x27;1998-11-08&#x27;, INTERVAL 80 YEAR), NOW() ) FROM DUAL;  <br>SELECT DATEDIFF(DATE_ADD(&#x27;1998-11-08&#x27;,INTERVAL 80 YEAR), NOW()) FROM DUAL; # 20698<br><br> <br># 取出年月日  时分秒<br>SELECT DAY(&#x27;1998-11-08&#x27;) FROM DUAL; # 8<br>SELECT MONTH(&#x27;1998-11-08&#x27;) FROM DUAL;<br>SELECT YEAR(&#x27;1998-11-08&#x27;) FROM DUAL;<br>SELECT MONTH(&#x27;2022-03-10 21:46:55&#x27;) FROM DUAL;# 3<br><br>SELECT HOUR(&#x27;2022-03-10 21:46:55&#x27;) FROM DUAL;<br>SELECT MINUTE(&#x27;2022-03-10 21:46:55&#x27;) FROM DUAL;<br>SELECT SECOND(&#x27;2022-03-10 21:46:55&#x27;) FROM DUAL;<br><br><br>#  unix_timestamp(): 返回的1970-1-1 距今的秒数<br>SELECT UNIX_TIMESTAMP(&#x27;2022-03-10 21:52:14&#x27;) FROM DUAL; # 不带参数就是距今, 否则是距离该时间戳的秒数<br><br><br># from_unixtime() :   把unix_timestamp秒数 转换成 #指定格式# 的日期<br><br>SELECT FROM_UNIXTIME(1646920334) FROM DUAL; # 2022-03-10 21:52:14<br>SELECT FROM_UNIXTIME(1646920334,&#x27;%Y-%m-%d &#x27;) FROM DUAL;<br>SELECT FROM_UNIXTIME(1646920334,&#x27;%Y-%m-%d %H:%i:%s&#x27;) FROM DUAL; # i表示分钟<br><br></code></pre></div></td></tr></table></figure><p><strong>在实际开发中, 经常使用int来保存一个unix时间戳, 然后使用FROM_UNIXTIME(  ) 进行转换</strong></p><h2 id="6-5-加密函数"><a href="#6-5-加密函数" class="headerlink" title="6.5 加密函数"></a>6.5 加密函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 演示加密系统函数<br><br># 查询用户  结果 : 用户名 @ IP地址<br><br>SELECT USER() FROM DUAL; # root@localhost  <br><br># 查询当前数据库名称<br>SELECT DATABASE() FROM DUAL; # 方式一<br>SELECT DATABASE(); # 方式二<br><br># 对用户密码进行加密  在数据库中存放的是加密后的密码, 采用md5进行加密<br>SELECT MD5( &#x27;hsp&#x27; ) FROM DUAL; # 这里显示该字符串的md5加密后结果: 32位16进制<br># 查询md5加密后长度<br>SELECT LENGTH(MD5(&#x27;hsp&#x27;)) FROM DUAL;<br><br># 演示: 用户表, 存放密码时采用 md5加密<br>CREATE TABLE users(<br>id INT,<br>`name` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;,<br>pwd CHAR(32) NOT NULL DEFAULT &#x27;&#x27;);   #安装了sql server以后，默认的用户名(uid)是sa，密码(pwd)是空值。  password<br><br>INSERT INTO users<br>VALUES(100,&#x27;韩顺平&#x27;,MD5(&#x27;hsp&#x27;));<br><br>SELECT * FROM users;  # pwd 将不会显示&#x27;hsp&#x27; 只会有32位 对应的md5加密结果 c435a9810009800cafef7dce3b7844a6<br><br>SELECT * FROM users<br>WHERE `name` = &#x27;韩顺平&#x27; AND pwd = MD5(&#x27;hsp&#x27;);  # 定位查询<br><br><br><br># password() 加密函数   MySQL 数据库用户密码就是采用的 password 函数加密<br>SELECT PASSWORD(&#x27;hsp&#x27;) FROM DUAL;<br>SELECT LENGTH(PASSWORD(&#x27;hsp&#x27;)) FROM DUAL;<br># <br>SELECT * FROM mysql.user;   # mysql.user 表示 数据库.表 / 这样就可以不换库就查询其他库内容<br> <br><br></code></pre></div></td></tr></table></figure><p><img src="/2022/02/24/MySQL/image-20220310223106553.png" alt="image-20220310223106553"></p><h2 id="6-6-流程控制函数"><a href="#6-6-流程控制函数" class="headerlink" title="6.6 流程控制函数"></a>6.6 流程控制函数</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 1. 查询emp表, 如果是comm是null, 就显示0.0</span><br><span class="hljs-comment">// 2. 如果emp表的job是cleark 则显示 职员, 如果是manager 则显示经理, 如果是salesman 则显示销售人员, 其它正常显示</span><br></code></pre></div></td></tr></table></figure><table><thead><tr><th>IF( expr1, expr2,expr3)</th><th>如果expr1为TRUE, 则返回expr2, 否则返回expr3</th></tr></thead><tbody><tr><td>IFNULL(expr1,expr2)</td><td>如果expr1不为空, 则返回expr1, 否则返回expr2</td></tr><tr><td>SELECT CASE WHEN expr1 THEN expr2 WHEN expr3 THEN expr4 ELSE expr5</td><td>如果expr1为true, 则返回expr2, 如果expr3为true, 返回expr4否则返回expr5</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># <br>SELECT IF(TRUE, &#x27;北京&#x27;, &#x27;上海&#x27;) FROM DUAL;  #  北京<br>#<br>SELECT IFNULL(null, &#x27;jsp&#x27;) # jsp<br>SELECT IFNULL(&#x27;JACK&#x27;,&#x27;124&#x27;) # JACK<br>#<br>SELECT CASE WHEN TRUE THEN &#x27;你好&#x27; WHEN TRUE  THEN &#x27;不好&#x27; ELSE &#x27;淦&#x27;; # 你好<br><br># 1. <br>SELECT IF(com IS NULL, 0.0, comm);  # 判断 null 用 IS<br>SELECT IFNULL(comm,0.0) from emp;<br># 2. <br>SELECT CASE <br>WHEN job = &#x27;cleark&#x27;  # 特定的值用 = <br>THEN &#x27;职员&#x27;<br>WHEN job = &#x27;manager&#x27;<br>THEN &#x27;经理&#x27;<br>WHEN job = &#x27;salesman&#x27;<br>THEN &#x27;销售人员&#x27;<br>ELSE job<br>END   # END 必不可少<br>FROM　emp;<br></code></pre></div></td></tr></table></figure><h1 id="七-MySQL约束"><a href="#七-MySQL约束" class="headerlink" title="七 MySQL约束"></a>七 MySQL约束</h1><p><img src="/2022/02/24/MySQL/image-20220319151109753.png" alt="image-20220319151109753"></p><p><img src="/2022/02/24/MySQL/image-20220319151350415.png" alt="image-20220319151350415"></p><p><img src="/2022/02/24/MySQL/image-20220319152129404.png" alt="image-20220319152129404"> </p><p><img src="/2022/02/24/MySQL/image-20220319152802605.png" alt="image-20220319152802605"></p><p><img src="/2022/02/24/MySQL/image-20220319153126055.png" alt="image-20220319153126055"></p><p><img src="/2022/02/24/MySQL/image-20220319153152411.png" alt="image-20220319153152411"></p><p><img src="/2022/02/24/MySQL/image-20220319153959647.png" alt="image-20220319153959647"></p><p><img src="/2022/02/24/MySQL/image-20220319155720899.png" alt="image-20220319155720899"></p><p><img src="/2022/02/24/MySQL/image-20220319160441489.png" alt="image-20220319160441489"></p><p><img src="/2022/02/24/MySQL/image-20220319160819992.png" alt="image-20220319160819992"></p><p><img src="/2022/02/24/MySQL/image-20220317225146556.png" alt="image-20220317225146556"></p><p><img src="/2022/02/24/MySQL/image-20220319164521029.png" alt="image-20220319164521029"></p><p><img src="/2022/02/24/MySQL/image-20220319170755729.png" alt="image-20220319170755729"></p><h1 id="八-MySQL索引"><a href="#八-MySQL索引" class="headerlink" title="八 MySQL索引"></a>八 MySQL索引</h1><p><img src="/2022/02/24/MySQL/image-20220319171053466.png" alt="image-20220319171053466"></p><p><img src="/2022/02/24/MySQL/image-20220319171111368.png" alt="image-20220319171111368"></p><p><img src="/2022/02/24/MySQL/image-20220319172527695.png" alt="image-20220319172527695"></p><p><img src="/2022/02/24/MySQL/image-20220319174217961.png" alt="image-20220319174217961"> </p><p><img src="/2022/02/24/MySQL/image-20220319174534729.png" alt="image-20220319174534729"></p><p><img src="/2022/02/24/MySQL/image-20220319174701510.png" alt="image-20220319174701510"></p><p><img src="/2022/02/24/MySQL/image-20220319180705015.png" alt="image-20220319180705015">    <img src="/2022/02/24/MySQL/image-20220319180952743.png" alt="image-20220319180952743"></p><p><img src="/2022/02/24/MySQL/image-20220319181015101.png" alt="image-20220319181015101"></p><p><img src="/2022/02/24/MySQL/image-20220319183430213.png" alt="image-20220319183430213"></p><h1 id="九-MySQL-事务"><a href="#九-MySQL-事务" class="headerlink" title="九 MySQL  事务"></a>九 MySQL  事务</h1><p><img src="/2022/02/24/MySQL/image-20220319183711655.png" alt="image-20220319183711655"></p><p><img src="/2022/02/24/MySQL/image-20220319184227149.png" alt="image-20220319184227149"></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 事务<br>CREATE TABLE table_t(<br>id INT ,<br>`name` VARCHAR(32),<br>price DECIMAL(3,2));<br>#开始事务<br>START TRANSACTION;<br>#操作<br>INSERT INTO table_t VALUES(23,&#x27;nihao&#x27;,3);<br><br>SELECT * FROM table_t;<br># 存档<br>SAVEPOINT a;<br># 操作<br>INSERT INTO table_t VALUES(34,&#x27;你好&#x27;,2);<br><br># 存档<br>SAVEPOINT b; <br><br># 清表  -------------- 此操作后不能够回退<br>TRUNCATE table_t;<br><br># 回退到a<br>ROLLBACK TO a;<br>SELECT * FROM table_t;<br><br><br># 回退全部事务<br>ROLLBACK;<br><br><br># 提交事务, 不能再回退了<br>COMMIT;<br></code></pre></div></td></tr></table></figure><p><img src="/2022/02/24/MySQL/image-20220319191007367.png" alt="image-20220319191007367"></p><p><img src="/2022/02/24/MySQL/image-20220319191923508.png" alt="image-20220319191923508"></p><p><img src="/2022/02/24/MySQL/image-20220319193131456.png" alt="image-20220319193131456"></p><p><img src="/2022/02/24/MySQL/image-20220319193343140.png" alt="image-20220319193343140"></p><p><img src="/2022/02/24/MySQL/image-20220319194059133.png" alt="image-20220319194059133"></p><p><img src="/2022/02/24/MySQL/image-20220319194449365.png" alt="image-20220319194449365"></p><p><img src="/2022/02/24/MySQL/image-20220319194922371.png" alt="image-20220319194922371"></p><p><img src="/2022/02/24/MySQL/image-20220319195047978.png" alt="image-20220319195047978"></p><p><img src="/2022/02/24/MySQL/image-20220319201849107.png" alt="image-20220319201849107"> </p><p><img src="/2022/02/24/MySQL/image-20220319202544686.png" alt="image-20220319202544686"></p><h1 id="十-MySQL-表类型和存储引擎"><a href="#十-MySQL-表类型和存储引擎" class="headerlink" title="十 MySQL 表类型和存储引擎"></a>十 MySQL 表类型和存储引擎</h1><p><img src="/2022/02/24/MySQL/image-20220320115819569.png" alt="image-20220320115819569"></p><p><img src="/2022/02/24/MySQL/image-20220320120324837.png" alt="image-20220320120324837"></p><p><img src="/2022/02/24/MySQL/image-20220320120826650.png" alt="image-20220320120826650"></p><p><img src="/2022/02/24/MySQL/image-20220320122449340.png" alt="image-20220320122449340"></p><p><img src="/2022/02/24/MySQL/image-20220320122748866.png" alt="image-20220320122748866"></p><h1 id="十一-视图"><a href="#十一-视图" class="headerlink" title="十一 视图"></a>十一 视图</h1><p><img src="/2022/02/24/MySQL/image-20220320123222163.png" alt="image-20220320123222163">     <img src="/2022/02/24/MySQL/image-20220320124029041.png" alt="image-20220320124029041"></p><p><img src="/2022/02/24/MySQL/image-20220320124115769.png" alt="image-20220320124115769"></p><p><img src="/2022/02/24/MySQL/image-20220320125029738.png" alt="image-20220320125029738"> </p><p><img src="/2022/02/24/MySQL/image-20220320125859663.png" alt="image-20220320125859663"></p><h1 id="十二-MySQL-管理"><a href="#十二-MySQL-管理" class="headerlink" title="十二 MySQL 管理"></a>十二 MySQL 管理</h1><p><img src="/2022/02/24/MySQL/image-20220320132054082.png" alt="image-20220320132054082"></p><p><img src="/2022/02/24/MySQL/image-20220320132452276.png" alt="image-20220320132452276"></p><p><img src="/2022/02/24/MySQL/image-20220320133827333.png" alt="image-20220320133827333"></p><p><img src="/2022/02/24/MySQL/image-20220320134925610.png" alt="image-20220320134925610"></p><p><img src="/2022/02/24/MySQL/image-20220320135143145.png" alt="image-20220320135143145"> </p><p><img src="/2022/02/24/MySQL/image-20220320135751668.png" alt="image-20220320135751668"></p><p><img src="/2022/02/24/MySQL/image-20220320135915256.png" alt="image-20220320135915256"></p><p><img src="/2022/02/24/MySQL/image-20220320140155849.png" alt="image-20220320140155849"></p><p>  <img src="/2022/02/24/MySQL/image-20220320150050516.png" alt="image-20220320150050516"></p><h1 id="十三-数据库设计"><a href="#十三-数据库设计" class="headerlink" title="十三 数据库设计"></a>十三 数据库设计</h1><h2 id="13-1-数据库设计简介"><a href="#13-1-数据库设计简介" class="headerlink" title="13.1 数据库设计简介"></a>13.1 数据库设计简介</h2><p><img src="/2022/02/24/MySQL/image-20220324112141005.png" alt="image-20220324112141005"></p><p><img src="/2022/02/24/MySQL/image-20220324112530673.png" alt="image-20220324112530673"></p><p><img src="/2022/02/24/MySQL/image-20220324112827179.png" alt="image-20220324112827179"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>用户管理：</strong></p><p>　　<strong>1、新建用户：</strong></p><p>　　　　<strong>&gt;CREATE USER name IDENTIFIED BY ‘ssapdrow’;</strong></p><p>　　<strong>2、更改密码：</strong></p><p>　　　　<strong>&gt;SET PASSWORD FOR name&#x3D;PASSWORD(‘fdddfd’);</strong></p><p>　　<strong>3、权限管理</strong></p><p>　　　　<strong>&gt;SHOW GRANTS FOR name;   &#x2F;&#x2F;查看name用户权限</strong></p><p>　　　　<em><em>&gt;GRANT SELECT ON db_name.</em> TO name;　　　　&#x2F;&#x2F;给name用户db_name数据库的所有权限</em>*</p><p>　　　　<em><em>&gt;REVOKE SELECT ON db_name.</em> TO name;　　　　&#x2F;&#x2F;GRANT的反操作，去除权限；</em>*</p><p><strong>一、数据库操作：</strong>　</p><p>　　<strong>1、查看数据库：</strong></p><p>　　　　<strong>&gt;SHOW DATABASES;</strong></p><p>　　<strong>2、创建数据库：</strong></p><p>　　　　<strong>&gt;CREATE DATABASE db_name;　　&#x2F;&#x2F;db_name为数据库名</strong></p><p>　　<strong>3、使用数据库：</strong></p><p>　　　　<strong>&gt;USE db_name;</strong></p><p>　　<strong>4、删除数据库：</strong></p><p>　　　　<strong>&gt;DROP DATABASE db_name;</strong></p><p><strong>二、创建表：</strong></p><p>　　<strong>1、创建表：</strong></p><p>　　　　<strong>&gt;CREATE TABLE table_name(</strong></p><p>　　　　<strong>&gt;id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,　　　　&#x2F;&#x2F;id值，无符号、非空、递增——唯一性，可做主键。</strong></p><p>　　　　<strong>&gt;name VARCHAR(60) NOT NULL</strong></p><p>　　　　<strong>&gt;score TINYINT UNSIGNED NOT NULL DEFAULT 0,　　　　&#x2F;&#x2F;设置默认列值</strong></p><p>　　　　<strong>&gt;PRIMARY KEY(id)</strong></p><p>　　　　<strong>&gt;)ENGINE&#x3D;InnoDB　　　　&#x2F;&#x2F;设置表的存储引擎，一般常用InnoDB和MyISAM；InnoDB可靠，支持事务；MyISAM高效不支持全文检索</strong></p><p>　　　　<strong>&gt;DEFAULT charset&#x3D;utf8;　　&#x2F;&#x2F;设置默认的编码，防止数据库中文乱码</strong></p><p>　　　　<strong>如果有条件的创建数据表还可以使用  &gt;CREATE TABLE IF NOT EXISTS tb_name(……..</strong></p><p>　　<strong>2、复制表：</strong></p><p>　　　　<strong>&gt;CREATE TABLE tb_name2 SELECT * FROM tb_name;</strong></p><p>　　　　<strong>或者部分复制：</strong></p><p>　　　　<strong>&gt;CREATE TABLE tb_name2 SELECT id,name FROM tb_name;</strong></p><p>　　<strong>3、创建临时表：</strong></p><p>　　　　<strong>&gt;CREATE TEMPORARY TABLE tb_name(这里和创建普通表一样);</strong></p><p>　　<strong>4、查看数据库中可用的表：</strong></p><p>　　　　<strong>&gt;SHOW TABLES;</strong></p><p>　　<strong>5、查看表的结构：</strong></p><p>　　　　<strong>&gt;DESCRIBE tb_name;</strong></p><p>　　　　<strong>也可以使用：</strong></p><p>　　　　<strong>&gt;SHOW COLUMNS in tb_name; 　　　&#x2F;&#x2F;from也可以</strong></p><p>　　<strong>6、删除表：</strong></p><p>　　　　<strong>&gt;DROP [ TEMPORARY ] TABLE [ IF EXISTS ] tb_name[ ,tb_name2…….];</strong></p><p>　　　　<strong>实例：</strong></p><p>　　　　<strong>&gt;DROP TABLE IF EXISTS tb_name;</strong></p><p>　　<strong>7、表重命名：</strong></p><p>　　　　<strong>&gt;RENAME TABLE name_old TO name_new;</strong></p><p>　　　　<strong>还可以使用：</strong></p><p>　　　　<strong>&gt;ALTER TABLE name_old RENAME name_new;</strong></p><p><strong>三、修改表：</strong></p><p>　　<strong>1、更改表结构：</strong></p><p>　　　　<strong>&gt;ALTER TABLE tb_name ADD[CHANGE,RENAME,DROP] …要更改的内容…</strong></p><p>　　　　<strong>实例：</strong></p><p>　　　　<strong>&gt;ALTER TABLE tb_name ADD COLUMN address varchar(80) NOT NULL;</strong></p><p>　　　　<strong>&gt;ALTER TABLE tb_name DROP address;</strong></p><p>　　　　<strong>&gt;ALTER TABLE tb_name CHANGE score score SMALLINT(4) NOT NULL;</strong></p><p><strong>四、插入数据：</strong></p><p>　　<strong>1、插入数据：</strong></p><p>　　　　<strong>&gt;INSERT INTO tb_name(id,name,score)VALUES(NULL,’张三’,140),(NULL,’张四’,178),(NULL,’张五’,134);</strong></p><p>　　　　<strong>这里的插入多条数据直接在后边加上逗号，直接写入插入的数据即可；主键id是自增的列，可以不用写。</strong></p><p>　　<strong>2、插入检索出来的数据：</strong></p><p>　　　　<strong>&gt;INSERT INTO tb_name(name,score) SELECT name,score FROM tb_name2;</strong></p><p><strong>五、更新数据：</strong></p><p>　　<strong>1、指定更新数据：</strong></p><p>　　　　<strong>&gt;UPDATE tb_name SET score&#x3D;189 WHERE id&#x3D;2;</strong></p><p>　　　　<strong>&gt;UPDATE tablename SET columnName&#x3D;NewValue [ WHERE condition ]</strong></p><p><strong>六、删除数据：</strong></p><p>　　<strong>1、删除数据：</strong></p><p>　　　　<strong>&gt;DELETE FROM tb_name WHERE id&#x3D;3;</strong></p><p><strong>七、条件控制：</strong></p><p>　　<strong>1、WHERE 语句：</strong></p><p>　　　　<strong>&gt;SELECT * FROM tb_name WHERE id&#x3D;3;</strong></p><p>　　<strong>2、HAVING 语句：</strong></p><p>　　　　<strong>&gt;SELECT * FROM tb_name GROUP BY score HAVING count(*)&gt;2</strong></p><p>　　<strong>3、相关条件控制符：</strong> </p><p>　　　　<strong>&#x3D;、&gt;、&lt;、&lt;&gt;、IN(1,2,3……)、BETWEEN a AND b、NOT</strong></p><p>　　　　<strong>AND 、OR</strong></p><p>　　　　<strong>Linke()用法中    %  为匹配任意、  _  匹配一个字符（可以是汉字）</strong></p><p>　　　　<strong>IS NULL 空值检测</strong></p><p> <strong>八、MySQL的正则表达式：</strong></p><p>　　<strong>1、<a href="https://so.csdn.net/so/search?q=Mysql&spm=1001.2101.3001.7020">Mysql</a>支持REGEXP的正则表达式：</strong></p><p>　　　　<strong>&gt;SELECT * FROM tb_name WHERE name REGEXP ‘^[A-D]’  &#x2F;&#x2F;找出以A-D 为开头的name</strong></p><p>　　<strong>2、特殊字符需要转义。</strong></p><p> <strong>九、MySQL的一些函数：</strong></p><p>　　<strong>1、字符串链接——CONCAT()</strong></p><p>　　　　<strong>&gt;SELECT CONCAT(name,’&#x3D;&gt;’,score) FROM tb_name</strong></p><p>　　<strong>2、数学函数：</strong></p><p>　　　　<strong>AVG、SUM、MAX、MIN、COUNT；</strong></p><p>　　<strong>3、文本处理函数：</strong></p><p>　　　　<strong>TRIM、LOCATE、UPPER、LOWER、SUBSTRING</strong></p><p>　　<strong>4、运算符：</strong></p><p>　　　　**+、-、<em>、*</em></p><p>　　<strong>5、时间函数：</strong></p><p>　　　　<strong>DATE()、CURTIME()、DAY()、YEAR()、NOW()…..</strong></p><p> <strong>十、分组查询：</strong></p><p> 　<strong>1、分组查询可以按照指定的列进行分组：</strong></p><p>　　　　<strong>&gt;SELECT COUNT(<em>) FROM tb_name GROUP BY score HAVING COUNT(</em>)&gt;1;</strong></p><p>　　<strong>2、条件使用Having；</strong></p><p>　　<strong>3、ORDER BY 排序：</strong></p><p>　　　　<strong>ORDER BY DESC|ASC　　　　&#x3D;&gt;按数据的降序和升序排列</strong></p><p><strong>十一、UNION规则——可以执行两个语句（可以去除重复行）</strong></p><p> <strong>十二、全文检索——MATCH和AGAINST</strong></p><p>　　<strong>1、SELECT MATCH(note_text)AGAINST(‘PICASO’) FROM tb_name;</strong></p><p>　　<strong>2、InnoDB引擎不支持全文检索，MyISAM可以；</strong></p><p> <strong>十三、视图</strong></p><p>　　<strong>1、创建视图</strong></p><p>　　　　<strong>&gt;CREATE VIEW name AS SELECT * FROM tb_name WHERE ~~ ORDER BY ~~;</strong></p><p>　　<strong>2、视图的特殊作用：</strong></p><p>　　　　　　<strong>a、简化表之间的联结（把联结写在select中）；</strong></p><p>　　　　　　<strong>b、重新格式化输出检索的数据（TRIM，CONCAT等函数）；</strong></p><p>　　　　　　<strong>c、过滤不想要的数据（select部分）</strong></p><p>　　　　　　<strong>d、使用视图计算字段值，如汇总这样的值。</strong></p><p> <strong>十四、使用存储过程：</strong></p><p>　　<strong>个人理解，存储过程就是一个自定义函数，有局部变量参数，可传入参数，可以返回值，不过这语法够呆滞的~~~</strong></p><p>　　<strong>1、创建存储过程：</strong></p><p>　　　　<strong>&gt;CREATE PROCEDURE pro(</strong></p><p>　　　　<strong>&gt;IN num INT,OUT total INT)</strong></p><p>　　　　<strong>&gt;BEGIN</strong></p><p>　　　　<strong>&gt;SELECT SUM(score) INTO total FROM tb_name WHERE id&#x3D;num;</strong></p><p>　　　　<strong>&gt;END;</strong></p><p>　　　***<strong>这里的  IN (传递一个值给存储过程)，OUT（从存储过程传出一个值），INOUT（对存储过程传入、传出），INTO（保存变量）</strong></p><p>　　<strong>2、调用存储过程：</strong></p><p>　　　　<strong>&gt;CALL pro(13,@total)　　　　　　&#x2F;&#x2F;这里的存储过程两个变量，一个是IN一个是OUT，这里的OUT也是需要写上的，不写会出错</strong></p><p>　　　　<strong>&gt;SELECT @total　　　　　　　　　&#x2F;&#x2F;这里就可以看到结果了；</strong></p><p>　　<strong>3、存储过程的其他操作：</strong></p><p>　　　　<strong>&gt;SHOW PROCEDURE STATUS;　　　　　　&#x2F;&#x2F;显示当期的存储过程</strong></p><p>　　　　<strong>&gt;DROP PROCEDURE pro;　　　　　　　　　&#x2F;&#x2F;删除指定存储过程</strong></p><p><strong>十五、使用游标：</strong></p><p>　　<strong>对这个理解不是很懂，朋友多多指点哦~~~</strong></p><p>　　　<strong>1、游标的操作</strong></p><p>　　　　<strong>&gt;CREATE PROCEDURE pro()</strong></p><p>　　　　<strong>&gt;BEGIN</strong> </p><p>　　　　<strong>&gt;DECLARE ordername CURSOR FOR</strong></p><p>　　　　<strong>&gt;SELECT order_num FROM orders;</strong></p><p>　　　　<strong>&gt;END;</strong></p><hr><p>　　　　<strong>&gt;OPEN ordername;　　　　&#x2F;&#x2F;打开游标</strong></p><hr><p>　　　　<strong>&gt;CLOSE ordername;　　　　&#x2F;&#x2F;关闭游标</strong></p><p><strong>十六、触发器：</strong></p><p>　　<strong>触发器是指在进行某项指定操作时，触发触发器内指定的操作；</strong></p><p>　　<strong>1、支持触发器的语句有DELETE、INSERT、UPDATE,其他均不支持</strong></p><p>　　<strong>2、创建触发器：</strong></p><p>　　　　<strong>&gt;CREATE TRIGGER trig AFTER INSERT ON ORDERS FOR EACH ROW SELECT NEW.orser_name;</strong></p><p>　　　　<strong>&gt;INSERT语句，触发语句，返回一个值</strong></p><p>　　<strong>3、删除触发器</strong></p><p>　　　　<strong>&gt;DROP TRIGGER trig;</strong></p><p><strong>十七、语法整理：</strong></p><p>　　<strong>1、ALTER TABLE（修改表）</strong></p><p>　　　　<strong>ALTER TABLE table_name</strong></p><p>　　　　<strong>(　　ADD　　　　column　　datatype  　[ NULL | NOT NULL ]　　[ CONSTRAINTS ]</strong></p><p>　　　　　　 <strong>CHANGE　　column 　　datatype 　　COLUMNS　　[ NULL | NOT NULL ]　　 [ CONSTRAINTS ]</strong></p><p>　　　　　　 <strong>DROP　　　 column，</strong></p><p>　　　　　　　<strong>。。。。</strong></p><p>　　　　<strong>)</strong></p><p>　　<strong>2、COMMIT(处理事务)</strong></p><p>　　　　<strong>&gt;COMMIT;</strong></p><p> 　<strong>3、CREATE INDEX(在一个或多个列上创建索引)</strong></p><p>　　　　<strong>CREATE INDEX index_name ON tb_name (column [ ASC | DESC ] , …….);</strong></p><p> 　<strong>4、CREATE PROCEDURE (创建存储过程)</strong></p><p>　　　　<strong>CREATE PROCEDURE pro([ parameters ])</strong></p><p>　　　　<strong>BEGIN</strong></p><p>　　　　<strong>……..</strong></p><p>　　　　<strong>END</strong></p><p> 　<strong>5、CREATE TABLE(创建表)</strong></p><p>　　　　<strong>CREATE TABLE tb_name(</strong></p><p>　　　　<strong>column_name　　datetype　　[ NULL | NOT NULL ] 　[ condtraints]  ,</strong></p><p>　　　　<strong>column_name　　datetype　　[ NULL | NOT NULL ] 　[ condtraints]  ,</strong></p><p>　　　　<strong>…….</strong></p><p>　　　　<strong>PRIMARY KEY( column_name )</strong></p><p>　　　　<strong>)ENGINE&#x3D;[  InnoDB | MyiSAM ]DEFAULT CHARSET&#x3D;utf8 AUTO_INCREMENT&#x3D;1 ;</strong></p><p> 　<strong>6、CREATE USER(创建用户)</strong></p><p>　　　　<strong>CREATE USER user_name [ @hostname ] [ IDENTIFIED BY [ PASSWORD ] ‘pass_word’ ];</strong></p><p> 　<strong>7、CREATE VIEW （在一个或多个表上创建视图）</strong></p><p>　　　　<strong>CREATE [ OR REPLACE ] VIEW view_name AS SELECT。。。。。。</strong></p><p> 　<strong>8、DELETE (从表中删除一行或多行)</strong></p><p>　　　　<strong>DELETE FROM table_name [WHERE ……]</strong></p><p> 　<strong>9、DROP(永久删除数据库及对象，如视图、索引等)</strong></p><p>　　　　<strong>DROP DATEBASE | INDEX | PROCEDURE | TABLE | TRIGGER | USER | VIEW  name</strong></p><p> 　<strong>10、INSERT （给表添加行）</strong></p><p>　　　　<strong>INSERT INTO tb_name [ ( columns,…… ) ]  VALUES(value1,…………);</strong></p><p>　　　　<strong>使用SELECT值插入：</strong></p><p>　　　　<strong>INSERT INTO tb_name [ ( columns,…… ) ]</strong></p><p>　　　　<strong>SELECT columns , …….  FROM tb_name [ WHERE …… ] ;</strong></p><p>　　 <strong>11、ROLLBACK（撤销一个事务处理块）</strong></p><p>　　　　<strong>ROLLBACK [  TO  savapointname  ];</strong></p><p>　　 <strong>12、SAVEPOINT(为ROLLBACK设置保留点)</strong></p><p>　　　　<strong>SAVEPOINT sp1;</strong></p><p>　　 <strong>13、SELECT (检索数据，显示信息)</strong></p><p>　　　　<strong>SELECT column_name,…..FROM tb_name  [ WHERE ]  [ UNION ]   [ RROUP BY ]  [ HAVING ]  [ ORDER BY ]</strong></p><p> 　<strong>14、START TRANSACTION (一个新的事务处理块的开始)</strong></p><p>　　　　<strong>START TRANSACTION</strong></p><p>　　 <strong>15、UPDATE(更新一个表中的一行或多行)</strong></p><p>　　　　<strong>UPDATE tb_name SET column&#x3D;value,……[ where ]</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb整体介绍</title>
      <link href="/2022/02/24/JavaWeb/"/>
      <url>/2022/02/24/JavaWeb/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><p><img src="/2022/02/24/JavaWeb/image-20220324101216138.png" alt="image-20220324101216138"></p><h1 id="一、JavaWeb介绍"><a href="#一、JavaWeb介绍" class="headerlink" title="一、JavaWeb介绍"></a>一、JavaWeb介绍</h1><p><img src="/2022/02/24/JavaWeb/image-20220324101806921.png" alt="image-20220324101806921"></p><p><img src="/2022/02/24/JavaWeb/image-20220324102202791.png" alt="image-20220324102202791"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> JavaWeb介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类</title>
      <link href="/2022/02/24/%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>/2022/02/24/%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="包装类-WrapperType"><a href="#包装类-WrapperType" class="headerlink" title="包装类   WrapperType"></a>包装类   WrapperType</h1><h2 id="包装类的分类"><a href="#包装类的分类" class="headerlink" title="包装类的分类"></a>包装类的分类</h2><ol><li>针对八种基本定义相应的引用类型   包装类</li><li>有了类的特点, 就可以调用类中的方法</li></ol><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">Boolean  (独立)</td></tr><tr><td align="center">char</td><td align="center">Character  (独立)</td></tr><tr><td align="center">byte</td><td align="center">Byte  (父类是Number)</td></tr><tr><td align="center">short</td><td align="center">Short  (父类是Number)</td></tr><tr><td align="center">int</td><td align="center">Interger  (父类是Number)</td></tr><tr><td align="center">long</td><td align="center">Long  (父类是Number)</td></tr><tr><td align="center">float</td><td align="center">Float  (父类是Number)</td></tr><tr><td align="center">double</td><td align="center">Double  (父类是Number)</td></tr></tbody></table><h2 id="包装类和基本数据类型的转换-以int-和-Integer为例"><a href="#包装类和基本数据类型的转换-以int-和-Integer为例" class="headerlink" title="包装类和基本数据类型的转换(以int 和 Integer为例)"></a>包装类和基本数据类型的转换(以int 和 Integer为例)</h2><ol><li>jdk5前的手动装箱和拆箱的方式, 装箱: 基本类型 &#x3D;&#x3D;&gt; 包装类型, 反之, 拆箱</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//手动装箱 int ==&gt; integer</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(n1);<span class="hljs-comment">//方式一</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> Integer.valueOf(n1); <span class="hljs-comment">// 方式二</span><br><br><span class="hljs-comment">//手动拆箱  integer ==&gt; int</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> integer.intValue();<br></code></pre></div></td></tr></table></figure><ol start="2"><li>jdk5 以后自动装箱和拆箱方式</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//jdk5以后, 就可以自动装箱和自动拆箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-comment">//自动装箱 int ==&gt; integer</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> n2;<span class="hljs-comment">// 底层使用的是  Integer.valueOf(n2)</span><br><span class="hljs-comment">//自动拆箱 Integer ==&gt; int</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> integer2;   <span class="hljs-comment">//底层调用的仍然是 intValue() 方法</span><br><br></code></pre></div></td></tr></table></figure><ol start="3"><li>自动装箱底层调用的是valueOf方法, 比如Interger.valueOf()</li><li>其他包装类的用法类似</li></ol><blockquote><p>三元运算符是一个整体, 存在int和double类型的变量运算的时候, int 会自动 double转型</p></blockquote><h2 id="包装类和String类型的相互转换"><a href="#包装类和String类型的相互转换" class="headerlink" title="包装类和String类型的相互转换"></a>包装类和String类型的相互转换</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//包装类 ==&gt; String</span><br><span class="hljs-comment">//以Integer为例</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">//自动装箱</span><br><span class="hljs-comment">//方式一</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span>  i + <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">//对象i不受str1影响, str1相当于复制了i的数据</span><br><span class="hljs-comment">//方式二</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> i.toString();<br><span class="hljs-comment">//方式三</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> String.valueOf(i);<br><br><br><span class="hljs-comment">// String ==&gt; 包装类</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br><span class="hljs-comment">//方式一</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> Integer.parseInt(str4); <span class="hljs-comment">//使用到了自动装箱</span><br><span class="hljs-comment">//方式二</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(str4);<span class="hljs-comment">//构造器</span><br></code></pre></div></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>System.out.println(i == j);  <span class="hljs-comment">//不是同一个对象, false</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">// 底层 Integer.valueOf(1);</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">// 底层 Integer.valueOf(1);</span><br>System.out.println(m == n); <span class="hljs-comment">// 看范围 -128&lt; 1 &lt; 127, 返回true</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>System.out.println(x == y); <span class="hljs-comment">// 128 &gt; 127, new Integer, 返回false</span><br></code></pre></div></td></tr></table></figure><h1 id="String类💖"><a href="#String类💖" class="headerlink" title="String类💖"></a>String类💖</h1><ul><li><p>String 对象用于保存字符串, 也就是一组<strong>字符序列</strong>. <strong>字符串常量</strong>是用双引号括起来的字符序列. </p></li><li><p>字符串的字符使用Unicode字符编码, 一个字符(不区分字母还是汉字) 占两个字节2B.   (char占两个字节)</p></li><li><p>String实现了Serializable接口, 说明String对象可以串行化. 对象可以在网络传输</p></li><li><p>String 类实现了Comparable接口, 说明String对象可以比较大小</p></li><li><p>String 是final类, 不能被其他的类继承</p></li><li><p>String类中有属性<strong>private final char value[ ];</strong> 用于存放字符串内容</p></li><li><p>value[ ]数组中的字符可以修改, 但是value不能修改, 即数组的地址不能修改</p></li><li><p>String类常用的构造方法:</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(String original);<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[] a);<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>[] a, <span class="hljs-type">int</span> startIndex, <span class="hljs-type">int</span> count);<br></code></pre></div></td></tr></table></figure><h2 id="创建String对象的两种方式"><a href="#创建String对象的两种方式" class="headerlink" title="创建String对象的两种方式"></a>创建String对象的两种方式</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1.</span> <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hspedu&quot;</span>;<span class="hljs-comment">//方式一: 直接赋值.  s指向常量池的含有hspedu的数据空间地址</span><br><span class="hljs-number">2.</span> <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hspedu&quot;</span>);<span class="hljs-comment">// 方式二: 调用构造器, s指向堆区空间,这个空间里有个value属性, value指向常量池的含有hspedu的数据空间地址</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-comment">//创建了一个对象</span><br><span class="hljs-comment">//编译器会做优化, 判断创建的常量池对象, 是否有引用指向</span><br><span class="hljs-comment">//y</span><br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloabc&quot;</span>;<br></code></pre></div></td></tr></table></figure><h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hsp&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hsp&quot;</span>);<br>System.out.println(a.equals(b));T<br>System.out.println(a == b);F<br>System.out.println(a == b.intern()); T<span class="hljs-comment">//intern()返回一个地址, 这里b.intern(), 返回b的字符串在常量池中的地址</span><br>System.out.println(b == b.intern()); F<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">以下语句创建了几个对象? <br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;  <span class="hljs-comment">//在常量池中查找有无&quot;hello&quot;对象, 没有就创建一个</span><br>s1 = <span class="hljs-string">&quot;haha&quot;</span>;  <span class="hljs-comment">//在常量池中查找有无&quot;haha&quot;对象, 没有就创建一个</span><br><br><br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&quot;abc&quot;</span>; <span class="hljs-comment">//编译器会优化, 直接在常量池中创建一个helloabc, 因此这里只创建一个对象</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">// 常量池中创建一个&quot;hello&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>; <span class="hljs-comment">// 常量池中创建一个&quot;abc&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b; <span class="hljs-comment">// c指向堆中对象, value指向常量池中&quot;helloabc&quot;.    步骤如下:</span><br><span class="hljs-comment">//1. 先创建一个StringBuilder sb = StringBuilder();</span><br><span class="hljs-comment">//2. 执行 sb.append(&quot;hello&quot;);</span><br><span class="hljs-comment">//3. 执行 sb.append(&quot;abc&quot;);</span><br><span class="hljs-comment">//4. 调用sb.toString(), 返回一个String对象(new出来的).  其value指向&quot;helloabc&quot;</span><br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hsp&quot;</span>);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] ch = &#123;<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String str, <span class="hljs-type">char</span> ch[])</span>&#123;<br>        str = <span class="hljs-string">&quot;java&quot;</span>;<br>        ch[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;h&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Test1</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test1</span>();<br>        ex.change(ex.str, ex.ch);<br>        System.out.print(ex.str + <span class="hljs-string">&quot;and&quot;</span>);<br>        System.out.println(ex.ch);<br>    &#125;<br>    <br>&#125;<br><span class="hljs-comment">//结果:hspandhava</span><br><br></code></pre></div></td></tr></table></figure><h2 id="String类常用方法"><a href="#String类常用方法" class="headerlink" title="String类常用方法"></a>String类常用方法</h2><p>String类是保存字符串常量的. 每次更新都需要重新开辟空间, 效率较低. 因此java设计者还提供了StringBuilder和StringBuffer来增强String的功能, 并提高效率</p><ol><li>equals( ):  区分大小写, 判断内容是否相等</li><li>equalslgnoreCase( ):  <strong>忽略大小写</strong>判断内容是否相等</li><li>length( ): 获取字符串长度</li><li>indexOf( ):  获取字符在字符串第一次出现的索引, 索引从0开始, 找不到就返回-1;</li><li>lastIndexOf( ):  获取字符在字符串中最后一次出现的索引</li><li>substring( ): <strong>截取指定范围的子串</strong>. s.substring(6), 从索引6开始截取后面的内容(下标按从0开始计数), s.substring(0,5); 从0开始截取到第5个,即索引4这个位置</li><li>trim( ):   <strong>去前后空格</strong></li><li>charAt( ):  获取某索引处的字符, 注意不能使用Str[index] 这种方式. 正确:Str.charAt(0);</li><li>toUpperCase( ); <strong>转换为大写</strong></li><li>toLowerCase( );转化为小写</li><li>s.concat(“123”).concat(“456”); <strong>字符串拼接</strong></li><li>replace(s1 ,s2); 返回 字符串中将s1替换成s2的字符串  s.replace(s1,s2)</li><li><strong>s.split(“,”); 以 ‘,’为分割, 将s分成多个字符串, 返回一个字符串数组</strong></li><li>s.toCharArray( ); 将s转换成char数组</li><li>compareTo( ); a.compareTo(b): 字符集合是包含关系比较两个字符串的大小, 返回a.length() - b.length(); 字符集合非包含关系: 返回第一个不同处的字符Unicode编码之差</li><li>format(“字符串%s, %d”, s, i); c语言print;   %s(字符串), %d(整数), %.2f(小数保留两位,四舍五入), %c(char类型) : 占位符</li></ol><h1 id="StringBuffer类💖"><a href="#StringBuffer类💖" class="headerlink" title="StringBuffer类💖"></a>StringBuffer类💖</h1><ul><li>java.lang.StringBuffer代表可变的字符序列, 可以对字符串内容进行增删.</li><li>很多方法与String相同, 但StringBuffer是<strong>可变长度的</strong></li><li>StringBuffer是一个容器</li></ul><h2 id="String与StringBuffer"><a href="#String与StringBuffer" class="headerlink" title="String与StringBuffer"></a>String与StringBuffer</h2><ol><li>String保存的是字符串常量(常量池中), 里面的值不能更改, 每次String类的更新实际上就是更改地址, 效率较低</li><li>StringBuffer保存的是字符串变量(堆中), 里面的值可以更改, 每次StringBuffer的更新实际上可以更新内容, 不用每次更新地址, 效率较高</li></ol><h2 id="StringBuffer构造器"><a href="#StringBuffer构造器" class="headerlink" title="StringBuffer构造器"></a>StringBuffer构造器</h2><ol><li><p>StringBuffer(int capacity);&#x2F; StringBuffer();  构造一个字符缓冲区, 大小为capacity, 默认为16</p></li><li><p>StringBuffer(String str); 构造一个字符缓冲区, 初始内容为str.   缓冲区大小为str.length() + 16.</p></li></ol><h2 id="String-和-StringBuffer相互转换"><a href="#String-和-StringBuffer相互转换" class="headerlink" title="String 和 StringBuffer相互转换"></a>String 和 StringBuffer相互转换</h2><p>在开发中, 经常需要将String 和 StringBuffer进行转换</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//String ==&gt; StringBuffer</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">//方式一</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(s);<br><span class="hljs-comment">//方式二</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>b2.append(s);<br><br><span class="hljs-comment">//StringBuffer ==&gt; String</span><br><span class="hljs-comment">//方式一</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> b1.toString();<br><span class="hljs-comment">//方式二</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b1);<br></code></pre></div></td></tr></table></figure><h2 id="StringBuffer类常用方法"><a href="#StringBuffer类常用方法" class="headerlink" title="StringBuffer类常用方法"></a>StringBuffer类常用方法</h2><ol><li>append( ); 增</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>s.append(<span class="hljs-string">&#x27;,&#x27;</span>);<span class="hljs-comment">//在后面追加&#x27;,&#x27; 返回hello,</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li><p>delete(start, end); 删</p></li><li><p>replace(start, end, string) &#x2F;&#x2F;改  将start –end 间的内容替换掉, 不含end</p></li><li><p>indexOf( )  查  查找子串在字符串第一次出现的索引, 如果找不到就返回-1</p></li><li><p>insert(9, s) 插入, 在指定位置插入一个字符串, 这里是将字符串s插入到原字符串的第9个索引, 索引9及后面的内容后移</p></li><li><p>length()  获取长度</p></li></ol><h1 id="StringBuilder类💖"><a href="#StringBuilder类💖" class="headerlink" title="StringBuilder类💖"></a>StringBuilder类💖</h1><ul><li><p>一个可变的字符序列. 此类提供了一个与StringBuffer兼容的API, 但不保证同步(StringBuilder不是线程安全的). 该类被设计用作 StringBuffer的一个简易替换, <strong>用在字符串缓冲区被单个线程使用的时候</strong>. 如果可能, 建议优先采用该类, 因为在大多实现中, 它比StringBuffer 要快</p></li><li><p>在StringBuffer上的主要操作是append和insert方法, 可重载这些方法, 以接收任意类型的数据</p></li><li><p>StringBuilder和StringBuffer均代表可变的字符序列, 方法是一样的, 所以使用和StringBuffer一样</p></li><li><p>继承了AbstractStringBuilder类,</p></li><li><p>实现了Serializable,说明其对象可以串行化(对象可以网络传输,可以保存到文件)</p></li><li><p>是final类, 不可被继承</p></li><li><p>StringBuilder对象的字符序列仍然是存放在其父类AbstractStringBuilder的char[] value中(堆中)</p></li><li><p>StringBuilder的方法没有做互斥处理, 即没有synchronized关键字, 因此在单线程的情况下使用StringBuilder</p></li></ul><h2 id="String-StringBuffer-和-StringBuilder-的比较"><a href="#String-StringBuffer-和-StringBuilder-的比较" class="headerlink" title="String, StringBuffer 和 StringBuilder 的比较"></a>String, StringBuffer 和 StringBuilder 的比较</h2><ol><li>StringBuffer和StringBuilder非常类似, 均代表可变的字符序列, 而且方法也一样</li><li>String: 不可变字符序列, 效率低, 但是复用率高</li><li>StringBuffer: 可变字符序列, 效率较高(增删), 线程安全</li><li>StringBuilder: 可变字符序列, 效率最高, 线程不安全</li><li>String使用注意说明</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<span class="hljs-comment">//创建了一个字符串</span><br>s += <span class="hljs-string">&quot;b&quot;</span>; <span class="hljs-comment">//实际上原来的&quot;a&quot; 字符串对象已经丢弃了, 现在又产生了一个字符串s +&quot;b&quot;(也就是&quot;ab&quot;). 如果多次执行这些改变串内容的操作, 会导致大量副本字符串对象留存在内存中, 降低效率. 如果这样的操作放在循环中, 会极大影响程序的性能 ==&gt; 结论: 如果我们要对字符串对象做大量修改, 就不使用String</span><br></code></pre></div></td></tr></table></figure><h2 id="String-StringBuffer-和-StringBuilder-使用原则"><a href="#String-StringBuffer-和-StringBuilder-使用原则" class="headerlink" title="String, StringBuffer 和 StringBuilder 使用原则"></a>String, StringBuffer 和 StringBuilder 使用原则</h2><ol><li>如果字符串存在<strong>大量的修改操作</strong>, 一般使用StringBuffer或StringBuilder</li><li>如果字符串存在大量的修改操作, 并在<strong>单线程</strong>的情况, 使用<strong>StringBuilder</strong></li><li>如果字符串存在大量的修改操作, 并在<strong>多线程</strong>的情况, 使用 <strong>StringBuffer</strong></li><li>如果我们字符串很少修改, <strong>被多个对象引用</strong>, 使用String, 比如配置信息等</li></ol><h1 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h1><p>Math类包含用于执行基本数学运算的方法, 如初等指数, 对数, 平方根和三角函数</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li>abs  绝对值  <code>Math.abs(-3)</code> </li><li>pow  求幂</li><li>ceil  向上取整</li><li>floor  向下取整</li><li>round  四舍五入</li><li>sqrt  求开方</li><li>random  求随机数(0到1之间[0 , 1)的随机小数)</li><li>max  求两个数的最大值</li><li>min  求两个数的最小值</li></ol><h1 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h1><p>Arrays类里面包含了一系列静态方法, 用于管理或操作数组(比如排序和搜索)</p><ol><li>toString 返回数组的字符串形式   Arrays.toString(arr)</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">43</span>,<span class="hljs-number">23</span>,<span class="hljs-number">54</span>,<span class="hljs-number">23</span>,<span class="hljs-number">64</span>,<span class="hljs-number">43</span>,<span class="hljs-number">42</span>,<span class="hljs-number">24</span>&#125;;<br>        System.out.println(Arrays.toString(a));<br><span class="hljs-comment">//结果:[1, 23, 23, 43, 23, 54, 23, 64, 43, 42, 24]</span><br><br></code></pre></div></td></tr></table></figure><ol start="2"><li>sort排序(自然排序和定制排序)</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Arrays.sort(arr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>()&#123;<span class="hljs-comment">// 匿名内部类, 接口</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span>&#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> (Integer)o1;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> (Integer)o2;<br>        <span class="hljs-keyword">return</span> i1 - i2;<br>    &#125;<br>&#125;);<br><br><br></code></pre></div></td></tr></table></figure><ol start="3"><li>binarySearch通过二分搜索发进行<strong>二分查找</strong>, 数组要求必须已经排好序. 返回元素在数组中的索引, 不存在则返回-(low+1)</li><li>Arrays.copyOf(arr,arr.length)  数组元素的复制,     返回拷贝数组的n个元素组成的数组, 多了就把多出的元素设为null</li><li>Arrays.fill(num, 99).  数组元素的填充.   使用99替换num数组的所有元素</li><li>Arrays.equals(arr1, arr2),  比较两个数组元素内容是否完全一致  </li><li>Arrays.asList(1,2,3,4,4,5)  将一组值转换为list集合,并返回</li></ol><h1 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h1><h2 id="System类常见方法和案例"><a href="#System类常见方法和案例" class="headerlink" title="System类常见方法和案例"></a>System类常见方法和案例</h2><ol><li>exit 退出当前程序   System.exit(0); &#x2F;&#x2F; 0表示正常退出(0表示正常退出)</li><li>arraycopy: 复制数组元素, 比较适合底层调用, 一般使用Arrays.copyOf完成复制数组</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] src = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[] dest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>System.arraycopy(src,<span class="hljs-number">0</span>,dest,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//把原数组src的第0个位置开始的元素拷贝到目标数组的第0个元素开始位置,共拷贝3个</span><br><br></code></pre></div></td></tr></table></figure><ol start="3"><li>currentTimeMillens: 返回当前时间距离1970-1-1的毫秒数   System.currentTimeMilens();</li><li>gc: 运行垃圾回收机制  System.gc();</li></ol><h1 id="BigInteger-和-BigDecimal类"><a href="#BigInteger-和-BigDecimal类" class="headerlink" title="BigInteger 和 BigDecimal类"></a>BigInteger 和 BigDecimal类</h1><ol><li>BigInteger适合保存比较大的整型</li><li>BigDecimal适合保存精度更高的浮点型(小数)</li></ol><h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><p>在这两类方法中, 不能直接对对象进行 + - , 只能使用对应的方法</p><ol><li>add  加</li><li>subtract  减</li><li>multiply  乘</li><li>divide  除</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">BigInteger</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigeInteger</span>(<span class="hljs-string">&quot;545345755643212542365433242256&quot;</span>);<br>b.add(b);<span class="hljs-comment">//add(BigeInteger biginteger)  ;  参数必须为BigInteger类型</span><br>b.divide(b); <span class="hljs-comment">//可在后面指定精度, 防止异常 b.divide(b, BigDecimal.ROUND_CEILING);//保到自己输入时的精度</span><br></code></pre></div></td></tr></table></figure><h1 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h1><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>精确到毫秒, 代表特定的瞬间</p><p>SimpleDateFormat: 格式和解析日期的类SimpleDateFormat 格式化和解析日期的具体类, 它允许进行格式化(日期 -&gt; 文本), </p><p>解析(文本 -&gt; 日期) 和规范化</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">//获取当前系统时间</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">23424</span>);<span class="hljs-comment">// 通过指定毫秒数得到时间 得到对应的年月日时分秒</span><br>System.out.println(d1.getTime());<span class="hljs-comment">//获取某个时间对应的毫秒数</span><br><br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年mm月dd日 hh:mm:ss E&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(d1);<span class="hljs-comment">// 将日期转换为指定格式的字符串</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1996年01月01日 10:20:30 星期一&quot;</span>;<br><span class="hljs-type">Date</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> sdf.parse(s);<span class="hljs-comment">//把格式化的字符串转回Date</span><br></code></pre></div></td></tr></table></figure><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><p>Calendar类是一个抽象类, 它为特定瞬间与一组诸如YEAR, MONTH, DAY_OF_MONTH, HOUR 等日历字段之间的转换提供了一些方法, 并未操作日历字段提供了一些方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Callendar</span>  <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>System.out.println(c.get(Calendar.YEAR));<br>System.out.println(c.get(Calendar.MONTH)+<span class="hljs-number">1</span>);<span class="hljs-comment">//月份默认从 0 开始编号</span><br>System.out.println(c.get(Calendar.DAY));<br></code></pre></div></td></tr></table></figure><h2 id="LocalDate-日期-LocalTime-时间-LocalDateTime-日期时间"><a href="#LocalDate-日期-LocalTime-时间-LocalDateTime-日期时间" class="headerlink" title="LocalDate(日期), LocalTime(时间), LocalDateTime(日期时间)"></a>LocalDate(日期), LocalTime(时间), LocalDateTime(日期时间)</h2><p>JDK 8加入</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">lat</span> <span class="hljs-operator">=</span> LocalDateTime.now(); <span class="hljs-comment">//LocalDate.now();// LocalTime();</span><br>System.out.println(lat);<br>结果:<span class="hljs-number">2022</span>-<span class="hljs-number">02</span>-26T18:<span class="hljs-number">26</span>:<span class="hljs-number">19.986</span><br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>); <br>System.out.println(dateTimeFormatter.format(lat));<span class="hljs-comment">//格式化</span><br></code></pre></div></td></tr></table></figure><h2 id="Instant-时间戳"><a href="#Instant-时间戳" class="headerlink" title="Instant 时间戳"></a>Instant 时间戳</h2><p>类似于Date</p><p>提供了一系列和Date类转换的方式</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Instant</span> <span class="hljs-variable">instan</span> <span class="hljs-operator">=</span> Insrant.now();<br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Date.from(instant);<span class="hljs-comment">//Instant ---&gt; Date</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant1</span> <span class="hljs-operator">=</span> date.toInstant();<span class="hljs-comment">//Date ---&gt; Instant</span><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常</title>
      <link href="/2022/02/23/%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/02/23/%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、异常的概念"><a href="#一、异常的概念" class="headerlink" title="一、异常的概念"></a>一、异常的概念</h1><h2 id="引出"><a href="#引出" class="headerlink" title="引出"></a>引出</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.exception_;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Excepton01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//1. num1 / num2 ==&gt; 10 / 0</span><br>        <span class="hljs-comment">//因为分母为0, 因此执行到 num1 / num2 会抛出异常</span><br>        <span class="hljs-comment">//抛出异常之后, 程序就退出了, 下面的代码就不执行了. </span><br>        <span class="hljs-comment">//如果项目很大, 这样不致命的崩溃说明代码健壮性不够</span><br>        <span class="hljs-comment">//Java设计者提供了异常处理机制来解决该问题</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> num1 / num2;<br>        System.out.println(<span class="hljs-string">&quot;程序继续运行...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><h2 id="解决方案-异常捕获"><a href="#解决方案-异常捕获" class="headerlink" title="解决方案 - 异常捕获"></a>解决方案 - 异常捕获</h2><h3 id="try-catch演示"><a href="#try-catch演示" class="headerlink" title="try-catch演示"></a>try-catch演示</h3><p>如果程序员觉得一段代码可能出现异常, 可以使用try-catch 异常处理机制来解决, 从而保证程序的健壮性</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>操作: 将该代码块选中,输入快捷建CTRL + ALT + T ,选择try-catch<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> num1 / num2;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></div></td></tr></table></figure><p>如果进行异常处理, 那么即使出现了异常, 程序可以继续执行</p><h2 id="异常介绍"><a href="#异常介绍" class="headerlink" title="异常介绍"></a>异常介绍</h2><p>基本概念: Java语言中, 将程序执行中发生的不正常情况称为”异常”. (开发中语法错误和逻辑错误不是异常)</p><h3 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h3><h4 id="Error-错误"><a href="#Error-错误" class="headerlink" title="Error(错误):"></a>Error(错误):</h4><p><strong>Java虚拟机无法解决的严重问题</strong>. 如: JVM系统内部错误, 资源耗尽等严重情况. 比如:StackOverflowError[栈溢出] 和 OOM(out of memory)[内存不足]</p><p>  Error是严重错误, 程序会崩溃</p><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception:"></a>Exception:</h4><p>其它因编程错误或偶然的外在因素导致的<strong>一般性问题</strong>, 可以使用针对性的代码进行处理. 例如空指针访问, 试图读取不存在的文件, 网络连接中断等等, Exception分为两大类: <strong>运行时异常</strong>[程序运行时发生的异常] 和 <strong>编译时异常</strong>[编程时, 编译器检测出的异常]</p><p>上述 num1 &#x2F; num2 是运行时异常</p><h1 id="二、异常体系图"><a href="#二、异常体系图" class="headerlink" title="二、异常体系图"></a>二、异常体系图</h1><p><img src="https://tse1-mm.cn.bing.net/th/id/R-C.f4813cc359baaf19a878a9445a5c4b31?rik=sRk0XqorEjV7oQ&riu=http://upload-images.jianshu.io/upload_images/8669504-7275ff0c002ea218.jpg&ehk=3cYY4C6vMR6/ELG88bag2feFSphW/2G0L3ypWmPcQhY=&risl=&pid=ImgRaw&r=0" alt="R-C.f4813cc359baaf19a878a9445a5c4b31 (1462×826) (bing.net)"></p><p><img src="/2022/02/23/%E5%BC%82%E5%B8%B8/image-20220223144234699.png" alt="虚线是接口实现, 实线是继承"></p><p><img src="/2022/02/23/%E5%BC%82%E5%B8%B8/0CE13A8C38BC9F3027B8B69C3164C085.png" alt="img"></p><p>运行时异常, 编译器见检查不出来. 一般是指编程时的逻辑错误, 是程序员应该避免出现的异常. </p><p>对于运行时异常, 可以不做处理, 应为这类异常很普遍, 若全处理可能会对程序的可读性和运行效率产生影响</p><p>编译时异常, 是编译器要求必需处理的异常</p><h1 id="三、常见运行时异常-🔑🪓🔨🧡💛💚💙💜🤎"><a href="#三、常见运行时异常-🔑🪓🔨🧡💛💚💙💜🤎" class="headerlink" title="三、常见运行时异常  🔑🪓🔨🧡💛💚💙💜🤎"></a>三、常见运行时异常  🔑🪓🔨🧡💛💚💙💜🤎</h1><h2 id="NullPointException-空指针异常"><a href="#NullPointException-空指针异常" class="headerlink" title="NullPointException 空指针异常"></a>NullPointException 空指针异常</h2><p>当应用程序试图在需要对象的地方使用 null 时(即对象还没创建就使用) , 抛出该异常</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String name;<br>System.out.print(name); <span class="hljs-comment">//空指针异常</span><br></code></pre></div></td></tr></table></figure><h2 id="ArithmeticException-数学运算异常"><a href="#ArithmeticException-数学运算异常" class="headerlink" title="ArithmeticException 数学运算异常"></a>ArithmeticException 数学运算异常</h2><p>出现异常运算条件时, 抛出此异常. 如整数除以零</p><h2 id="ArrayIndexOutOfBoundsException-数组下标越界异常"><a href="#ArrayIndexOutOfBoundsException-数组下标越界异常" class="headerlink" title="ArrayIndexOutOfBoundsException 数组下标越界异常"></a>ArrayIndexOutOfBoundsException 数组下标越界异常</h2><p>用非法索引访问数组时抛出异常. 索引为负或者索引等于或大于数组大小, 则该索引为非法索引</p><h2 id="ClassCastException-类型转换异常"><a href="#ClassCastException-类型转换异常" class="headerlink" title="ClassCastException 类型转换异常"></a>ClassCastException 类型转换异常</h2><p>将对象强制转换为不是实例的子类时, 抛出该异常.</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;&#125;<br><span class="hljs-comment">//main方法</span><br><span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (A)b; <span class="hljs-comment">// 抛出异常</span><br></code></pre></div></td></tr></table></figure><h2 id="NumberFormatException-数字格式不正确异常"><a href="#NumberFormatException-数字格式不正确异常" class="headerlink" title="NumberFormatException 数字格式不正确异常"></a>NumberFormatException 数字格式不正确异常</h2><p>当应用程序试图将字符串转换成一种数值类型, 但该字符串不能转换为适当格式时, 抛出该异常  &#x3D;&#x3D;&gt; 使用异常我们可以确保输入是满足条件的数字.</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;韩顺平教育&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(name);<span class="hljs-comment">//抛出异常</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;13245&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> Integer.parseInt(n);<span class="hljs-comment">// 正常运行</span><br></code></pre></div></td></tr></table></figure><h1 id="四、常见编译时异常"><a href="#四、常见编译时异常" class="headerlink" title="四、常见编译时异常"></a>四、常见编译时异常</h1><p>编译异常是指在编译期间, 就必须处理的异常, 否则代码不能通过编译</p><ol><li><p>OException：输入输出流异常</p></li><li><p>FileNotFoundException：文件找不到的异常</p></li><li><p>ClassNotFoundException：类找不到的异常</p></li><li><p>DataFormatException：数据格式化异常</p></li><li><p>NoSuchFieldException：没有匹配的属性异常</p></li><li><p>NoSuchMethodException：没有匹配的方法异常</p></li><li><p>SQLException：数据库操作异常</p></li><li><p>TimeoutException：执行超时异常</p></li></ol><h1 id="五、异常处理方式"><a href="#五、异常处理方式" class="headerlink" title="五、异常处理方式"></a>五、异常处理方式</h1><h2 id="1-try-catch-finally"><a href="#1-try-catch-finally" class="headerlink" title="1. try-catch-finally"></a>1. try-catch-finally</h2><p>程序员在代码中捕获发生的异常, 自行处理</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    代码可能有异常<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<span class="hljs-comment">//没有异常则 catch 代码块不执行</span><br>    <span class="hljs-comment">//  1. 捕获到异常</span><br>    <span class="hljs-comment">//  2. 当异常发生时, 系统将异常封装成 Exception 对象 e, 传递给catch</span><br>    <span class="hljs-comment">//  3. 得到异常对象后, 程序员自己处理</span><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <span class="hljs-comment">//不管try代码块是否有异常发生, 始终要执行finally</span><br>    <span class="hljs-comment">//通常将释放资源的代码放在finally, 保证资源最终一定会释放</span><br>    <span class="hljs-comment">//如果没有finally, 语法也是可以通过的</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="细节"><a href="#细节" class="headerlink" title="细节:"></a>细节:</h4><ol><li>如果异常发生了, 则异常发生后面的代码不会执行(try中代码只执行到该异常, 然后直接进入catch块), 直接进入到catch块</li><li>如果异常没有发生, 则顺序执行try的代码块, 不会进入到catch</li><li>如果希望不管是否发生异常, 都执行某段代码(比如关闭连接, 释放资源等), 则使用finally{}</li><li>可以有<strong>多个catch语句</strong>, 捕获不同的异常(进行不同的业务处理), 要求父类异常在后, 子类异常在前, 比如(Exception 在后, NullPointerException在前), 如果发生异常, 只会匹配一个catch</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//main函数</span><br><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    p.getName();<span class="hljs-comment">// 这里是 NullPointerException, 是 Exception 的子类        第一个异常</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> n1 / n2; <span class="hljs-comment">// 这里是 ArithmeticException , 是 Exception 的子类        第二个异常</span><br>    <br>&#125; <span class="hljs-keyword">catch</span> (NullPointerException e)&#123;<br>    <span class="hljs-comment">//捕获第一个异常  Exception的子类异常放在前面</span><br>    <br>&#125; <span class="hljs-keyword">catch</span>(ArithmeticException e)&#123;<br>    <span class="hljs-comment">//捕获第二个异常    Exception的子类异常放在前面</span><br>&#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    <span class="hljs-comment">//Exception作为前两者的父类异常放在后面</span><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack&quot;</span>;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li>可以进行 <code>try-finally</code> 配合使用, 这种用法相当于没有捕获异常, 因此程序会直接崩溃. 目的是<strong>无论如何都要做善后处理(finally)</strong>.</li></ol><p><strong>当catch和finally中都有return语句时, 不会return 但会执行 return中的语句, 然后再执行finally中的return</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>    i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>        i++; <span class="hljs-comment">//i = 2</span><br>        异常;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        <span class="hljs-keyword">return</span> ++i; <span class="hljs-comment">// i = 3; temp = 3;</span><br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br>        <span class="hljs-keyword">return</span> ++i; <span class="hljs-comment">// i = 4; return 4</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//调用函数后返回 4</span><br></code></pre></div></td></tr></table></figure><p><strong>当catch中有return语句, 而finally中没有return 语句时, 返回temp</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>    i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>        i++; <span class="hljs-comment">//i = 2</span><br>        异常;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        <span class="hljs-keyword">return</span> ++i; <span class="hljs-comment">// i = 3; temp = 3; 返回时return temp</span><br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br>        没有<span class="hljs-keyword">return</span>语句; <span class="hljs-comment">// 执行finally中的语句, 再回到catch中的return</span><br>    &#125;<br>&#125;<br><br>这事调用函数后返回 <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="try-catch-finally执行顺序小结"><a href="#try-catch-finally执行顺序小结" class="headerlink" title="try-catch-finally执行顺序小结"></a>try-catch-finally执行顺序小结</h4><ol><li>如果没有出现异常, 则执行try块中的所有语句, 不执行catch块中的语句, 如果有finally, 最后还需要执行finally里面的语句</li><li>如果出现异常, 则try块中异常发生后, 剩下的语句不再执行, 将执行catch中的语句, 如果有finally, 最后还需要执行finally里面的语句!</li></ol><h2 id="2-throws"><a href="#2-throws" class="headerlink" title="2. throws"></a>2. throws</h2><p>将发生的异常抛出, 交给调用者(方法)来处理, 最顶级的处理者就是JVM</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//JVM 调用主方法 main() </span><br><span class="hljs-comment">//主方法 main() 调用 f1() 方法</span><br><span class="hljs-comment">//f1() 调用 f2()</span><br><br><span class="hljs-comment">//假如 f2() 发生了异常, 则f2() 可通过 throws 将异常抛给 f1(), 同样f1() 可以将异常抛给 main(), 同样main() ...</span><br><span class="hljs-comment">//不想抛就用 try-catch-finally 机制处理异常</span><br><br><span class="hljs-comment">//JVM处理异常时: 直接输出异常信息, 然后直接中断(退出)程序</span><br></code></pre></div></td></tr></table></figure><p>try-catch-finally 和 throws 二选一即可. </p><p><strong>如果抛出了异常, 但是没有try-catch-finally, 也没有throws, 默认使用throws</strong></p><h3 id="throws异常处理"><a href="#throws异常处理" class="headerlink" title="throws异常处理"></a>throws异常处理</h3><ul><li><p>如果一个方法（中的语句执行时). 可能生成某种异常, 但是并不能确定如何处理这种异常. 则此方法应该显示地声明抛出异常, 表明该方法将不对这些异常进行处理, 而由该<strong>方法的调用者负责处理</strong>.</p></li><li><p>在方法声明中用throws语句可以声明抛出异常的列表, throws后面的异常类型可以是方法中产生的异常类型, 也可以是它的父类.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.throws_;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Throws</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            f1();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException, NullPointerException &#123; <span class="hljs-comment">//2. 这里也可以是FileNotFoundException的父类:Exception</span><br>        <span class="hljs-comment">//创建了一个文件流对象</span><br>        <span class="hljs-comment">//异常处理</span><br>        <span class="hljs-comment">//FileNotFoundException  编译异常</span><br>        <span class="hljs-comment">//可以try-catch处理, 也可以throws</span><br>        <span class="hljs-comment">//使用throws时, 抛出异常, 让调用f1()方法的调用者(方法)处理</span><br>        <span class="hljs-comment">//throws 关键字之后也可以是异常列表, 即可以抛出多个异常</span><br>        <span class="hljs-comment">//用Exception代替多种异常</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;d://a.txt&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="注意事项和使用细节"><a href="#注意事项和使用细节" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h3><ul><li><strong>对于编译异常, 程序中必须处理</strong>, 比如try-catch 或者 throws    🧡💛💚💙         <strong>编译异常必须处理</strong></li><li>对于运行时异常, 程序中如果没有处理, <strong>默认就是throws方式处理</strong></li><li>子类重写父类方法时, 对抛出异常的规定: 子类重写的方法, <strong>所抛出的异常类型要么和父类抛出的异常一致, 要么为父类抛出的异常的类型的子类型</strong></li><li>在throws过程中, 如果有方法try-catch , 就相当于处理异常, 就可以不必throws</li></ul><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>当程序中出现了某些”错误”, 但是该错误信息并没有在Throwable子类中描述处理, 这个时候可以自己设计异常类, 用于描述该错误信息</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.customexception_;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 谢飞</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<span class="hljs-comment">// throws RuntimeException ==&gt;这里throws后面是一个异常类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">180</span>;<br>        <span class="hljs-comment">//要求范围在 18 ~ 120 之间, 否则就抛出一个自定义异常</span><br>        <span class="hljs-keyword">if</span>(!(age &gt;= <span class="hljs-number">18</span> &amp;&amp; age &lt;=<span class="hljs-number">120</span>))&#123;<br>            <span class="hljs-comment">//可以通过构造器,设置信息</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeException</span>(<span class="hljs-string">&quot;年龄需要在18 ~ 120之间&quot;</span>);  <span class="hljs-comment">//throw 后面是对象</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;你的年龄范围正确&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//自定义的一个异常</span><br><span class="hljs-comment">//1. 一般情况,自定义异常继承的时RuntimeException</span><br><span class="hljs-comment">//2. 即把自定义异常做成 运行时异常, 好处是, 我们可以使用默认的处理机制, 比较方便</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">(String message)</span> &#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="throws-和-throw-的区别"><a href="#throws-和-throw-的区别" class="headerlink" title="throws 和 throw 的区别"></a>throws 和 throw 的区别</h1><table><thead><tr><th align="center"></th><th align="center">意义</th><th align="center">位置</th><th align="center">后面跟的东西</th></tr></thead><tbody><tr><td align="center">throws</td><td align="center">异常处理的一种方式</td><td align="center">方法声明处</td><td align="center">异常类型</td></tr><tr><td align="center">throw</td><td align="center">手动生成异常对象的关键字</td><td align="center">方法体内</td><td align="center">异常对象</td></tr></tbody></table><blockquote><p>先finally再throw</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类</title>
      <link href="/2022/02/20/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2022/02/20/%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>一个类的内部又完整嵌套了另一个类结构. 被嵌套的类称为<strong>内部类</strong>(inner class). 嵌套其他类的类又称为外部类(outer class). 是我们类的<strong>五大成员(属性, 方法, 构造器, 代码块, 内部类)</strong>. 内部类的最大特点就是可以直接访问私有属性, 并且可以体现类与类之间的包含关系.</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<span class="hljs-comment">//内部类</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Other</span>&#123;<span class="hljs-comment">//其他类</span><br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="内部类的分类-4种"><a href="#内部类的分类-4种" class="headerlink" title="内部类的分类( 4种 )"></a>内部类的分类( 4种 )</h1><h3 id="定义在外部类局部位置上-比如方法内"><a href="#定义在外部类局部位置上-比如方法内" class="headerlink" title="定义在外部类局部位置上(比如方法内):"></a>定义在外部类<strong>局部</strong>位置上(比如方法内):</h3><ol><li>局部内部类(有类名)</li><li><strong>匿名内部类</strong>(没有类名, <strong>重点</strong>)  ( •̀ ω •́ )✧</li></ol><h3 id="定义在外部类的成员位置上"><a href="#定义在外部类的成员位置上" class="headerlink" title="定义在外部类的成员位置上:"></a>定义在外部类的成员位置上:</h3><ol><li>成员内部类(没有static修饰)</li><li>静态内部类(使用static修饰)</li></ol><h1 id="1-局部内部类"><a href="#1-局部内部类" class="headerlink" title="1. 局部内部类"></a>1. 局部内部类</h1><h3 id="局部内部类的使用"><a href="#局部内部类的使用" class="headerlink" title="局部内部类的使用"></a>局部内部类的使用</h3><blockquote><p>说明: <strong>局部内部类</strong>是定义在<strong>外部类的局部位置</strong>, 比如<strong>方法中,或者代码块中</strong>, 并且有类名</p></blockquote><ol><li>可以直接访问外部类的所有成员, 包含私有的<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n1  <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//方法</span><br>        <span class="hljs-comment">//1.局部内部类是定义在外部类的局部位置, 通常都是方法中</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<span class="hljs-comment">//局部内部类</span><br>            <span class="hljs-comment">//可以直接访问外部内的所有成员,包含私有的</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//内部类方法</span><br>                System.out.println(n1);<span class="hljs-comment">//这里不会报错</span><br>                m2();<span class="hljs-comment">//也不会报错</span><br>            &#125;<br>        &#125;<br>     <br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>不能添加访问修饰符, 因为它的地位就是一个局部变量. 局部变量是不能使用修饰符的. 但是可以用final修饰, 因为局部变量也可以使用final</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>;<span class="hljs-comment">//这里会报错,因为使用了public修饰局部内部类</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>;<span class="hljs-comment">//这里语法正确</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner_001</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Inner</span>&#123;<br><span class="hljs-comment">//这一句语法是正确的, 只要Inner没有被final修饰</span><br>&#125;<br><br><span class="hljs-comment">//局部内部类就相当于一个局部变量, 作用域只在被定义的方法体内</span><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li><p>作用域: 仅仅在定义它的<strong>方法或者代码块中</strong></p><p>局部内部类就相当于一个局部变量, 作用域只在被定义的方法体内</p></li><li><p>局部内部类访问外部类成员[访问方式: 直接访问]</p></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span><span class="hljs-number">12</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> n1;<span class="hljs-comment">//直接访问外部类的成员</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li>外部类访问局部类成员[访问方式:<strong>创建对象, 再访问</strong>, <strong>必须在作用域内</strong>]</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br><span class="hljs-type">int</span> n1;<br>&#125;<br><br>    <span class="hljs-type">Inner</span> <span class="hljs-variable">inner001</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>    inner001.n1;<span class="hljs-comment">//外部类访问内部类成员, 需要创建对象</span><br>    <span class="hljs-comment">//而且必须在内部类的作用域内, 比如这里必须在m()方法内才能创建内部类对象</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>记住<strong>三点</strong></p><ol><li><strong>局部内部类定义</strong>在<strong>方法或者代码块</strong>中</li><li><strong>作用域</strong>在方法体或者代码块中</li><li><strong>本质</strong>仍然是一个类</li></ol><h3 id="局部内部类的其他细节"><a href="#局部内部类的其他细节" class="headerlink" title="局部内部类的其他细节"></a>局部内部类的其他细节</h3><ol><li><strong>外部其他类不能访问局部内部类</strong>(因为局部内部类是一个局部变量)</li><li>如果外部类和局部内部类的成员<strong>重名时</strong>,遵循<strong>就近原则</strong>, 如果想访问外部类的成员, 则可以使用(<strong>外部类名.this.成员名</strong>)去访问</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;外部类的 n = &quot;</span> + Outer.<span class="hljs-built_in">this</span>.n);<br></code></pre></div></td></tr></table></figure><blockquote><p>原因: 这里的<code>Outer.this</code> 本质是外部类Outer的一个对象, 哪个对象调用的这个使用了<code>Outer.this</code>的内部类所在的方法, 那么这个<code>Outer.this</code>就指向这个调用该方法的对象.</p><p>比如建立了一个<code>Outer</code>对象<code>outer001</code>, 这个<code>outer001</code>调用了<code>m()</code>方法, <code>m()</code>方法中有内部类<code>Inner</code> ,<code>Inner</code>内部又有<code>Outer.this</code>, 那么这个<code>Outer.this</code>则指向<code>outer001</code></p></blockquote><h1 id="2-匿名内部类"><a href="#2-匿名内部类" class="headerlink" title="2. 匿名内部类"></a>2. 匿名内部类</h1><blockquote><p>说明:匿名内部类是定义在外部类的<strong>局部位置</strong>, 比如方法中, 并且<strong>没有类名</strong></p></blockquote><h3 id="匿名内部类的使用-基于接口-—-实现接口"><a href="#匿名内部类的使用-基于接口-—-实现接口" class="headerlink" title="匿名内部类的使用(基于接口)    —-  实现接口"></a>匿名内部类的使用(基于接口)    —-  实现接口</h3><blockquote><ol><li>本质是类</li><li>内部类</li><li>该类没有名字(系统取名, 用户不定义其名字)</li><li>同时还是一个对象</li></ol></blockquote><ol><li>匿名内部类的基本语法</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 类或接口(参数列表)&#123;<br>    类体<br>&#125;;<span class="hljs-comment">//分号不能少, 这里整体相当于一个语句</span><br></code></pre></div></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//方法</span><br>        <span class="hljs-comment">//基于接口的匿名内部类</span><br>        <span class="hljs-comment">//1. 需求: 想使用IA接口, 并创建对象</span><br>        <span class="hljs-comment">//2. 传统方式: 写一个类, 实现该接口, 并创建对象</span><br>        <span class="hljs-type">IA</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tiger</span>();<br>        tiger.cry();<br>        <br>        <span class="hljs-comment">//3. tiger只想使用一次呢? 上述方式有点啰嗦,假如又狗猫什么很多动物, 这样定义是很烦的</span><br>        <span class="hljs-comment">//4. 因此可以使用匿名内部类来简化开发</span><br>        <br>       <span class="hljs-type">IA</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">IA</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;老虎叫&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//这里就不用再单独创建一个Tiger类了, 直接使用的匿名内部类</span><br>        <br>        <br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><span class="hljs-comment">//实现接口,创建对象, 不使用匿名内部类的时候, 就需要创建一个类并实现IA接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;嗷呜~~~~~~~&quot;</span>)<br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>看底层, 匿名内部类的实质</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">XXXX</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>&#123;<br>    ...<br>&#125;<br>XXXX是系统分配的, 外部类+$分配数字,  如上述代码的名字为Outer$<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p><strong>匿名内部类虽然只使用一次, 但是创建的对象可以多次使用</strong></p><p>如上述的Outer$1不能再使用了, 但是tiger可以再次使用</p><h3 id="匿名内部类的使用-基于类-——-实现继承"><a href="#匿名内部类的使用-基于类-——-实现继承" class="headerlink" title="匿名内部类的使用(基于类)    ——-  实现继承"></a>匿名内部类的使用(基于类)    ——-  实现继承</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//基于类的匿名内部类</span><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">father</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>(<span class="hljs-string">&quot;jack&quot;</span>)&#123;<br>            <span class="hljs-comment">//参数列表 传送给Father的构造器, 匿名内部类一般不建立自己的构造器</span><br>            <span class="hljs-comment">//这里的运行类型是匿名内部类Test$1, 不是Father</span><br>            <br>        &#125;;<span class="hljs-comment">//分号不能少, 这是一个语句</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这里的匿名内部类本质是:</span><br><span class="hljs-comment">class Test$1 extends Father&#123;// 继承Father类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;Test$1 是在类Test内的内部类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">(String name)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>匿名内部类的语法比较奇特, 因为匿名内部类<strong>既是一个类的定义</strong>, <strong>同时它本身也是一个对象</strong>, 因此从语法上来看, 它既有定义类的特征, 也有创建对象的特征</p><p>因此可以直接调用, 匿名内部类本身也是返回对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br>        ...<br>    &#125;<br>&#125;.hi();<br></code></pre></div></td></tr></table></figure><ul><li>可以直接访问外部类的所有成员, 包含私有的</li><li>不能添加访问修饰符, 因为它的地位就是一个局部变量</li><li><strong>作用域: 仅仅在它的方法或代码块中</strong></li><li>匿名内部类访问外部成员是直接访问的</li><li>外部其他类不能访问匿名内部类(因为匿名内部类是一个局部变量)</li><li>如果外部类和内部类的成员重名时, 内部类访问时遵循就近原则, 若要访问外部类, 则使用( 外部类名.this.成员) 访问, 方法同局部内部类</li></ul><h3 id="匿名内部类的最佳实践"><a href="#匿名内部类的最佳实践" class="headerlink" title="匿名内部类的最佳实践"></a>匿名内部类的最佳实践</h3><ul><li>当做实参直接传递, 简洁高效</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//当作实参直接传递, 简洁高效</span><br>        <span class="hljs-comment">//本质传递了一个对象, 而且这个对象实现了IL接口</span><br>        f1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IL</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;直接在方法的参数列表&quot;</span>);<br>            &#125;<br>        &#125;);<span class="hljs-comment">//分号不可少,因为这是一个语句</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(IL il)</span>&#123;<br>        il.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IL</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>课堂练习</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.InnerClass;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 蓝鸟x</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Anonymous</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellPhone</span>().alarmClock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;懒狗起床了&quot;</span>);<br>            &#125;<br><br>        &#125;);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellPhone</span>().alarmClock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;上课了&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bell</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CellPhone</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">alarmClock</span><span class="hljs-params">(Bell bell)</span>&#123;<br>        bell.ring();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>包含的知识点: </p><ol><li>继承</li><li>多态</li><li>动态绑定</li><li>内部类</li></ol></blockquote><h1 id="3-成员内部类"><a href="#3-成员内部类" class="headerlink" title="3. 成员内部类"></a>3. 成员内部类</h1><blockquote><p>说明:成员内部类是<strong>定义在外部类的成员位置</strong>, 并且<strong>没有static修饰</strong></p></blockquote><ul><li>可以直接访问外部类的所有成员, 包含私有的</li><li>可以添加任意访问修饰符(public, protected, 默认, private), 因为<strong>它的地位就是一个成员</strong></li><li>作用域和其他外部类的其他成员一样, 为整个类体. </li><li>成员内部类访问外部类成员时, 直接访问</li><li>外部类访问内部类成员, 先创建内部类对象, 再访问</li><li>外部其他类访问成员内部类(三种方式):</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1.</span> Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner001</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<span class="hljs-comment">//new Inner()当作new Outer()的成员</span><br><span class="hljs-number">2.</span> 在外部内定义一个getInner()方法, 可以返回内部类对象<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> Inner <span class="hljs-title function_">getInner</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//需要参数加参数即可</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>    &#125;<br>&#125;<br><span class="hljs-number">3.</span> 本质同方式<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><ul><li>如果外部类和内部类成员重名的时候, 内部类访问的话, 默认遵循就近原则, 如果想访问外部类的成员, 可以使用(外部类名.this.成员)去访问</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>            n2 = Outer.<span class="hljs-built_in">this</span>.n2;<span class="hljs-comment">//部类名.this.成员</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h1><blockquote><p>说明: 静态内部类是定义在外部类的成员位置, 并且有static修饰</p></blockquote><ul><li>可以直接访问外部类的所有静态成员, 包含私有的, 但<strong>不能直接访问非静态成员</strong> → 可以通过创建外部类对象去访问</li><li>可以添加任意访问修饰符(public private 默认 protected). 因为<strong>它的位置就是一个成员</strong></li><li>作用域: 和其他成员一样, 为整个类体</li><li>静态内部类<strong>直接访问外部类静态成员</strong></li><li>访问非静态类时, 先创建外部类对象, 再访问</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> outer.n;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>外部其他类访问静态内部类, 只要静态内部类不被private修饰就能直接访问</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1.</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.Inner();<br><span class="hljs-number">2.</span> 外部类设置一个get方法返回Inner对象<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br></code></pre></div></td></tr></table></figure><ul><li>如果外部类和静态内部类的成员变量重名时, 静态内部类访问时, 默认遵循就近原则, 如果想访问外部类成员, 则可以使用(外部类名.成员) 去访问</li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol><li><p>内部类有四种: <strong>局部内部类  匿名内部类  成员内部类  静态内部类</strong></p></li><li><p>重点掌握<strong>匿名内部类</strong></p><p>new 类&#x2F;接口(参数列表){};  &#x2F;&#x2F;分号不能少</p></li><li><p>成员内部类, 静态内部类 是放在外部类的成员位置, 本质是一个成员</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 面向对象部分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举类</title>
      <link href="/2022/02/20/%E6%9E%9A%E4%B8%BE%E7%B1%BB%20enum/"/>
      <url>/2022/02/20/%E6%9E%9A%E4%B8%BE%E7%B1%BB%20enum/</url>
      
        <content type="html"><![CDATA[<h1 id="枚举类-enum"><a href="#枚举类-enum" class="headerlink" title="枚举类 enum"></a>枚举类 enum</h1><blockquote><p>本文章是通过学习B站视频<a href="https://www.bilibili.com/video/BV1fh411y7R8?p=425">【零基础 快速学Java】韩顺平 零基础30天学会Java_哔哩哔哩_bilibili</a>写的笔记</p><p align="right">2022/2/20</p></blockquote><p>😃给自己的代码加头</p><p><img src="https://img-blog.csdnimg.cn/80e0adcdf52d423b923941f476de04c8.png" alt="操作流程"></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>当有多个固定的对象需要定义时, 如果每一个对象都要新建, 例如对于季节类, 需要春夏秋冬四个对象, 而按照之前所学内容, 要用户来创建对象, 那么四个季节就不固定. 季节只有四个, 用户定义没限制. 枚举类型是把具体的对象一个一个列举出来的类,因此季节可用枚举类来设计季节类</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>枚举是一组常量的集合. 可以理解为: 枚举属于<strong>一种特殊的类</strong>, 里面只包含一组有限的特定的对象</p><h2 id="自定义枚举流程"><a href="#自定义枚举流程" class="headerlink" title="自定义枚举流程"></a>自定义枚举流程</h2><ol><li>使用关键字<code>enum</code> 替代 <code>class</code></li><li>定义常量, 例如: <strong>本质</strong>是<code>public static final Season SPRING = new Season(&quot;Spring&quot;, &quot;warm&quot;); </code>可以直接用<code>SPRING(&quot;Spring&quot;, &quot;warm&quot;)</code> 替代. 解读: <code>常量名( 实参列表...)</code></li><li>如果有<strong>多个常量, 使用 <code>,</code> 间隔</strong>即可. 例如<code>SPRING(&quot;Spring&quot;, &quot;warm&quot;), SUMMER(&quot;Summer&quot;, &quot;hot&quot;);</code> </li><li>🐳🐳🐳使用enum来实现枚举, 要求将定义的常量<strong>写在最前面</strong></li></ol><h2 id="enum关键字实现枚举注意事项"><a href="#enum关键字实现枚举注意事项" class="headerlink" title="enum关键字实现枚举注意事项"></a><code>enum</code>关键字实现枚举注意事项</h2><ol><li>当我们使用enum关键字来开发一个枚举类时, 默认会继承Enum类, 这里使用javap工具来进行反编译验证<br><img src="https://img-blog.csdnimg.cn/e3ee96f82e8a4053ae0b0a10c6e02951.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JOd6bifeA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Compiled from <span class="hljs-string">&quot;Enumeration01.java&quot;</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.hspedu.enum_.Season2 <span class="hljs-keyword">extends</span> <span class="hljs-title class_">java</span>.lang.Enum&lt;com.hspedu.enum_.Season2&gt; &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 SPRING;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 SUMMER; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 AUTUMN; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 WINTER; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> com.hspedu.enum_.Season2[] values(); <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> com.hspedu.enum_.Season2valueOf(java.lang.String); <br><span class="hljs-keyword">public</span> java.lang.String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>; <br><span class="hljs-keyword">public</span> java.lang.String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span>; <br><span class="hljs-keyword">public</span> java.lang.String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>; <br><span class="hljs-keyword">static</span> &#123;&#125;; <br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>传统的 public static final Season2 SPRING &#x3D; new Season2(“春天”, “温暖”); 简化成SPRING(“春天”, “温暖”); 这里要明白它调用的哪个构造器.  格式: <strong>对象名(实参列表)</strong>, 这里实参列表是<strong>传给构造器的</strong> </li><li>如果使用无参构造器, 创建枚举对象, 则<strong>实参列表和小括号都可以省略(省不省略都可以)</strong> </li><li>当<strong>有多个枚举对象的时候,使用’ , ‘ 间隔,</strong> 最后一个用分号结尾 枚举对象必须放在枚举类的行首</li></ol><h2 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span>&#123;<br>BOY, GIRL;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>正确的写法, 调用无参构造器, 对象名是BOY, 和GIRL. 这里对象名就是常量名, 一般枚举类内部定义的变量后续操作不可更改, 视为常量.</p><h2 id="enum常用方法说明"><a href="#enum常用方法说明" class="headerlink" title="enum常用方法说明"></a>enum常用方法说明</h2><blockquote><p>原理: 使用enum时, 会所建类会隐式继承Enum类, 这样我们就可以使用Enum类相关的方法<br>**对象名.name(); **输出对象的名字<br>**对象名.ordinal();**输出对象的编号,从0开始<br><strong>类名.values();</strong> 返回枚举类定义的所有对象, 返回的是一个数组<br>新知识点: 增强for循环, <code>for(Season2 season : values)&#123;&#125;</code>&#x2F;每次循环将数组的一个元素传入到season, 没有了就退出<br>**类名.valueOf()**将字符串转化为枚举对象, 要求字符串必须为已有的常量名, 否则报错</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.根据输入的名称&quot;SPRING&quot;到Season2的枚举类对象去查找,找到了就返回给spring1对象,否则报错</span><br>Season2  spring1=Season2.valueOf(<span class="hljs-string">&quot;SPRING&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>且返回类型的对象引用类型, 即运行类型的地址</p><p><strong>compareTo</strong> 比较两个枚举常量(对象), 比较的是编号对应values</p><h2 id="enum实现接口"><a href="#enum实现接口" class="headerlink" title="enum实现接口"></a>enum实现接口</h2><p>使用enum关键字后, 所创建的类不能再继承其他类了, 因为enum会隐式继承Enum, 而java是单继承机制<br>枚举类和普通类一样, 可以实现接口, 如下格式</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> 类名 implements 接口<span class="hljs-number">1</span>, 接口<span class="hljs-number">2</span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><table><tr><td bgcolor="#bfe1f1">以上就是enum类的全部内容了, 有不正确的地方欢迎大佬指正, 在下是编程小白蓝鸟x</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用两个栈实现队列</title>
      <link href="/2022/02/20/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2022/02/20/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h2><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回 -1 </p><p>示例1:</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">输入：<br>[<span class="hljs-string">&quot;CQueue&quot;</span>,<span class="hljs-string">&quot;appendTail&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>]<br>[[],[<span class="hljs-number">3</span>],[],[]]<br>输出：[null,null,<span class="hljs-number">3</span>,<span class="hljs-number">-1</span>]<br></code></pre></div></td></tr></table></figure><p>示例2:</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">输入：<br>[<span class="hljs-string">&quot;CQueue&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>,<span class="hljs-string">&quot;appendTail&quot;</span>,<span class="hljs-string">&quot;appendTail&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>,<span class="hljs-string">&quot;deleteHead&quot;</span>]<br>[[],[],[<span class="hljs-number">5</span>],[<span class="hljs-number">2</span>],[],[]]<br>输出：[null,<span class="hljs-number">-1</span>,null,null,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>]<br></code></pre></div></td></tr></table></figure><p>思路:</p><blockquote><p>维护两个栈，第一个栈支持插入操作，第二个栈支持删除操做. 插入操作时, 数据元素先被顺序插入第一个栈, 随后再从第一个栈取出插入到第二个栈, 最后从第二个栈一一删除</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f1ebe6b526934309b05440a03f979dde.gif" alt="在这里插入图片描述"></p><p>代码: </p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">CQueue</span> &#123;<br>    Deque&lt;Integer&gt; stack1;<br>    Deque&lt;Integer&gt; stack2;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CQueue</span>()</span> &#123;<br>        stack1 = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        stack2 = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">appendTail</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span></span>)</span> &#123;<br>        stack1.push(<span class="hljs-keyword">value</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">deleteHead</span>()</span> &#123;<br>        <span class="hljs-comment">// 第二个栈为空时, 执行数据元素从栈1向栈2转移</span><br>        <span class="hljs-keyword">if</span> (stack2.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (!stack1.isEmpty()) &#123;<br>                stack2.push(stack1.pop());<br>            &#125;<br>        &#125; <br>        <span class="hljs-comment">//转移完毕后, 栈2仍然为空返回-1, 否则将栈2元素一一删除</span><br>        <span class="hljs-keyword">if</span> (stack2.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">int</span> deleteItem = stack2.pop();<br>            <span class="hljs-keyword">return</span> deleteItem;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>复杂度分析时间复杂度为O(1), 空间复杂度为O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>房屋出租系统(初级)</title>
      <link href="/2022/02/17/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E7%B3%BB%E7%BB%9F(%E5%88%9D%E7%BA%A7)/"/>
      <url>/2022/02/17/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E7%B3%BB%E7%BB%9F(%E5%88%9D%E7%BA%A7)/</url>
      
        <content type="html"><![CDATA[<p>本项目是根据<a href="https://www.bilibili.com/video/BV1fh411y7R8?p=362">【零基础 快速学Java】韩顺平 零基础30天学会Java_哔哩哔哩_bilibili</a> 课程进行的。项目的主要目的是巩固一下以前学习的 Java基础 知识。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>​    实现基于文本界面的房屋出租系统，能够实现对房屋信息的添加，修改和删除（用数组实现），并且能够打印房屋明细表。</p><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><ul><li>主菜单<ol><li>新 增 房 源</li><li>查 找 房 屋</li><li>删 除 房 屋</li><li>修 改 房 屋 信 息</li><li>房 屋 列 表</li><li>退           出</li></ol></li><li>新增房源<ul><li>姓名：</li><li>电话：</li><li>地址：</li><li>月租：</li><li>状态（未出租&#x2F;已出租）:</li></ul></li><li>查找房源<ul><li>请输入查找的id：</li><li>有id    姓名   电话   地址   租金   状态</li></ul></li><li>删除房源<ul><li>选择要删除的房屋编号</li><li>再次确认</li></ul></li><li>修改房源<ul><li>选择房屋编号</li><li>列出修改的信息（不修改的地方直接回车）</li></ul></li><li>退出系统<ul><li>再次确认</li><li>输出：你退出了程序~~~</li></ul></li></ul><h2 id="项目设计-程序框架"><a href="#项目设计-程序框架" class="headerlink" title="项目设计-程序框架"></a>项目设计-程序框架</h2><p><img src="https://img-blog.csdnimg.cn/1c3e603acc7443fcb8fb49cd5cac7c34.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JOd6bifeA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="房屋出租系统框架图"></p><p>上图每一个类对应一个包，便于管理。虽然最初设计时只有一个类或者一个文件，但是随着项目后续的完善，所对应的相关类有很多，因此这里的每个类对应一个包。上述图片用<a href="https://www.iodraw.com/diagram/">ioDraw</a>绘制</p><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><p>实际开发中，公司都会提供对应的工具类和开发库，可以提高开发效率。因此在日常学习中要能够看懂别人写的代码，并正确调用</p><p>这里的 <code>utility</code> 类是课程提供的,  可在<a href="https://blog.csdn.net/m0_52228020/article/details/120975203">(16条消息) 韩顺平Utility工具类(java房屋出租项目)_m0_52228020的博客-CSDN博客</a>复制到自己的项目里.</p><h4 id="House类"><a href="#House类" class="headerlink" title="House类"></a>House类</h4><p>House类的属性有 编号, 房主, 电话, 地址, 月租, 状态. House的对象表示一个房屋信息</p><p>将各属性写入House类, 并且设立相应的构造器与 setter 与 getter 方法, 为了方便输出对象信息, 还应该实现toString 方法的重写</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> id +<br>            <span class="hljs-string">&quot;\t&quot;</span> + name + <br>            <span class="hljs-string">&quot;\t&quot;</span> + phone +<br>            <span class="hljs-string">&quot;\t&quot;</span> + address +<br>            <span class="hljs-string">&quot;\t&quot;</span> + rent +<br>            <span class="hljs-string">&quot;\t&quot;</span> + state;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="HouseView类-与-HouseService类"><a href="#HouseView类-与-HouseService类" class="headerlink" title="HouseView类 与 HouseService类"></a>HouseView类 与 HouseService类</h4><p>HouseView类用于显示，HouseService类用于给HouseView类传输相应的数据，如HouseView中有listHouse()方法，而HouseService中的list()方法用于给listHouse()方法传送房屋列表的信息.  个人理解: HouseView相当于前端, HouseService相当于后端.</p><ol><li>实现主菜单和完成退出软件的功能</li></ol><p>说明：实现功能的三步曲[明确功能 –&gt; 思路分析 –&gt; 代码实现]</p><ul><li><p>功能说明:</p><p>用户打开软件, 可以看见主菜单, 可退出软件</p></li><li><p>思路分析:</p><p>在HouseView.java中, 编写一个方法mainMenu, 显示菜单.</p></li><li><p>实现效果</p><blockquote><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;房屋出租系统菜单&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>       1 新 增 房 源<br>       2 查 找 房 源<br>       3 删 除 房 源 信 息<br>       4 修 改 房 源 信 息<br>       5 房 屋 列 表<br>       6 退      出<br>       7 新增房源<br>请输入你的选择(1 ~ 6):<br>1<br>新 增</p></blockquote></li></ul><ol start="2"><li><p>完成显示房屋列表的功能</p><ul><li><p>功能说明: 显示房屋列表的各个信息</p></li><li><p>思路分析: 需要编写HouseView.java 和 HouseService.Java</p><p>在显示房屋列表时, 如果总房源数小于数组容量, 应该设置 break 语句, 防止输出空指针</p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listHouses</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===================房屋列表==================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;编号\t\t房主\t\t电话\t\t地址\t\t月租\t\t状态(未出租/已出租)&quot;</span>);<br>        House[] houses = houseService.list();<span class="hljs-comment">//得到房屋信息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; houses.length; i++) &#123;<span class="hljs-comment">//   1.这里不因该用houses.length, 因为houses是能表示的房屋总数, 实际存在的房屋因该另外设置变量</span><br>            <span class="hljs-comment">//2. 或者加一个判断</span><br>            <span class="hljs-keyword">if</span>(houses[i] == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(houses[i]);  <span class="hljs-comment">//这里输出房屋的基本信息, 默认输出调用的是toString方法</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;===================房屋列表显示完毕==================&quot;</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>实现效果</p><blockquote><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;     房 屋 列 表       &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>编号        房主        电话        地址        月租        状态(未出租&#x2F;已出租)<br>1        jack    113        海定区    2000    未出租<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;房屋列表显示完毕&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p></blockquote></li><li><p>添加房屋信息功能</p><ul><li><p>功能说明与思路分析</p><p>在HouseView设置addHouse()方法, 用于前端显示. 在HouseService中添加 add()方法, 用于添加房屋信息, 并返回boolean值</p><p>在HouseService中设置houseNums的整型变量来记录当前房屋信息, 并通过如下方式将创建的房屋对象加入到数组中.</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">houses[houseNums++] = newHouse;<span class="hljs-comment">// 把newHouse信息加入到数组</span><br></code></pre></div></td></tr></table></figure><p>在HouseService中设置idCounter的整型变量来记录当前房屋id增长到哪一个值了, 并通过如下的方式来更新新加入的房屋id(创建房屋对象时设置的id为0(任意值均可,反正会修改)).</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">newHouse.setId(++idCounter);<span class="hljs-comment">//更新newHouse的id</span><br></code></pre></div></td></tr></table></figure><p>添加房屋信息时实现了对House数组的扩容机制, 方法如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * House数组扩容,每次增加10个</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> houses</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> House[] addLengthArray(House[] houses)&#123;<br>    House[] houses1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">House</span>[houses.length + <span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; houses.length; i++) &#123;<span class="hljs-comment">//一一复制</span><br>        houses1[i] = houses[i];<br>    &#125;<br>    <span class="hljs-comment">//houses = houses1;</span><br>    <span class="hljs-keyword">return</span> houses1;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>addLengArray() 方法位于HouseService类中</p></blockquote><ul><li><p>实现效果</p><blockquote><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  添 加 房 屋  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>姓名: jack<br>電話: 112<br>地址: China<br>月租: 3000<br>状态(已出租&#x2F;未出租): 已出租<br>“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  添加房屋成功  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”</p></blockquote></li><li><p>删除房源</p><ul><li><p>功能说明: </p><p>用户输入待删除的房屋编号, 并二次确认, 然后系统删除该id对应的房屋信息. 当该id不存在时, 系统应该提示删除失败</p></li><li><p>思路分析</p><p>编写HouseView和HouseService方法</p></li><li><p>HouseService中的del方法</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> delId)</span>&#123;<br>       <span class="hljs-comment">//先找出对应的id的房屋信息对应的编号</span><br>       <span class="hljs-comment">//注意编号和id是不一样的</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">//作为哨兵</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; houseNums; i++) &#123;<br>           <span class="hljs-keyword">if</span>(delId == houses[i].getId())&#123;<span class="hljs-comment">//房屋id与i对应的id相同时</span><br>               index = i; <span class="hljs-comment">//用index记录i</span><br>               <br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(index == -<span class="hljs-number">1</span>)&#123;<br>           <span class="hljs-comment">//index没变, 说明数组中不存在此id</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       &#125;<br>       <span class="hljs-comment">//如果找到, 后面对象前移覆盖要删除的房屋对象</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> index; i &lt; houseNums - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-comment">//num从1开始,而下标从0开始</span><br>           houses[i] = houses[i+<span class="hljs-number">1</span>];<br>           <br>       &#125;<br>       houses[--houseNums] = <span class="hljs-literal">null</span>;  <span class="hljs-comment">//--houseNums对应最后一个房屋信息, 正好也把houseNums减1</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br></code></pre></div></td></tr></table></figure><ul><li>HouseView中的delId方法</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//编写delHouse() 接收输入的id, 调用HouseService的del方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delHouse</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===================  删除房屋信息  ==================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;请输入待删除房屋的id(-1)表示退出:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">delId</span> <span class="hljs-operator">=</span> Utility.readInt();<br>        <span class="hljs-keyword">if</span>(delId == -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;=================  放弃删除房屋信息  ==================&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>      <span class="hljs-comment">//  System.out.println(&quot;请确认是否删除(Y/N), 请小心选择:&quot;);</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> Utility.readConfirmSelection();<span class="hljs-comment">//该方法本身就有循环逻辑</span><br>        <span class="hljs-keyword">if</span>(choice == <span class="hljs-string">&#x27;Y&#x27;</span>)&#123;<br>            <span class="hljs-comment">//真的删除</span><br>            <span class="hljs-keyword">if</span>(houseService.del(delId))&#123;<br>                System.out.println(<span class="hljs-string">&quot;=================  删除房屋信息成功  ==================&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;=================  删除房屋信息编号不存在  ==================&quot;</span>);<br>            &#125;<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;=================  放弃删除房屋信息  ==================&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>退出确认机制</p><ul><li>使用Utility提供的方法, 完成确认</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//这里使用Utility提供的方法, 完成退出确认</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Utility.readConfirmSelection();<br>      <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;Y&#x27;</span>)&#123;<br>          loop = <span class="hljs-literal">false</span>;<br>      &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>根据id查找房屋信息</p><ul><li><p>功能说明:</p><p>根据用户输入的id, 查找出已有房源. 先确认输入的信息有效, 如果能找到则显示, 找不到就报错</p></li><li><p>思路分析</p><p>需要同时编写HosueView类, 和HosueService类. 实现houseSerch与Serch方法</p></li><li><p>小小bug</p><p>这里发现了一个Utility的bug, 当我在readInt() 前面没有输出信息的时候, 程序就会卡在这里不动, 即便我回车也没有继续执行, 希望有大佬指点一二.</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">houseFind</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;请输入要查找的房屋id:&quot;</span>);<span class="hljs-comment">//当没有这一条语句时, 下一条语句无法跳出</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">findId</span> <span class="hljs-operator">=</span> Utility.readInt();<span class="hljs-comment">//Utility是上文提供的工具类</span><br><br>        <span class="hljs-type">House</span> <span class="hljs-variable">tempHouse</span> <span class="hljs-operator">=</span> houseService.find(findId);<br><br>        <span class="hljs-keyword">if</span>(tempHouse == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;不存在此id的房屋&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        System.out.println(tempHouse);<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>bug已解决, 是我突然降智了, 哈哈哈.</p><ul><li><p>修改房屋信息</p><ul><li><p>功能说明: 先让用户输入需要修改的房屋id, 再通过此id查找到对应房屋, 并对其信息进行修改</p></li><li><p>思路分析:需要同时编写HosueView类, 和HosueService类. 实现modifyHouse与modify方法</p></li><li><p>特别说明:</p><p>因为houseService.find()  返回的是引用类型, 因此对其返回对象的修改其实是修改houses数组里对应的House对象</p></li><li><p>代码如下:</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改房屋信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">modifyHouse</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;==================修改房屋信息=================&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;请选择待修改的房屋编号(-1表示退出)&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">modifyId</span> <span class="hljs-operator">=</span> Utility.readInt();<br>   <span class="hljs-comment">// houseService.modify(modifyId);</span><br>    <span class="hljs-keyword">if</span>(modifyId == -<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;你放弃了房屋修改&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br><br>    &#125;<br>    <span class="hljs-type">House</span> <span class="hljs-variable">modifyHouse</span> <span class="hljs-operator">=</span> houseService.find(modifyId);<br>    <span class="hljs-keyword">if</span>(modifyHouse == <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;该id对应的房屋信息不存在&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;姓名(&quot;</span>+modifyHouse.getName() +<span class="hljs-string">&quot;):&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">8</span>,modifyHouse.getName());<br>    <span class="hljs-keyword">if</span>(!modifyHouse.getName().equals(name))&#123;<br>        modifyHouse.setName(name);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;电话(&quot;</span>+modifyHouse.getPhone() +<span class="hljs-string">&quot;):&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">12</span>,modifyHouse.getPhone());<br>    <span class="hljs-keyword">if</span>(!modifyHouse.getPhone().equals(phone))&#123;<br>        modifyHouse.setPhone(phone);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;地址(&quot;</span>+modifyHouse.getAddress() +<span class="hljs-string">&quot;):&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">18</span>,modifyHouse.getAddress());<br>    <span class="hljs-keyword">if</span>(!modifyHouse.getAddress().equals(address))&#123;<br>        modifyHouse.setAddress(address);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;月租(&quot;</span>+modifyHouse.getRent() +<span class="hljs-string">&quot;):&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rent</span>  <span class="hljs-operator">=</span> Utility.readInt(modifyHouse.getRent());<br>    <span class="hljs-keyword">if</span>(modifyHouse.getRent() != rent)&#123;<br>        modifyHouse.setRent(rent);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;状态(&quot;</span>+modifyHouse.getState() +<span class="hljs-string">&quot;):&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">8</span>,modifyHouse.getState());<br>    <span class="hljs-keyword">if</span>(!modifyHouse.getState().equals(state))&#123;<br>        modifyHouse.setState(state);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>​    以上就是房屋出租系统的全部内容了, 本项目并非自己独立完成, 在项目许多搞不明白的地方是看着老韩的视频逐步写下来的. 虽然在这个项目上老是磕磕绊绊, 但最终还是完成了. 本来一天的时间就已经足够了的, 因为自己第一天起床晚加上当天晚上又去看电视剧 导致第一天学了3小时多一点. 希望以后在写项目的过程中要合理安排时间. 另外, 在以后还应当提升自己的表达能力, 目前对于问题的分析以及自己想法的陈述还有诸多不足, 希望接下来能一点一点向前进步.</p>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java项目 </tag>
            
            <tag> 房屋出租 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包含min函数的栈</title>
      <link href="/2022/02/03/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
      <url>/2022/02/03/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 <code>min</code> 函数在该栈中，调用 <code>min</code>、<code>push</code> 及 <code>pop</code> 的时间复杂度都是 O(1)。</p><p>思路：使用两个栈A和B，栈A用作常规栈，栈B用作存<code>min</code>值的栈。每新加一个值，先判断是否小于或等于B栈栈顶元素，是则将其压入A栈和B栈，否则只压入A栈。当A元素出栈时，需要判断出栈元素是否和B栈栈顶元素相等，若相等，则A栈和B栈一起出栈，否则只是A栈出栈。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br>    Stack&lt;Integer&gt; stack1;<br>    Stack&lt;Integer&gt; stack2;<br><br>    <span class="hljs-comment">/** initialize your data structure here. */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinStack</span><span class="hljs-params">()</span> &#123;<br>        stack1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        stack2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span>(stack1.isEmpty() || x &lt;= stack2.peek())&#123;<br>            stack1.push(x);<br>            stack2.push(x);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        stack1.push(x);<br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">if</span>(stack1.peek().equals(stack2.peek()))&#123;<br>            stack1.pop();<br>            stack2.pop();<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>           stack1.pop();<br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> stack1.peek();<br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> stack2.peek();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MinStack object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MinStack obj = new MinStack();</span><br><span class="hljs-comment"> * obj.push(x);</span><br><span class="hljs-comment"> * obj.pop();</span><br><span class="hljs-comment"> * int param_3 = obj.top();</span><br><span class="hljs-comment"> * int param_4 = obj.min();</span><br><span class="hljs-comment"> */</span><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找两个正序数组的中位数</title>
      <link href="/2022/01/03/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
      <url>/2022/01/03/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>给定两个大小分别为 <code>m</code> 和<code> n</code> 的正序（从小到大）数组 <code>nums1</code> 和<code> nums2</code>。请你找出并返回这两个正序数组的中位数。</p><p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p><p>示例 1：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">输入：nums1 = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>], nums2 = [<span class="hljs-number">2</span>]<br>输出：<span class="hljs-number">2.00000</span><br>解释：合并数组 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] ，中位数 <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>示例 2：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">输入：nums1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], nums2 = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>输出：<span class="hljs-number">2.50000</span><br>解释：合并数组 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>] ，中位数 (<span class="hljs-number">2</span> + <span class="hljs-number">3</span>) / <span class="hljs-number">2</span> = <span class="hljs-number">2.5</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2)</span> &#123;<br>        <span class="hljs-comment">// if(nums1.length &lt;= nums2.length)&#123;</span><br>        <span class="hljs-comment">//     m = nums1.length;</span><br>        <span class="hljs-comment">//     n = nums2.length;</span><br>        <span class="hljs-comment">// &#125;else&#123;</span><br>        <span class="hljs-comment">//     m = nums2.length;</span><br>        <span class="hljs-comment">//     n = nums1.length;</span><br>        <span class="hljs-comment">// &#125;// m 为较短</span><br><br>        <span class="hljs-comment">// int count = 0;</span><br>        <span class="hljs-comment">// int end = (m+n)/2;</span><br>        <span class="hljs-comment">// int i = 0, j = 0;</span><br>        <span class="hljs-comment">// int curr = 0, last = 0;</span><br>        <span class="hljs-comment">// boolean isEven = end % 2 == 0; // 总长是奇数还是偶数, 偶数为true</span><br><br><br>        <span class="hljs-comment">// while(end &gt;= 0)&#123;</span><br>        <span class="hljs-comment">//     if(i&gt;m)&#123;</span><br>                <br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> nums1.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums2.length;<br><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> (m + n) / <span class="hljs-number">2</span>;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">two</span> <span class="hljs-operator">=</span> (m + n) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, t2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (idx &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> curr;<br>            <span class="hljs-keyword">if</span> (t1 &gt;= m) &#123;  <span class="hljs-comment">// t1 和 t2 不可能同时越界, 因为找到中位数的时候,已经退出循环</span><br>                curr = nums2[t2];<br>                t2++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t2 &gt;= n) &#123;<span class="hljs-comment">// 如果发生数组越界, 那么也只有一个数组发生越界</span><br>                curr = nums1[t1];<br>                t1++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[t1] &gt; nums2[t2]) &#123;<br>                curr = nums2[t2];<br>                t2++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                curr = nums1[t1];<br>                t1++;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (idx == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (two) &#123;<br>                    <span class="hljs-keyword">return</span> (curr + last) / <span class="hljs-number">2.0</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> curr / <span class="hljs-number">1.0</span>;<br>            &#125;<br><br>            last = curr;<br>            idx--;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/2022/01/03/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2022/01/03/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 和为目标值 <code>target</code>  的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。</p><ol><li>就是使用两个for循环，这种效率很差</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> nums.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; length; j++)<br>            <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i, j&#125;;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ol start="2"><li>使用HashMap解决</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>    Map&lt;Integer, Integer&gt; m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (m.get(target - nums[i]) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;m.get(target - nums[i]), i&#125;;<br>        &#125;<br>        m.put(nums[i], i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客优化</title>
      <link href="/2022/01/01/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BC%98%E5%8C%96/"/>
      <url>/2022/01/01/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客的优化"><a href="#个人博客的优化" class="headerlink" title="个人博客的优化"></a>个人博客的优化</h1><h2 id="1-自动部署"><a href="#1-自动部署" class="headerlink" title="1. 自动部署"></a>1. 自动部署</h2><p>对于个人博客，如果设置为自动部署，每一次发布文章时还需要手动更新 GitHub 仓库中的内容，如果设置为自动部署，那么以后在本地修改博客内容以后便会自动更新 GitHub 中的内容</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>首先我们要确保本地 Hexo 是可以正确运行的，比如</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></div></td></tr></table></figure><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>如果 Hexo 可以正常地部署到 GitHub，那么实际上你原来的秘钥是可以正常使用的。</p><p>以下为 macOS 下的操作，Linux 下操作方法相同，Windows 10 用户可以在市场中安装 Ubuntu 以后执行：</p><h2 id="添加标签页和分类页"><a href="#添加标签页和分类页" class="headerlink" title="添加标签页和分类页"></a>添加标签页和分类页</h2><p>现在使用的主题里打开<code>_config.yml</code>文件（这里一定要是themes文件下所含的主题，不要弄错了）。按下<code>Ctrl+F</code>，搜索<code>menu</code>，找到如下内容：</p><p><img src="/2022/01/01/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BC%98%E5%8C%96/Users\Administrator.DESKTOP-VVE6ROJ\AppData\Roaming\Typora\typora-user-images\image-20220216180517037.png" alt="image-20220216180517037"></p><p>按照自己的要求对代码进行修改，让菜单按钮显示出来。</p><p>在blog文件夹下打开 git bash 键入如下命令</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo n page tags<br></code></pre></div></td></tr></table></figure><p>可以发现在 source  文件夹下出现一个 tags 文件夹，</p><h3 id="文章页"><a href="#文章页" class="headerlink" title="文章页"></a>文章页</h3><h4 id="便签使用"><a href="#便签使用" class="headerlink" title="便签使用"></a>便签使用</h4><figure class="highlight django"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><span class="language-xml"></span><br><span class="language-xml">文字 或者 `markdown` 均可</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></div></td></tr></table></figure><p>使用时 <div class="note note-primary">            <p>和 </p>          </div> 需单独一行，否则会出现问题</p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续~~~~"></a>未完待续~~~~</h1><blockquote><p>目前博客界面勉强能看, 但还是有许多的地方没有优化. 例如评论区功能尚未完善. 不过现阶段最重要的是学习Java, 博客的优化就暂时告一段落吧. </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客的搭建</title>
      <link href="/2022/01/01/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/01/01/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是蓝鸟x发布的第一篇文章</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>直接在<code>github page</code>平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且<code>hexo</code>作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</p><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a><code>Hexo</code>简介</h2><p><code>Hexo</code>(中文官方网站)是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. <code>Hexo</code>支持<code>Github</code> <code>Flavored</code> <code>Markdown</code>的所有功能, 甚至可以整合<code>Octopress</code>的大多数插件. 并自己也拥有强大的插件系统.</p><h2 id="Hexo-搭建教程"><a href="#Hexo-搭建教程" class="headerlink" title="Hexo 搭建教程"></a><code>Hexo</code> 搭建教程</h2><h6 id="本次教程有-8-个部分，详细介绍了如何搭建个人博客"><a href="#本次教程有-8-个部分，详细介绍了如何搭建个人博客" class="headerlink" title="本次教程有 8 个部分，详细介绍了如何搭建个人博客"></a>本次教程有 8 个部分，详细介绍了如何搭建个人博客</h6><ul><li>安装 <code>Git</code></li><li>安装 <code>Node.js</code></li><li>安装 <code>Hexo</code></li><li><code>Github</code> 创建个人仓库</li><li>更改主题</li><li>发布文章<h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 <code>Git</code></h3><blockquote><p>本教程使用的系统是<code>Windows10 Pro</code></p></blockquote></li></ul><p> 到 <a href="https://git-scm.com/download/win">Git</a> 官网下载并安装即可，下载后有一个Git Bash的命令行工具，以后就用这个命令行工具来使用git</p><h3 id="安装-NodeJs"><a href="#安装-NodeJs" class="headerlink" title="安装 NodeJs"></a>安装 <code>NodeJs</code></h3><p> <code>Hexo</code> 是基于 <code>NodeJs</code> 编写的， 因此要安装 <code>nodejs</code> 和里面的工具<code>npm</code>。<br> Windows：<a href="https://nodejs.org/en/download/">下载链接 https://nodejs.org/en/download</a>，选择LTS版本</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 <code>Hexo</code></h3><p>安装好 Git 后，选择好需要安装<code>hexo</code>的地方，这就是你博客的本地服务器（可以新建一个以英文命名的文件夹, 本文建立的文件夹名为 <code>Blog</code>，代指下文出现的<code>Blog</code>），进入这个文件夹后点击空白处，并右键选择 <code>Git Bash here </code> 可以打开 Git 的命令行窗口，输入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></div></td></tr></table></figure><p>回车后键入 <code>hexo -v</code> 查看<code>hexo</code>版本</p><h6 id="到这里环境准备完成，开始使用-hexo-搭建个人博客"><a href="#到这里环境准备完成，开始使用-hexo-搭建个人博客" class="headerlink" title="到这里环境准备完成，开始使用 hexo 搭建个人博客"></a>到这里环境准备完成，开始使用 <code>hexo </code>搭建个人博客</h6><h3 id="初始化-Hexo"><a href="#初始化-Hexo" class="headerlink" title="初始化 Hexo"></a>初始化 <code>Hexo</code></h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo init 文件夹名<br>$ <span class="hljs-built_in">cd</span> 文件夹名<br>$ npm install<br></code></pre></div></td></tr></table></figure><p>这一步之后会在 <code>Blog</code> 文件夹生成许多的文件以及文件夹，以下是相关的英译汉：</p><blockquote><p>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>_config.yml: 博客的配置文件</p></blockquote><p>接着输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo s<br></code></pre></div></td></tr></table></figure><p>这里的<code> hexo s</code> 表示打开服务器，如果要关闭服务器，按下<code>ctrl+c</code>即可，打开服务器后可看见如下结果<br><img src="https://img-blog.csdnimg.cn/0afdf4a39f1f436e9149070ae119473c.png" alt="在这里插入图片描述"><br>此时可在浏览器进入 <a href="http://localhost:4000/">http://localhost:4000</a> ，便可看到个人博客的主页。如下图所示：<br><img src="https://img-blog.csdnimg.cn/6f15f2b61af248649695629013d5ca3f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2VpeGluXzQ2NjE5OTEy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a>创建 <code>GitHub </code>仓库</h3><ol><li><p>首先，需要一个<code>GitHub</code>账户，可通过QQ邮箱注册，这里便不一一赘述了</p></li><li><p>登录<code>GitHub</code>账户后，在个人主页新建仓库，点击<code>New  repository</code><br><img src="https://img-blog.csdnimg.cn/61089a5787e54a47b3fe5eb425495924.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2VpeGluXzQ2NjE5OTEy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>创建一个和你用户名相同的仓库，后面加<code>.github.io</code>，只有这样，将来要部署到<code>GitHub page</code>的时候，才会被识别，也就是<code>xxxx.github.io</code>，其中<code>xxx</code>就是你注册<code>GitHub</code>的用户名。</p><h3 id="生成-SSH-添加到-github-仓库"><a href="#生成-SSH-添加到-github-仓库" class="headerlink" title="生成 SSH 添加到 github 仓库"></a>生成 SSH 添加到 <code>github </code>仓库</h3><p>由于后续都是通过 SSH 进行仓库代码的快速部署，所以这一步很有必要，如果之前有在你的电脑本地进行过你的 github 仓库的 SSH 绑定，那此步可跳过<br>在 Bash 命令行键入以下内容</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></div></td></tr></table></figure><p>yourname就是你的 GitHub 用户名，youremail 就是你注册 GitHub 使用的邮箱。<br>然后键入以下内容，经过多次回车即可。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></div></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。ssh，简单来讲，就是一个秘钥，其中，id_rsa 是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub 是公共秘钥，可以随便给别人看。把这个公钥放在 GitHub 上，这样当你链接 GitHub 自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过 git 上传你的文件到 GitHub 上。而后在 github 的 setting 中，找到 SSH keys 的设置选项，点击 New SSH key 把你的 id_rsa.pub 里面的信息复制进去。之后，在 gitbash 中输入以下指令，查看是否 SSH 是否已绑定成功。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">ssh -T git@github.com<br></code></pre></div></td></tr></table></figure><p>成功的界面如下<br><img src="https://img-blog.csdnimg.cn/d63484b3eb6541a385c73fd17585eca2.png" alt="在这里插入图片描述"></p><h3 id="将本地-Hexo-部署到-Github"><a href="#将本地-Hexo-部署到-Github" class="headerlink" title="将本地 Hexo 部署到 Github"></a>将本地 Hexo 部署到 Github</h3><p>这一步，我们就可以将 hexo 和 github 关联起来，也就是将 hexo 生成的文章部署到 github 上，打开站点配置文件 <code>_config.yml</code>，翻到最后，进行如下修改即可，xxxx 改为你的 github 账户用户名</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">deploy:<br>  type: git<br>  repo: git@github.com:xxxx/xxxx.github.io.git<br>  branch: main<br></code></pre></div></td></tr></table></figure><p>修改完配置文件<code>_config.yml</code>并保存后，回到 gitbash命令行这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到 GitHub</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></div></td></tr></table></figure><blockquote><p><code>hexo clean</code> 清除了你之前生成的东西。<br><code>hexo generate </code>生成静态文章，可以用 <code>hexo g </code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p></blockquote><p>部署的时候可能有弹出窗口需要你登录Github，登录即可，设置了 ssh 一般不需要</p><p>得到下图说明你已经部署成功，<br><img src="https://img-blog.csdnimg.cn/692ca13d165d429da904dbe7984a87b6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2VpeGluXzQ2NjE5OTEy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h3><p>这里以 fluid 主题作为示例<br>来到主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid">github</a> 仓库，点击 Download ZIP 下载最新的压缩包<br><img src="https://img-blog.csdnimg.cn/41de292e86b642dfb46f80a64dab1644.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2VpeGluXzQ2NjE5OTEy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>下载完后，将压缩包解压到你博客项目的 themes 文件夹下，并将解压出来文件夹更名为 fluid<br>然后打开根目录的 _config.yml 文件，拉到最下面找到 theme 属性，修改为 fluid<br><img src="https://img-blog.csdnimg.cn/5daa3dc87284453894cea1643c19551e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd2VpeGluXzQ2NjE5OTEy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>输入以下三个指令进行重新部署，过一会儿即可看到主题发生改变</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">hexo clean<br>hexo g<br>hexo d<br></code></pre></div></td></tr></table></figure><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>发布新文章</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">hexo <span class="hljs-keyword">new</span> newpapername<br></code></pre></div></td></tr></table></figure><p>然后在Blog&#x2F;source&#x2F;_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再键入</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">hexo clean<br>hexo g<br>hexo d<br></code></pre></div></td></tr></table></figure><p>每次更新完文章或配置，都建议输入以上三个指令进行重新部署，而不要缺某条指令</p><p>以上就是本篇文章的全部内容。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hi! Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
